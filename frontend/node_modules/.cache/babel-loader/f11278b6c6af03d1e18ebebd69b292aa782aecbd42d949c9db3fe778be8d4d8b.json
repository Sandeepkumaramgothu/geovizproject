{"ast":null,"code":"var _jsxFileName = \"/Users/girishkumarpatchikoru/Desktop/projecthci/geovizproject/frontend/src/components/MapView.js\",\n  _s = $RefreshSig$();\n// src/components/MapView.js\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport Papa from 'papaparse';\nimport { Bar, Pie, Doughnut, PolarArea } from 'react-chartjs-2';\nimport { Chart as ChartJS, RadialLinearScale, CategoryScale, LinearScale, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\nimport 'react-circular-progressbar/dist/styles.css';\nimport styles from './styles'; // Ensure this file exists and is properly configured\nimport preprocessData from './preprocessData'; // Ensure this file exists and is properly configured\nimport { MAPBOX_TOKEN } from './constants'; // Ensure this file contains your Mapbox token\nimport blueMarkerIcon from '../assets/images/custom-marker-blue.png'; // Ensure these assets exist\nimport redMarkerIcon from '../assets/images/custom-marker-red.png';\nimport yellowMarkerIcon from '../assets/images/custom-marker-yellow.png'; // Add this icon for comparison markers\nimport './marker.css'; // Ensure this CSS file exists for marker styling\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(RadialLinearScale, CategoryScale, LinearScale, BarElement, ArcElement, Title, Tooltip, Legend, ChartDataLabels);\n\n// Set Mapbox access token\nmapboxgl.accessToken = MAPBOX_TOKEN;\n\n// Custom Loading Bar Component\nconst LoadingBar = ({\n  progress\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  style: {\n    width: '100%',\n    backgroundColor: '#ddd',\n    height: '10px',\n    borderRadius: '5px'\n  },\n  children: /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: `${progress}%`,\n      height: '100%',\n      backgroundColor: '#28a745',\n      borderRadius: '5px',\n      transition: 'width 0.3s ease'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 47,\n  columnNumber: 3\n}, this);\n_c = LoadingBar;\nconst MapView = () => {\n  _s();\n  // State Variables\n  const [map, setMap] = useState(null);\n  const [geoData, setGeoData] = useState([]);\n  const [numericHeaders, setNumericHeaders] = useState([]);\n  const [stringHeaders, setStringHeaders] = useState([]);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [chartType, setChartType] = useState('Bar');\n  const [chartData, setChartData] = useState(null);\n  const [totalRows, setTotalRows] = useState(0);\n  const [totalColumns, setTotalColumns] = useState(0);\n  const [markers, setMarkers] = useState([]);\n  const [progress, setProgress] = useState({\n    upload: 0,\n    preprocess: 0,\n    geocode: 0\n  });\n  const [progressMessages, setProgressMessages] = useState({\n    upload: '',\n    preprocess: '',\n    geocode: ''\n  });\n  const [stateList, setStateList] = useState([]);\n  const [selectedState1, setSelectedState1] = useState('');\n  const [selectedState2, setSelectedState2] = useState('');\n  const [locationColumn, setLocationColumn] = useState('');\n  const [markersAdded, setMarkersAdded] = useState(false);\n  const [dataNeedsGeocoding, setDataNeedsGeocoding] = useState(true);\n  const [compareMarkersEnabled, setCompareMarkersEnabled] = useState(false);\n  const [stateCoordinates, setStateCoordinates] = useState({});\n\n  // Global Min and Max for Normalization\n  const [globalMinMax, setGlobalMinMax] = useState({});\n\n  // Initialize Map\n  useEffect(() => {\n    if (geoData.some(item => item.latitude && item.longitude)) {\n      const initializeMap = new mapboxgl.Map({\n        container: 'map',\n        style: 'mapbox://styles/mapbox/streets-v11',\n        center: [-98.5795, 39.8283],\n        zoom: 3\n      });\n      const nav = new mapboxgl.NavigationControl();\n      initializeMap.addControl(nav, 'top-right');\n      setMap(initializeMap);\n      return () => initializeMap.remove();\n    }\n  }, [geoData]);\n\n  // Reverse Geocode Function to get State Name\n  const reverseGeocodeState = useCallback(async (latitude, longitude) => {\n    try {\n      const response = await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${longitude},${latitude}.json?types=region&access_token=${MAPBOX_TOKEN}`);\n      const data = await response.json();\n      if (data.features && data.features.length > 0) {\n        return data.features[0].text.trim().toUpperCase();\n      } else {\n        return null;\n      }\n    } catch (error) {\n      console.error('Reverse geocoding error:', error);\n      return null;\n    }\n  }, []);\n\n  // Geocode Function to get coordinates from location name\n  const geocodeLocation = useCallback(async locationName => {\n    if (!locationName) return {\n      latitude: null,\n      longitude: null\n    };\n    try {\n      const response = await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(locationName)}.json?access_token=${MAPBOX_TOKEN}`);\n      const data = await response.json();\n      if (data.features && data.features.length > 0) {\n        const [longitude, latitude] = data.features[0].center;\n        return {\n          latitude,\n          longitude\n        };\n      }\n      return {\n        latitude: null,\n        longitude: null\n      };\n    } catch (error) {\n      console.error('Geocoding error:', error);\n      return {\n        latitude: null,\n        longitude: null\n      };\n    }\n  }, []);\n\n  // Generate Chart Data for Selected Location\n  const generateChartData = useCallback(locationData => {\n    if (locationData) {\n      const locationValues = numericHeaders.map(header => ({\n        label: header,\n        value: parseFloat(locationData[header]) || 0\n      }));\n      const normalizedValues = locationValues.map(item => {\n        const {\n          min,\n          max\n        } = globalMinMax[item.label] || {\n          min: 0,\n          max: 1\n        };\n        const normalizedValue = max !== min ? (item.value - min) / (max - min) * 9.5 + 0.5 : 5;\n        return {\n          label: item.label,\n          normalizedValue: isFinite(normalizedValue) ? normalizedValue : 0.5,\n          actualValue: item.value\n        };\n      });\n      setChartData({\n        labels: normalizedValues.map(item => item.label),\n        datasets: [{\n          label: locationData.state,\n          data: normalizedValues.map(item => item.normalizedValue),\n          actualValues: normalizedValues.map(item => item.actualValue),\n          backgroundColor: ['rgba(255, 99, 132, 0.5)', 'rgba(54, 162, 235, 0.5)', 'rgba(255, 206, 86, 0.5)', 'rgba(75, 192, 192, 0.5)', 'rgba(153, 102, 255, 0.5)', 'rgba(255, 159, 64, 0.5)'],\n          borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],\n          borderWidth: 1\n        }]\n      });\n    }\n  }, [numericHeaders, globalMinMax]);\n\n  // Handle Location Selection from Map\n  const handleLocationSelect = useCallback(locationData => {\n    console.log('Marker clicked:', locationData);\n    setSelectedState1('');\n    setSelectedState2('');\n    setCompareMarkersEnabled(false);\n\n    // If the clicked state is already selected, deselect it\n    if (selectedLocation && selectedLocation.state === locationData.state) {\n      setSelectedLocation(null);\n      setChartData(null);\n    } else {\n      // Select the clicked state and generate chart data for it\n      setSelectedLocation(locationData);\n      generateChartData(locationData);\n    }\n  }, [selectedLocation, generateChartData]);\n\n  // Data Generation\n  useEffect(() => {\n    if (selectedLocation) {\n      generateChartData(selectedLocation);\n    } else {\n      setChartData(null);\n    }\n    // We can safely omit generateChartData from dependencies because it doesn't change\n  }, [selectedLocation]);\n\n  // Preprocess Data Function\n  const handlePreprocess = useCallback(async rawData => {\n    setProgress(prev => ({\n      ...prev,\n      preprocess: 0\n    }));\n\n    // Remove null, undefined, and inconsistent data rows\n    const cleanRawData = rawData.filter(item => item !== null && item !== undefined && Object.keys(item).length > 0);\n\n    // Determine if data contains latitude and longitude\n    const dataContainsLatLng = cleanRawData.some(item => item.latitude && item.longitude);\n    setDataNeedsGeocoding(!dataContainsLatLng);\n\n    // Determine the location column dynamically (case-insensitive)\n    const possibleLocationColumns = ['state', 'province', 'city'];\n    let detectedLocationColumn = possibleLocationColumns.find(col => cleanRawData[0] && Object.keys(cleanRawData[0]).some(key => key.toLowerCase() === col.toLowerCase()));\n    setLocationColumn(detectedLocationColumn || '');\n    console.log('Detected Location Column:', detectedLocationColumn);\n    if (!detectedLocationColumn && !dataContainsLatLng) {\n      alert('No valid location column found in the dataset.');\n      return;\n    }\n\n    // Preprocess data\n    const processedData = await preprocessData(cleanRawData, setProgress);\n    console.log('Number of Data Points After Preprocessing:', processedData.length);\n    if (!processedData || processedData.length === 0) {\n      alert('No data available after filtering.');\n      return;\n    }\n    setProgress(prev => ({\n      ...prev,\n      preprocess: 50\n    }));\n\n    // Initialize state data aggregation\n    const stateDataMap = {};\n    const stateCoordsMap = {};\n    const numericFields = new Set();\n    if (detectedLocationColumn || dataContainsLatLng) {\n      for (const item of processedData) {\n        let stateName = '';\n        if (detectedLocationColumn) {\n          stateName = item[detectedLocationColumn];\n          if (detectedLocationColumn.toLowerCase().includes('city')) {\n            // If the location column is a city, we need to get the state name\n            const coords = await geocodeLocation(stateName);\n            if (coords.latitude && coords.longitude) {\n              stateName = await reverseGeocodeState(coords.latitude, coords.longitude);\n              if (!stateName) continue;\n            } else {\n              continue;\n            }\n          } else {\n            stateName = stateName.trim().toUpperCase();\n          }\n        } else if (dataContainsLatLng) {\n          const latitude = parseFloat(item.latitude);\n          const longitude = parseFloat(item.longitude);\n          if (!isNaN(latitude) && !isNaN(longitude)) {\n            stateName = await reverseGeocodeState(latitude, longitude);\n            if (stateName) {\n              stateName = stateName.trim().toUpperCase();\n            } else {\n              continue;\n            }\n          } else {\n            continue;\n          }\n        }\n        if (!stateName) continue;\n\n        // Aggregate data per state\n        if (!stateDataMap[stateName]) {\n          stateDataMap[stateName] = {\n            ...item\n          };\n          stateDataMap[stateName].state = stateName;\n          stateDataMap[stateName].count = 1;\n\n          // Store coordinates for the first occurrence\n          const latitude = parseFloat(item.latitude);\n          const longitude = parseFloat(item.longitude);\n          if (!isNaN(latitude) && !isNaN(longitude)) {\n            stateCoordsMap[stateName] = {\n              latitude,\n              longitude\n            };\n          }\n        } else {\n          // Sum numeric fields\n          Object.keys(item).forEach(key => {\n            if (key.toLowerCase() === 'state') return;\n            const value = parseFloat(item[key]);\n            if (!isNaN(value)) {\n              numericFields.add(key);\n              stateDataMap[stateName][key] = (stateDataMap[stateName][key] || 0) + value;\n            }\n          });\n          stateDataMap[stateName].count += 1;\n        }\n      }\n    }\n    setProgress(prev => ({\n      ...prev,\n      preprocess: 80\n    }));\n\n    // Calculate averages for numeric fields\n    const aggregatedData = Object.values(stateDataMap).map(item => {\n      const count = item.count || 1;\n      numericFields.forEach(key => {\n        const parsedValue = parseFloat(item[key]);\n        if (!isNaN(parsedValue)) {\n          item[key] = parsedValue / count;\n        } else {\n          item[key] = 0;\n        }\n      });\n      return item;\n    });\n    setGeoData(aggregatedData);\n    setStateCoordinates(stateCoordsMap);\n\n    // Identify numeric and string headers\n    if (aggregatedData.length > 0) {\n      const headers = Object.keys(aggregatedData[0]);\n      const numeric = [];\n      const strings = [];\n      headers.forEach(header => {\n        if (['latitude', 'longitude', 'GeoLocation', 'locationID', 'count', 'state'].includes(header)) return;\n        const isNumeric = aggregatedData.every(item => {\n          const value = parseFloat(item[header]);\n          return !isNaN(value);\n        });\n        if (isNumeric) {\n          numeric.push(header);\n        } else {\n          strings.push(header);\n        }\n      });\n\n      // Calculate global min and max for each numeric field BEFORE setting state\n      const globalMinMaxCalc = {};\n      numeric.forEach(header => {\n        const values = aggregatedData.map(item => parseFloat(item[header]));\n        globalMinMaxCalc[header] = {\n          min: Math.min(...values),\n          max: Math.max(...values)\n        };\n      });\n      setGlobalMinMax(globalMinMaxCalc);\n      setNumericHeaders(numeric);\n      setStringHeaders(strings);\n      setTotalRows(aggregatedData.length);\n      setTotalColumns(headers.length);\n\n      // Extract unique states for comparison\n      const uniqueStates = Object.keys(stateDataMap);\n      setStateList(uniqueStates);\n    } else {\n      alert('No data available after filtering.');\n    }\n    setProgress(prev => ({\n      ...prev,\n      preprocess: 100\n    }));\n\n    // Reset markersAdded state when new data is uploaded\n    setMarkersAdded(false);\n  }, [reverseGeocodeState, geocodeLocation, preprocessData]);\n\n  // Handle File Upload\n  const handleFileUpload = event => {\n    setProgress({\n      upload: 0,\n      preprocess: 0,\n      geocode: 0\n    });\n    setProgressMessages({\n      upload: '',\n      preprocess: '',\n      geocode: ''\n    });\n    const file = event.target.files[0];\n    if (file) {\n      const fileExtension = file.name.split('.').pop().toLowerCase();\n      if (fileExtension === 'json') {\n        const reader = new FileReader();\n        reader.onload = async e => {\n          try {\n            const data = JSON.parse(e.target.result);\n            setProgress(prev => ({\n              ...prev,\n              upload: 100\n            }));\n            setProgressMessages(prev => ({\n              ...prev,\n              upload: 'Dataset uploaded successfully.'\n            }));\n            await handlePreprocess(data);\n          } catch (error) {\n            console.error('Invalid JSON format:', error);\n            alert('Error: Uploaded file is not valid JSON.');\n          }\n        };\n        reader.readAsText(file);\n      } else if (fileExtension === 'csv') {\n        Papa.parse(file, {\n          header: true,\n          skipEmptyLines: true,\n          beforeFirstChunk: chunk => {\n            // Handle datasets with metadata rows\n            const lines = chunk.trim().split('\\n');\n            const dataStartIndex = lines.findIndex(line => line.toLowerCase().startsWith('country name') || line.toLowerCase().startsWith('state') || line.toLowerCase().startsWith('rowid') || line.toLowerCase().startsWith('longitude') || line.toLowerCase().startsWith('latitude'));\n            if (dataStartIndex > 0) {\n              return lines.slice(dataStartIndex).join('\\n');\n            }\n            return chunk;\n          },\n          complete: async results => {\n            setProgress(prev => ({\n              ...prev,\n              upload: 100\n            }));\n            setProgressMessages(prev => ({\n              ...prev,\n              upload: 'Dataset uploaded successfully.'\n            }));\n            await handlePreprocess(results.data);\n          },\n          error: error => {\n            console.error('CSV parsing error:', error);\n            alert('Error: Failed to parse CSV file.');\n          }\n        });\n      } else {\n        alert('Please upload a valid JSON or CSV file.');\n      }\n    }\n  };\n\n  // Monitor Progress Updates\n  useEffect(() => {\n    if (progress.preprocess === 100) {\n      setProgressMessages(prev => ({\n        ...prev,\n        preprocess: 'Preprocessing completed.'\n      }));\n    }\n  }, [progress.preprocess]);\n  useEffect(() => {\n    if (progress.geocode === 100) {\n      setProgressMessages(prev => ({\n        ...prev,\n        geocode: 'Locations marked on the map.'\n      }));\n    }\n  }, [progress.geocode]);\n\n  // Markers on Map\n  // Continue from previous part\n\n  const renderMarkers = useCallback(() => {\n    if (map && geoData.length > 0) {\n      if (stateList.length === 0) {\n        alert('Data is not aggregated by state. Cannot mark locations on the map.');\n        return;\n      }\n\n      // Remove existing markers\n      markers.forEach(marker => marker.remove());\n      const newMarkers = [];\n      geoData.forEach(data => {\n        const stateName = data.state;\n        const coords = stateCoordinates[stateName];\n        if (!coords) return;\n        const latitude = parseFloat(coords.latitude);\n        const longitude = parseFloat(coords.longitude);\n        if (!isNaN(latitude) && !isNaN(longitude)) {\n          const el = document.createElement('div');\n          el.className = 'marker';\n          const isSelected = selectedLocation ? selectedLocation.state === data.state : false;\n          const isCompared = compareMarkersEnabled ? [selectedState1, selectedState2].includes(stateName) : false;\n          const icon = isSelected ? redMarkerIcon : isCompared ? yellowMarkerIcon : blueMarkerIcon;\n          el.style.backgroundImage = `url(${icon})`;\n          el.style.width = '30px';\n          el.style.height = '30px';\n          el.style.backgroundSize = 'contain';\n          el.style.cursor = 'pointer';\n          const marker = new mapboxgl.Marker(el).setLngLat([longitude, latitude]).addTo(map);\n\n          // Add popup with state name\n          const popup = new mapboxgl.Popup({\n            offset: 25\n          }).setText(stateName);\n          marker.setPopup(popup);\n          marker.getElement().addEventListener('click', () => {\n            handleLocationSelect(data);\n          });\n          newMarkers.push(marker);\n        }\n      });\n      setMarkers(newMarkers);\n      setMarkersAdded(true);\n      setProgress(prev => ({\n        ...prev,\n        geocode: 100\n      }));\n      setProgressMessages(prev => ({\n        ...prev,\n        geocode: 'Locations marked on the map.'\n      }));\n    }\n  }, [map, geoData, selectedLocation, stateCoordinates, markers, stateList, compareMarkersEnabled, selectedState1, selectedState2, handleLocationSelect]);\n\n  // Re-render markers when selectedLocation or comparison changes\n  useEffect(() => {\n    if (markersAdded) {\n      renderMarkers();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedLocation, compareMarkersEnabled]);\n\n  // Handle State Comparison Selection\n  const handleStateSelection = () => {\n    if (selectedState1 && selectedState2) {\n      const data1 = geoData.find(item => item.state === selectedState1);\n      const data2 = geoData.find(item => item.state === selectedState2);\n      if (!data1 || !data2) {\n        alert('One or both selected states have no data.');\n        return;\n      }\n      const labels = numericHeaders;\n      const dataset = {\n        labels,\n        datasets: [{\n          label: selectedState1,\n          data: numericHeaders.map(header => {\n            const value = data1[header] || 0;\n            const {\n              min,\n              max\n            } = globalMinMax[header] || {\n              min: 0,\n              max: 1\n            };\n            const normalizedValue = max !== min ? (value - min) / (max - min) * 9.5 + 0.5 : 5;\n            return isFinite(normalizedValue) ? normalizedValue : 0.5;\n          }),\n          actualValues: numericHeaders.map(header => data1[header] || 0),\n          backgroundColor: 'rgba(255, 99, 132, 0.5)',\n          borderColor: 'rgba(255, 99, 132, 1)',\n          borderWidth: 1\n        }, {\n          label: selectedState2,\n          data: numericHeaders.map(header => {\n            const value = data2[header] || 0;\n            const {\n              min,\n              max\n            } = globalMinMax[header] || {\n              min: 0,\n              max: 1\n            };\n            const normalizedValue = max !== min ? (value - min) / (max - min) * 9.5 + 0.5 : 5;\n            return isFinite(normalizedValue) ? normalizedValue : 0.5;\n          }),\n          actualValues: numericHeaders.map(header => data2[header] || 0),\n          backgroundColor: 'rgba(54, 162, 235, 0.5)',\n          borderColor: 'rgba(54, 162, 235, 1)',\n          borderWidth: 1\n        }]\n      };\n      setChartData(dataset);\n      setSelectedLocation(null);\n      setCompareMarkersEnabled(true);\n\n      // Render the markers for the selected states\n      renderMarkers();\n    }\n  };\n\n  // Chart Options\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: chartType === 'Bar' ? {\n      y: {\n        beginAtZero: true,\n        min: 0.5,\n        max: 10\n      }\n    } : {},\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      datalabels: {\n        display: true,\n        color: '#000',\n        align: 'center',\n        anchor: 'center',\n        formatter: function (value, context) {\n          const dataset = context.chart.data.datasets[context.datasetIndex];\n          if (dataset.actualValues) {\n            const actualValue = dataset.actualValues[context.dataIndex];\n            if (typeof actualValue === 'number' && isFinite(actualValue)) {\n              return actualValue.toFixed(2);\n            } else {\n              return '';\n            }\n          } else {\n            if (typeof value === 'number' && isFinite(value)) {\n              return value.toFixed(2);\n            } else {\n              return '';\n            }\n          }\n        }\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            const dataset = context.dataset;\n            const actualValue = dataset.actualValues ? dataset.actualValues[context.dataIndex] : context.parsed.y;\n            if (typeof actualValue === 'number' && isFinite(actualValue)) {\n              return `${context.label}: ${actualValue.toFixed(2)}`;\n            } else {\n              return `${context.label}: ${actualValue || ''}`;\n            }\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [geoData.some(item => item.latitude && item.longitude) && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: styles.map\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 729,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.sidebar,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.combinedBox,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.progressContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.progressItem,\n            children: [/*#__PURE__*/_jsxDEV(LoadingBar, {\n              progress: progress.upload\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 739,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: styles.progressMessage,\n              children: progressMessages.upload\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 740,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 738,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.progressItem,\n            children: [/*#__PURE__*/_jsxDEV(LoadingBar, {\n              progress: progress.preprocess\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 743,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: styles.progressMessage,\n              children: progressMessages.preprocess\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 744,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 742,\n            columnNumber: 13\n          }, this), dataNeedsGeocoding && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.progressItem,\n            children: [/*#__PURE__*/_jsxDEV(LoadingBar, {\n              progress: progress.geocode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 748,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: styles.progressMessage,\n              children: progressMessages.geocode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 749,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 747,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 737,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.section,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            style: styles.sectionTitle,\n            children: \"Upload Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 756,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \".json, .csv\",\n            onChange: handleFileUpload,\n            style: styles.fileInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 757,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 755,\n          columnNumber: 11\n        }, this), geoData.length > 0 && stateList.length > 0 && !markersAdded && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.section,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: renderMarkers,\n            style: {\n              ...styles.chartButton,\n              backgroundColor: '#17a2b8',\n              width: '100%'\n            },\n            children: \"Mark Locations on Map\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 768,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 767,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.section,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            style: styles.sectionTitle,\n            children: \"Dataset Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 783,\n            columnNumber: 13\n          }, this), geoData.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.datasetDetails,\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Rows:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 787,\n                columnNumber: 19\n              }, this), \" \", totalRows]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 786,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Columns:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 790,\n                columnNumber: 19\n              }, this), \" \", totalColumns]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 789,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Numeric Columns:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 793,\n                columnNumber: 19\n              }, this), \" \", numericHeaders.join(', ')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 792,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"String Columns:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 796,\n                columnNumber: 19\n              }, this), \" \", stringHeaders.join(', ')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 795,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 785,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No dataset uploaded yet.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 800,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 782,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.section,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            style: styles.sectionTitle,\n            children: \"Compare Two States\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 806,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.inputGroup,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              style: styles.inputLabel,\n              children: \"State 1:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 808,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedState1,\n              onChange: e => setSelectedState1(e.target.value),\n              style: styles.selectDropdown,\n              disabled: stateList.length === 0,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select State\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 815,\n                columnNumber: 17\n              }, this), stateList.map(state => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: state,\n                children: state\n              }, state, false, {\n                fileName: _jsxFileName,\n                lineNumber: 817,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 809,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 807,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.inputGroup,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              style: styles.inputLabel,\n              children: \"State 2:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 824,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedState2,\n              onChange: e => setSelectedState2(e.target.value),\n              style: styles.selectDropdown,\n              disabled: stateList.length === 0,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select State\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 831,\n                columnNumber: 17\n              }, this), stateList.map(state => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: state,\n                children: state\n              }, state, false, {\n                fileName: _jsxFileName,\n                lineNumber: 833,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 825,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 823,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleStateSelection,\n            disabled: !selectedState1 || !selectedState2,\n            style: {\n              ...styles.chartButton,\n              backgroundColor: selectedState1 && selectedState2 ? '#28a745' : '#6c757d'\n            },\n            children: \"Compare\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 839,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 805,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.section,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            style: styles.sectionTitle,\n            children: \"Select Chart Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 854,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.chartOptions,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setChartType('Bar'),\n              style: {\n                ...styles.chartButton,\n                ...(chartType === 'Bar' ? styles.chartButtonActive : {})\n              },\n              children: \"Bar Chart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 856,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setChartType('Pie'),\n              style: {\n                ...styles.chartButton,\n                ...(chartType === 'Pie' ? styles.chartButtonActive : {})\n              },\n              children: \"Pie Chart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 865,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setChartType('Doughnut'),\n              style: {\n                ...styles.chartButton,\n                ...(chartType === 'Doughnut' ? styles.chartButtonActive : {})\n              },\n              children: \"Doughnut Chart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 874,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setChartType('PolarArea'),\n              style: {\n                ...styles.chartButton,\n                ...(chartType === 'PolarArea' ? styles.chartButtonActive : {})\n              },\n              children: \"PolarArea Chart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 883,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 855,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 853,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 735,\n        columnNumber: 9\n      }, this), chartData && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.chartContainer,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.chartWrapper,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.chartContent,\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [chartType, \" Chart\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 901,\n              columnNumber: 17\n            }, this), chartType === 'Bar' && /*#__PURE__*/_jsxDEV(Bar, {\n              data: chartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 902,\n              columnNumber: 41\n            }, this), chartType === 'Pie' && /*#__PURE__*/_jsxDEV(Pie, {\n              data: chartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 903,\n              columnNumber: 41\n            }, this), chartType === 'Doughnut' && /*#__PURE__*/_jsxDEV(Doughnut, {\n              data: chartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 905,\n              columnNumber: 19\n            }, this), chartType === 'PolarArea' && /*#__PURE__*/_jsxDEV(PolarArea, {\n              data: chartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 908,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 900,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 899,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 898,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 733,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 726,\n    columnNumber: 5\n  }, this);\n};\n_s(MapView, \"JlaQZGI9yRRu04ZuF4/Gh1IGRrQ=\");\n_c2 = MapView;\nexport default MapView;\nvar _c, _c2;\n$RefreshReg$(_c, \"LoadingBar\");\n$RefreshReg$(_c2, \"MapView\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","mapboxgl","Papa","Bar","Pie","Doughnut","PolarArea","Chart","ChartJS","RadialLinearScale","CategoryScale","LinearScale","BarElement","ArcElement","Title","Tooltip","Legend","ChartDataLabels","styles","preprocessData","MAPBOX_TOKEN","blueMarkerIcon","redMarkerIcon","yellowMarkerIcon","jsxDEV","_jsxDEV","register","accessToken","LoadingBar","progress","style","width","backgroundColor","height","borderRadius","children","transition","fileName","_jsxFileName","lineNumber","columnNumber","_c","MapView","_s","map","setMap","geoData","setGeoData","numericHeaders","setNumericHeaders","stringHeaders","setStringHeaders","selectedLocation","setSelectedLocation","chartType","setChartType","chartData","setChartData","totalRows","setTotalRows","totalColumns","setTotalColumns","markers","setMarkers","setProgress","upload","preprocess","geocode","progressMessages","setProgressMessages","stateList","setStateList","selectedState1","setSelectedState1","selectedState2","setSelectedState2","locationColumn","setLocationColumn","markersAdded","setMarkersAdded","dataNeedsGeocoding","setDataNeedsGeocoding","compareMarkersEnabled","setCompareMarkersEnabled","stateCoordinates","setStateCoordinates","globalMinMax","setGlobalMinMax","some","item","latitude","longitude","initializeMap","Map","container","center","zoom","nav","NavigationControl","addControl","remove","reverseGeocodeState","response","fetch","data","json","features","length","text","trim","toUpperCase","error","console","geocodeLocation","locationName","encodeURIComponent","generateChartData","locationData","locationValues","header","label","value","parseFloat","normalizedValues","min","max","normalizedValue","isFinite","actualValue","labels","datasets","state","actualValues","borderColor","borderWidth","handleLocationSelect","log","handlePreprocess","rawData","prev","cleanRawData","filter","undefined","Object","keys","dataContainsLatLng","possibleLocationColumns","detectedLocationColumn","find","col","key","toLowerCase","alert","processedData","stateDataMap","stateCoordsMap","numericFields","Set","stateName","includes","coords","isNaN","count","forEach","add","aggregatedData","values","parsedValue","headers","numeric","strings","isNumeric","every","push","globalMinMaxCalc","Math","uniqueStates","handleFileUpload","event","file","target","files","fileExtension","name","split","pop","reader","FileReader","onload","e","JSON","parse","result","readAsText","skipEmptyLines","beforeFirstChunk","chunk","lines","dataStartIndex","findIndex","line","startsWith","slice","join","complete","results","renderMarkers","marker","newMarkers","el","document","createElement","className","isSelected","isCompared","icon","backgroundImage","backgroundSize","cursor","Marker","setLngLat","addTo","popup","Popup","offset","setText","setPopup","getElement","addEventListener","handleStateSelection","data1","data2","dataset","chartOptions","responsive","maintainAspectRatio","scales","y","beginAtZero","plugins","legend","position","datalabels","display","color","align","anchor","formatter","context","chart","datasetIndex","dataIndex","toFixed","tooltip","callbacks","parsed","id","sidebar","combinedBox","progressContainer","progressItem","progressMessage","section","sectionTitle","type","accept","onChange","fileInput","onClick","chartButton","datasetDetails","inputGroup","inputLabel","selectDropdown","disabled","chartButtonActive","chartContainer","chartWrapper","chartContent","options","_c2","$RefreshReg$"],"sources":["/Users/girishkumarpatchikoru/Desktop/projecthci/geovizproject/frontend/src/components/MapView.js"],"sourcesContent":["// src/components/MapView.js\r\n\r\nimport React, { useEffect, useState, useCallback } from 'react';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport Papa from 'papaparse';\r\nimport { Bar, Pie, Doughnut, PolarArea } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  RadialLinearScale,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\n\r\nimport styles from './styles'; // Ensure this file exists and is properly configured\r\nimport preprocessData from './preprocessData'; // Ensure this file exists and is properly configured\r\nimport { MAPBOX_TOKEN } from './constants'; // Ensure this file contains your Mapbox token\r\nimport blueMarkerIcon from '../assets/images/custom-marker-blue.png'; // Ensure these assets exist\r\nimport redMarkerIcon from '../assets/images/custom-marker-red.png';\r\nimport yellowMarkerIcon from '../assets/images/custom-marker-yellow.png'; // Add this icon for comparison markers\r\nimport './marker.css'; // Ensure this CSS file exists for marker styling\r\n\r\n// Register Chart.js components\r\nChartJS.register(\r\n  RadialLinearScale,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  ChartDataLabels\r\n);\r\n\r\n// Set Mapbox access token\r\nmapboxgl.accessToken = MAPBOX_TOKEN;\r\n\r\n// Custom Loading Bar Component\r\nconst LoadingBar = ({ progress }) => (\r\n  <div style={{ width: '100%', backgroundColor: '#ddd', height: '10px', borderRadius: '5px' }}>\r\n    <div\r\n      style={{\r\n        width: `${progress}%`,\r\n        height: '100%',\r\n        backgroundColor: '#28a745',\r\n        borderRadius: '5px',\r\n        transition: 'width 0.3s ease',\r\n      }}\r\n    ></div>\r\n  </div>\r\n);\r\n\r\nconst MapView = () => {\r\n  // State Variables\r\n  const [map, setMap] = useState(null);\r\n  const [geoData, setGeoData] = useState([]);\r\n  const [numericHeaders, setNumericHeaders] = useState([]);\r\n  const [stringHeaders, setStringHeaders] = useState([]);\r\n  const [selectedLocation, setSelectedLocation] = useState(null);\r\n  const [chartType, setChartType] = useState('Bar');\r\n  const [chartData, setChartData] = useState(null);\r\n  const [totalRows, setTotalRows] = useState(0);\r\n  const [totalColumns, setTotalColumns] = useState(0);\r\n  const [markers, setMarkers] = useState([]);\r\n  const [progress, setProgress] = useState({\r\n    upload: 0,\r\n    preprocess: 0,\r\n    geocode: 0,\r\n  });\r\n  const [progressMessages, setProgressMessages] = useState({\r\n    upload: '',\r\n    preprocess: '',\r\n    geocode: '',\r\n  });\r\n  const [stateList, setStateList] = useState([]);\r\n  const [selectedState1, setSelectedState1] = useState('');\r\n  const [selectedState2, setSelectedState2] = useState('');\r\n  const [locationColumn, setLocationColumn] = useState('');\r\n  const [markersAdded, setMarkersAdded] = useState(false);\r\n  const [dataNeedsGeocoding, setDataNeedsGeocoding] = useState(true);\r\n  const [compareMarkersEnabled, setCompareMarkersEnabled] = useState(false);\r\n  const [stateCoordinates, setStateCoordinates] = useState({});\r\n\r\n  // Global Min and Max for Normalization\r\n  const [globalMinMax, setGlobalMinMax] = useState({});\r\n\r\n  // Initialize Map\r\n  useEffect(() => {\r\n    if (geoData.some((item) => item.latitude && item.longitude)) {\r\n      const initializeMap = new mapboxgl.Map({\r\n        container: 'map',\r\n        style: 'mapbox://styles/mapbox/streets-v11',\r\n        center: [-98.5795, 39.8283],\r\n        zoom: 3,\r\n      });\r\n\r\n      const nav = new mapboxgl.NavigationControl();\r\n      initializeMap.addControl(nav, 'top-right');\r\n\r\n      setMap(initializeMap);\r\n\r\n      return () => initializeMap.remove();\r\n    }\r\n  }, [geoData]);\r\n\r\n  // Reverse Geocode Function to get State Name\r\n  const reverseGeocodeState = useCallback(async (latitude, longitude) => {\r\n    try {\r\n      const response = await fetch(\r\n        `https://api.mapbox.com/geocoding/v5/mapbox.places/${longitude},${latitude}.json?types=region&access_token=${MAPBOX_TOKEN}`\r\n      );\r\n      const data = await response.json();\r\n      if (data.features && data.features.length > 0) {\r\n        return data.features[0].text.trim().toUpperCase();\r\n      } else {\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Reverse geocoding error:', error);\r\n      return null;\r\n    }\r\n  }, []);\r\n\r\n  // Geocode Function to get coordinates from location name\r\n  const geocodeLocation = useCallback(async (locationName) => {\r\n    if (!locationName) return { latitude: null, longitude: null };\r\n    try {\r\n      const response = await fetch(\r\n        `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(\r\n          locationName\r\n        )}.json?access_token=${MAPBOX_TOKEN}`\r\n      );\r\n      const data = await response.json();\r\n      if (data.features && data.features.length > 0) {\r\n        const [longitude, latitude] = data.features[0].center;\r\n        return { latitude, longitude };\r\n      }\r\n      return { latitude: null, longitude: null };\r\n    } catch (error) {\r\n      console.error('Geocoding error:', error);\r\n      return { latitude: null, longitude: null };\r\n    }\r\n  }, []);\r\n\r\n  // Generate Chart Data for Selected Location\r\n  const generateChartData = useCallback(\r\n    (locationData) => {\r\n      if (locationData) {\r\n        const locationValues = numericHeaders.map((header) => ({\r\n          label: header,\r\n          value: parseFloat(locationData[header]) || 0,\r\n        }));\r\n\r\n        const normalizedValues = locationValues.map((item) => {\r\n          const { min, max } = globalMinMax[item.label] || { min: 0, max: 1 };\r\n          const normalizedValue =\r\n            max !== min ? ((item.value - min) / (max - min)) * 9.5 + 0.5 : 5;\r\n          return {\r\n            label: item.label,\r\n            normalizedValue: isFinite(normalizedValue) ? normalizedValue : 0.5,\r\n            actualValue: item.value,\r\n          };\r\n        });\r\n\r\n        setChartData({\r\n          labels: normalizedValues.map((item) => item.label),\r\n          datasets: [\r\n            {\r\n              label: locationData.state,\r\n              data: normalizedValues.map((item) => item.normalizedValue),\r\n              actualValues: normalizedValues.map((item) => item.actualValue),\r\n              backgroundColor: [\r\n                'rgba(255, 99, 132, 0.5)',\r\n                'rgba(54, 162, 235, 0.5)',\r\n                'rgba(255, 206, 86, 0.5)',\r\n                'rgba(75, 192, 192, 0.5)',\r\n                'rgba(153, 102, 255, 0.5)',\r\n                'rgba(255, 159, 64, 0.5)',\r\n              ],\r\n              borderColor: [\r\n                'rgba(255, 99, 132, 1)',\r\n                'rgba(54, 162, 235, 1)',\r\n                'rgba(255, 206, 86, 1)',\r\n                'rgba(75, 192, 192, 1)',\r\n                'rgba(153, 102, 255, 1)',\r\n                'rgba(255, 159, 64, 1)',\r\n              ],\r\n              borderWidth: 1,\r\n            },\r\n          ],\r\n        });\r\n      }\r\n    },\r\n    [numericHeaders, globalMinMax]\r\n  );\r\n\r\n  // Handle Location Selection from Map\r\n  const handleLocationSelect = useCallback(\r\n    (locationData) => {\r\n      console.log('Marker clicked:', locationData);\r\n\r\n      setSelectedState1('');\r\n      setSelectedState2('');\r\n      setCompareMarkersEnabled(false);\r\n\r\n      // If the clicked state is already selected, deselect it\r\n      if (selectedLocation && selectedLocation.state === locationData.state) {\r\n        setSelectedLocation(null);\r\n        setChartData(null);\r\n      } else {\r\n        // Select the clicked state and generate chart data for it\r\n        setSelectedLocation(locationData);\r\n        generateChartData(locationData);\r\n      }\r\n    },\r\n    [selectedLocation, generateChartData]\r\n  );\r\n\r\n  // Data Generation\r\n  useEffect(() => {\r\n    if (selectedLocation) {\r\n      generateChartData(selectedLocation);\r\n    } else {\r\n      setChartData(null);\r\n    }\r\n    // We can safely omit generateChartData from dependencies because it doesn't change\r\n  }, [selectedLocation]);\r\n\r\n  // Preprocess Data Function\r\n  const handlePreprocess = useCallback(\r\n    async (rawData) => {\r\n      setProgress((prev) => ({ ...prev, preprocess: 0 }));\r\n\r\n      // Remove null, undefined, and inconsistent data rows\r\n      const cleanRawData = rawData.filter(\r\n        (item) => item !== null && item !== undefined && Object.keys(item).length > 0\r\n      );\r\n\r\n      // Determine if data contains latitude and longitude\r\n      const dataContainsLatLng = cleanRawData.some(\r\n        (item) => item.latitude && item.longitude\r\n      );\r\n\r\n      setDataNeedsGeocoding(!dataContainsLatLng);\r\n\r\n      // Determine the location column dynamically (case-insensitive)\r\n      const possibleLocationColumns = ['state', 'province', 'city'];\r\n      let detectedLocationColumn = possibleLocationColumns.find((col) =>\r\n        cleanRawData[0] &&\r\n        Object.keys(cleanRawData[0]).some((key) => key.toLowerCase() === col.toLowerCase())\r\n      );\r\n\r\n      setLocationColumn(detectedLocationColumn || '');\r\n\r\n      console.log('Detected Location Column:', detectedLocationColumn);\r\n\r\n      if (!detectedLocationColumn && !dataContainsLatLng) {\r\n        alert('No valid location column found in the dataset.');\r\n        return;\r\n      }\r\n\r\n      // Preprocess data\r\n      const processedData = await preprocessData(\r\n        cleanRawData,\r\n        setProgress\r\n      );\r\n\r\n      console.log('Number of Data Points After Preprocessing:', processedData.length);\r\n\r\n      if (!processedData || processedData.length === 0) {\r\n        alert('No data available after filtering.');\r\n        return;\r\n      }\r\n\r\n      setProgress((prev) => ({ ...prev, preprocess: 50 }));\r\n\r\n      // Initialize state data aggregation\r\n      const stateDataMap = {};\r\n      const stateCoordsMap = {};\r\n      const numericFields = new Set();\r\n\r\n      if (detectedLocationColumn || dataContainsLatLng) {\r\n        for (const item of processedData) {\r\n          let stateName = '';\r\n\r\n          if (detectedLocationColumn) {\r\n            stateName = item[detectedLocationColumn];\r\n            if (detectedLocationColumn.toLowerCase().includes('city')) {\r\n              // If the location column is a city, we need to get the state name\r\n              const coords = await geocodeLocation(stateName);\r\n              if (coords.latitude && coords.longitude) {\r\n                stateName = await reverseGeocodeState(coords.latitude, coords.longitude);\r\n                if (!stateName) continue;\r\n              } else {\r\n                continue;\r\n              }\r\n            } else {\r\n              stateName = stateName.trim().toUpperCase();\r\n            }\r\n          } else if (dataContainsLatLng) {\r\n            const latitude = parseFloat(item.latitude);\r\n            const longitude = parseFloat(item.longitude);\r\n            if (!isNaN(latitude) && !isNaN(longitude)) {\r\n              stateName = await reverseGeocodeState(latitude, longitude);\r\n              if (stateName) {\r\n                stateName = stateName.trim().toUpperCase();\r\n              } else {\r\n                continue;\r\n              }\r\n            } else {\r\n              continue;\r\n            }\r\n          }\r\n\r\n          if (!stateName) continue;\r\n\r\n          // Aggregate data per state\r\n          if (!stateDataMap[stateName]) {\r\n            stateDataMap[stateName] = { ...item };\r\n            stateDataMap[stateName].state = stateName;\r\n            stateDataMap[stateName].count = 1;\r\n\r\n            // Store coordinates for the first occurrence\r\n            const latitude = parseFloat(item.latitude);\r\n            const longitude = parseFloat(item.longitude);\r\n            if (!isNaN(latitude) && !isNaN(longitude)) {\r\n              stateCoordsMap[stateName] = { latitude, longitude };\r\n            }\r\n          } else {\r\n            // Sum numeric fields\r\n            Object.keys(item).forEach((key) => {\r\n              if (key.toLowerCase() === 'state') return;\r\n              const value = parseFloat(item[key]);\r\n              if (!isNaN(value)) {\r\n                numericFields.add(key);\r\n                stateDataMap[stateName][key] =\r\n                  (stateDataMap[stateName][key] || 0) + value;\r\n              }\r\n            });\r\n            stateDataMap[stateName].count += 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      setProgress((prev) => ({ ...prev, preprocess: 80 }));\r\n\r\n      // Calculate averages for numeric fields\r\n      const aggregatedData = Object.values(stateDataMap).map((item) => {\r\n        const count = item.count || 1;\r\n        numericFields.forEach((key) => {\r\n          const parsedValue = parseFloat(item[key]);\r\n          if (!isNaN(parsedValue)) {\r\n            item[key] = parsedValue / count;\r\n          } else {\r\n            item[key] = 0;\r\n          }\r\n        });\r\n        return item;\r\n      });\r\n\r\n      setGeoData(aggregatedData);\r\n      setStateCoordinates(stateCoordsMap);\r\n\r\n      // Identify numeric and string headers\r\n      if (aggregatedData.length > 0) {\r\n        const headers = Object.keys(aggregatedData[0]);\r\n        const numeric = [];\r\n        const strings = [];\r\n\r\n        headers.forEach((header) => {\r\n          if (\r\n            [\r\n              'latitude',\r\n              'longitude',\r\n              'GeoLocation',\r\n              'locationID',\r\n              'count',\r\n              'state',\r\n            ].includes(header)\r\n          )\r\n            return;\r\n\r\n          const isNumeric = aggregatedData.every((item) => {\r\n            const value = parseFloat(item[header]);\r\n            return !isNaN(value);\r\n          });\r\n          if (isNumeric) {\r\n            numeric.push(header);\r\n          } else {\r\n            strings.push(header);\r\n          }\r\n        });\r\n\r\n        // Calculate global min and max for each numeric field BEFORE setting state\r\n        const globalMinMaxCalc = {};\r\n        numeric.forEach((header) => {\r\n          const values = aggregatedData.map((item) => parseFloat(item[header]));\r\n          globalMinMaxCalc[header] = {\r\n            min: Math.min(...values),\r\n            max: Math.max(...values),\r\n          };\r\n        });\r\n        setGlobalMinMax(globalMinMaxCalc);\r\n\r\n        setNumericHeaders(numeric);\r\n        setStringHeaders(strings);\r\n\r\n        setTotalRows(aggregatedData.length);\r\n        setTotalColumns(headers.length);\r\n\r\n        // Extract unique states for comparison\r\n        const uniqueStates = Object.keys(stateDataMap);\r\n        setStateList(uniqueStates);\r\n      } else {\r\n        alert('No data available after filtering.');\r\n      }\r\n\r\n      setProgress((prev) => ({ ...prev, preprocess: 100 }));\r\n\r\n      // Reset markersAdded state when new data is uploaded\r\n      setMarkersAdded(false);\r\n    },\r\n    [reverseGeocodeState, geocodeLocation, preprocessData]\r\n  );\r\n\r\n  // Handle File Upload\r\n  const handleFileUpload = (event) => {\r\n    setProgress({\r\n      upload: 0,\r\n      preprocess: 0,\r\n      geocode: 0,\r\n    });\r\n    setProgressMessages({\r\n      upload: '',\r\n      preprocess: '',\r\n      geocode: '',\r\n    });\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      const fileExtension = file.name.split('.').pop().toLowerCase();\r\n\r\n      if (fileExtension === 'json') {\r\n        const reader = new FileReader();\r\n        reader.onload = async (e) => {\r\n          try {\r\n            const data = JSON.parse(e.target.result);\r\n            setProgress((prev) => ({ ...prev, upload: 100 }));\r\n            setProgressMessages((prev) => ({\r\n              ...prev,\r\n              upload: 'Dataset uploaded successfully.',\r\n            }));\r\n            await handlePreprocess(data);\r\n          } catch (error) {\r\n            console.error('Invalid JSON format:', error);\r\n            alert('Error: Uploaded file is not valid JSON.');\r\n          }\r\n        };\r\n        reader.readAsText(file);\r\n      } else if (fileExtension === 'csv') {\r\n        Papa.parse(file, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          beforeFirstChunk: (chunk) => {\r\n            // Handle datasets with metadata rows\r\n            const lines = chunk.trim().split('\\n');\r\n            const dataStartIndex = lines.findIndex(\r\n              (line) =>\r\n                line.toLowerCase().startsWith('country name') ||\r\n                line.toLowerCase().startsWith('state') ||\r\n                line.toLowerCase().startsWith('rowid') ||\r\n                line.toLowerCase().startsWith('longitude') ||\r\n                line.toLowerCase().startsWith('latitude')\r\n            );\r\n            if (dataStartIndex > 0) {\r\n              return lines.slice(dataStartIndex).join('\\n');\r\n            }\r\n            return chunk;\r\n          },\r\n          complete: async (results) => {\r\n            setProgress((prev) => ({ ...prev, upload: 100 }));\r\n            setProgressMessages((prev) => ({\r\n              ...prev,\r\n              upload: 'Dataset uploaded successfully.',\r\n            }));\r\n            await handlePreprocess(results.data);\r\n          },\r\n          error: (error) => {\r\n            console.error('CSV parsing error:', error);\r\n            alert('Error: Failed to parse CSV file.');\r\n          },\r\n        });\r\n      } else {\r\n        alert('Please upload a valid JSON or CSV file.');\r\n      }\r\n    }\r\n  };\r\n\r\n  // Monitor Progress Updates\r\n  useEffect(() => {\r\n    if (progress.preprocess === 100) {\r\n      setProgressMessages((prev) => ({\r\n        ...prev,\r\n        preprocess: 'Preprocessing completed.',\r\n      }));\r\n    }\r\n  }, [progress.preprocess]);\r\n\r\n  useEffect(() => {\r\n    if (progress.geocode === 100) {\r\n      setProgressMessages((prev) => ({\r\n        ...prev,\r\n        geocode: 'Locations marked on the map.',\r\n      }));\r\n    }\r\n  }, [progress.geocode]);\r\n\r\n  // Markers on Map\r\n  // Continue from previous part\r\n\r\n  const renderMarkers = useCallback(() => {\r\n    if (map && geoData.length > 0) {\r\n      if (stateList.length === 0) {\r\n        alert('Data is not aggregated by state. Cannot mark locations on the map.');\r\n        return;\r\n      }\r\n\r\n      // Remove existing markers\r\n      markers.forEach((marker) => marker.remove());\r\n      const newMarkers = [];\r\n\r\n      geoData.forEach((data) => {\r\n        const stateName = data.state;\r\n        const coords = stateCoordinates[stateName];\r\n        if (!coords) return;\r\n\r\n        const latitude = parseFloat(coords.latitude);\r\n        const longitude = parseFloat(coords.longitude);\r\n\r\n        if (!isNaN(latitude) && !isNaN(longitude)) {\r\n          const el = document.createElement('div');\r\n          el.className = 'marker';\r\n          const isSelected = selectedLocation\r\n            ? selectedLocation.state === data.state\r\n            : false;\r\n          const isCompared = compareMarkersEnabled\r\n            ? [selectedState1, selectedState2].includes(stateName)\r\n            : false;\r\n          const icon = isSelected\r\n            ? redMarkerIcon\r\n            : isCompared\r\n            ? yellowMarkerIcon\r\n            : blueMarkerIcon;\r\n          el.style.backgroundImage = `url(${icon})`;\r\n          el.style.width = '30px';\r\n          el.style.height = '30px';\r\n          el.style.backgroundSize = 'contain';\r\n          el.style.cursor = 'pointer';\r\n\r\n          const marker = new mapboxgl.Marker(el)\r\n            .setLngLat([longitude, latitude])\r\n            .addTo(map);\r\n\r\n          // Add popup with state name\r\n          const popup = new mapboxgl.Popup({ offset: 25 }).setText(stateName);\r\n          marker.setPopup(popup);\r\n\r\n          marker.getElement().addEventListener('click', () => {\r\n            handleLocationSelect(data);\r\n          });\r\n\r\n          newMarkers.push(marker);\r\n        }\r\n      });\r\n      setMarkers(newMarkers);\r\n      setMarkersAdded(true);\r\n\r\n      setProgress((prev) => ({ ...prev, geocode: 100 }));\r\n      setProgressMessages((prev) => ({\r\n        ...prev,\r\n        geocode: 'Locations marked on the map.',\r\n      }));\r\n    }\r\n  }, [\r\n    map,\r\n    geoData,\r\n    selectedLocation,\r\n    stateCoordinates,\r\n    markers,\r\n    stateList,\r\n    compareMarkersEnabled,\r\n    selectedState1,\r\n    selectedState2,\r\n    handleLocationSelect,\r\n  ]);\r\n\r\n  // Re-render markers when selectedLocation or comparison changes\r\n  useEffect(() => {\r\n    if (markersAdded) {\r\n      renderMarkers();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [selectedLocation, compareMarkersEnabled]);\r\n\r\n  // Handle State Comparison Selection\r\n  const handleStateSelection = () => {\r\n    if (selectedState1 && selectedState2) {\r\n      const data1 = geoData.find((item) => item.state === selectedState1);\r\n      const data2 = geoData.find((item) => item.state === selectedState2);\r\n\r\n      if (!data1 || !data2) {\r\n        alert('One or both selected states have no data.');\r\n        return;\r\n      }\r\n\r\n      const labels = numericHeaders;\r\n      const dataset = {\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: selectedState1,\r\n            data: numericHeaders.map((header) => {\r\n              const value = data1[header] || 0;\r\n              const { min, max } = globalMinMax[header] || { min: 0, max: 1 };\r\n              const normalizedValue =\r\n                max !== min ? ((value - min) / (max - min)) * 9.5 + 0.5 : 5;\r\n              return isFinite(normalizedValue) ? normalizedValue : 0.5;\r\n            }),\r\n            actualValues: numericHeaders.map((header) => data1[header] || 0),\r\n            backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n            borderColor: 'rgba(255, 99, 132, 1)',\r\n            borderWidth: 1,\r\n          },\r\n          {\r\n            label: selectedState2,\r\n            data: numericHeaders.map((header) => {\r\n              const value = data2[header] || 0;\r\n              const { min, max } = globalMinMax[header] || { min: 0, max: 1 };\r\n              const normalizedValue =\r\n                max !== min ? ((value - min) / (max - min)) * 9.5 + 0.5 : 5;\r\n              return isFinite(normalizedValue) ? normalizedValue : 0.5;\r\n            }),\r\n            actualValues: numericHeaders.map((header) => data2[header] || 0),\r\n            backgroundColor: 'rgba(54, 162, 235, 0.5)',\r\n            borderColor: 'rgba(54, 162, 235, 1)',\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      };\r\n\r\n      setChartData(dataset);\r\n      setSelectedLocation(null);\r\n      setCompareMarkersEnabled(true);\r\n\r\n      // Render the markers for the selected states\r\n      renderMarkers();\r\n    }\r\n  };\r\n\r\n  // Chart Options\r\n  const chartOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    scales:\r\n      chartType === 'Bar'\r\n        ? {\r\n            y: {\r\n              beginAtZero: true,\r\n              min: 0.5,\r\n              max: 10,\r\n            },\r\n          }\r\n        : {},\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n      },\r\n      datalabels: {\r\n        display: true,\r\n        color: '#000',\r\n        align: 'center',\r\n        anchor: 'center',\r\n        formatter: function (value, context) {\r\n          const dataset = context.chart.data.datasets[context.datasetIndex];\r\n          if (dataset.actualValues) {\r\n            const actualValue = dataset.actualValues[context.dataIndex];\r\n            if (typeof actualValue === 'number' && isFinite(actualValue)) {\r\n              return actualValue.toFixed(2);\r\n            } else {\r\n              return '';\r\n            }\r\n          } else {\r\n            if (typeof value === 'number' && isFinite(value)) {\r\n              return value.toFixed(2);\r\n            } else {\r\n              return '';\r\n            }\r\n          }\r\n        },\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function (context) {\r\n            const dataset = context.dataset;\r\n            const actualValue = dataset.actualValues\r\n              ? dataset.actualValues[context.dataIndex]\r\n              : context.parsed.y;\r\n            if (typeof actualValue === 'number' && isFinite(actualValue)) {\r\n              return `${context.label}: ${actualValue.toFixed(2)}`;\r\n            } else {\r\n              return `${context.label}: ${actualValue || ''}`;\r\n            }\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      {/* Map Container */}\r\n      {geoData.some((item) => item.latitude && item.longitude) && (\r\n        <div id=\"map\" style={styles.map}></div>\r\n      )}\r\n\r\n      {/* Sidebar */}\r\n      <div style={styles.sidebar}>\r\n        {/* Combined Controls Box */}\r\n        <div style={styles.combinedBox}>\r\n          {/* Progress Indicators */}\r\n          <div style={styles.progressContainer}>\r\n            <div style={styles.progressItem}>\r\n              <LoadingBar progress={progress.upload} />\r\n              <div style={styles.progressMessage}>{progressMessages.upload}</div>\r\n            </div>\r\n            <div style={styles.progressItem}>\r\n              <LoadingBar progress={progress.preprocess} />\r\n              <div style={styles.progressMessage}>{progressMessages.preprocess}</div>\r\n            </div>\r\n            {dataNeedsGeocoding && (\r\n              <div style={styles.progressItem}>\r\n                <LoadingBar progress={progress.geocode} />\r\n                <div style={styles.progressMessage}>{progressMessages.geocode}</div>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Upload Data Section */}\r\n          <div style={styles.section}>\r\n            <h3 style={styles.sectionTitle}>Upload Data</h3>\r\n            <input\r\n              type=\"file\"\r\n              accept=\".json, .csv\"\r\n              onChange={handleFileUpload}\r\n              style={styles.fileInput}\r\n            />\r\n          </div>\r\n\r\n          {/* Mark Locations Button */}\r\n          {geoData.length > 0 && stateList.length > 0 && !markersAdded && (\r\n            <div style={styles.section}>\r\n              <button\r\n                onClick={renderMarkers}\r\n                style={{\r\n                  ...styles.chartButton,\r\n                  backgroundColor: '#17a2b8',\r\n                  width: '100%',\r\n                }}\r\n              >\r\n                Mark Locations on Map\r\n              </button>\r\n            </div>\r\n          )}\r\n\r\n          {/* Dataset Details Section */}\r\n          <div style={styles.section}>\r\n            <h3 style={styles.sectionTitle}>Dataset Details</h3>\r\n            {geoData.length > 0 ? (\r\n              <div style={styles.datasetDetails}>\r\n                <p>\r\n                  <strong>Rows:</strong> {totalRows}\r\n                </p>\r\n                <p>\r\n                  <strong>Columns:</strong> {totalColumns}\r\n                </p>\r\n                <p>\r\n                  <strong>Numeric Columns:</strong> {numericHeaders.join(', ')}\r\n                </p>\r\n                <p>\r\n                  <strong>String Columns:</strong> {stringHeaders.join(', ')}\r\n                </p>\r\n              </div>\r\n            ) : (\r\n              <p>No dataset uploaded yet.</p>\r\n            )}\r\n          </div>\r\n\r\n          {/* Location Comparison Section */}\r\n          <div style={styles.section}>\r\n            <h3 style={styles.sectionTitle}>Compare Two States</h3>\r\n            <div style={styles.inputGroup}>\r\n              <label style={styles.inputLabel}>State 1:</label>\r\n              <select\r\n                value={selectedState1}\r\n                onChange={(e) => setSelectedState1(e.target.value)}\r\n                style={styles.selectDropdown}\r\n                disabled={stateList.length === 0}\r\n              >\r\n                <option value=\"\">Select State</option>\r\n                {stateList.map((state) => (\r\n                  <option key={state} value={state}>\r\n                    {state}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div style={styles.inputGroup}>\r\n              <label style={styles.inputLabel}>State 2:</label>\r\n              <select\r\n                value={selectedState2}\r\n                onChange={(e) => setSelectedState2(e.target.value)}\r\n                style={styles.selectDropdown}\r\n                disabled={stateList.length === 0}\r\n              >\r\n                <option value=\"\">Select State</option>\r\n                {stateList.map((state) => (\r\n                  <option key={state} value={state}>\r\n                    {state}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <button\r\n              onClick={handleStateSelection}\r\n              disabled={!selectedState1 || !selectedState2}\r\n              style={{\r\n                ...styles.chartButton,\r\n                backgroundColor:\r\n                  selectedState1 && selectedState2 ? '#28a745' : '#6c757d',\r\n              }}\r\n            >\r\n              Compare\r\n            </button>\r\n          </div>\r\n\r\n          {/* Chart Type Selection Section */}\r\n          <div style={styles.section}>\r\n            <h3 style={styles.sectionTitle}>Select Chart Type</h3>\r\n            <div style={styles.chartOptions}>\r\n              <button\r\n                onClick={() => setChartType('Bar')}\r\n                style={{\r\n                  ...styles.chartButton,\r\n                  ...(chartType === 'Bar' ? styles.chartButtonActive : {}),\r\n                }}\r\n              >\r\n                Bar Chart\r\n              </button>\r\n              <button\r\n                onClick={() => setChartType('Pie')}\r\n                style={{\r\n                  ...styles.chartButton,\r\n                  ...(chartType === 'Pie' ? styles.chartButtonActive : {}),\r\n                }}\r\n              >\r\n                Pie Chart\r\n              </button>\r\n              <button\r\n                onClick={() => setChartType('Doughnut')}\r\n                style={{\r\n                  ...styles.chartButton,\r\n                  ...(chartType === 'Doughnut' ? styles.chartButtonActive : {}),\r\n                }}\r\n              >\r\n                Doughnut Chart\r\n              </button>\r\n              <button\r\n                onClick={() => setChartType('PolarArea')}\r\n                style={{\r\n                  ...styles.chartButton,\r\n                  ...(chartType === 'PolarArea' ? styles.chartButtonActive : {}),\r\n                }}\r\n              >\r\n                PolarArea Chart\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Chart Display Section */}\r\n        {chartData && (\r\n          <div style={styles.chartContainer}>\r\n            <div style={styles.chartWrapper}>\r\n              <div style={styles.chartContent}>\r\n                <h3>{chartType} Chart</h3>\r\n                {chartType === 'Bar' && <Bar data={chartData} options={chartOptions} />}\r\n                {chartType === 'Pie' && <Pie data={chartData} options={chartOptions} />}\r\n                {chartType === 'Doughnut' && (\r\n                  <Doughnut data={chartData} options={chartOptions} />\r\n                )}\r\n                {chartType === 'PolarArea' && (\r\n                  <PolarArea data={chartData} options={chartOptions} />\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}