{"ast":null,"code":"var _jsxFileName = \"/Users/girishkumarpatchikoru/Desktop/projecthci/geovizproject/frontend/src/components/MapView.js\",\n  _s = $RefreshSig$();\n// src/components/MapView.js\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport Papa from 'papaparse';\nimport { Bar, Pie, Doughnut, PolarArea } from 'react-chartjs-2';\nimport { Chart as ChartJS, RadialLinearScale, CategoryScale, LinearScale, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\nimport { CircularProgressbar } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport styles from './styles'; // Ensure this file exists and is properly configured\nimport preprocessData from './preprocessData'; // Ensure this file exists and is properly configured\nimport { MAPBOX_TOKEN } from './constants'; // Ensure this file contains your Mapbox token\nimport blueMarkerIcon from '../assets/images/custom-marker-blue.png'; // Ensure these assets exist\nimport redMarkerIcon from '../assets/images/custom-marker-red.png';\nimport './marker.css'; // Ensure this CSS file exists for marker styling\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(RadialLinearScale, CategoryScale, LinearScale, BarElement, ArcElement, Title, Tooltip, Legend, ChartDataLabels);\n\n// Set Mapbox access token\nmapboxgl.accessToken = MAPBOX_TOKEN;\nconst MapView = () => {\n  _s();\n  // State Variables\n  const [map, setMap] = useState(null);\n  const [geoData, setGeoData] = useState([]);\n  const [numericHeaders, setNumericHeaders] = useState([]);\n  const [stringHeaders, setStringHeaders] = useState([]);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [chartType, setChartType] = useState('Bar');\n  const [chartData, setChartData] = useState(null);\n  const [totalRows, setTotalRows] = useState(0);\n  const [totalColumns, setTotalColumns] = useState(0);\n  const [markers, setMarkers] = useState([]);\n  const [progress, setProgress] = useState({\n    upload: 0,\n    preprocess: 0,\n    geocode: 0\n  });\n  const [progressMessages, setProgressMessages] = useState({\n    upload: '',\n    preprocess: '',\n    geocode: ''\n  });\n  const [stateList, setStateList] = useState([]);\n  const [selectedState1, setSelectedState1] = useState('');\n  const [selectedState2, setSelectedState2] = useState('');\n  const [locationColumn, setLocationColumn] = useState('');\n  const [markersAdded, setMarkersAdded] = useState(false);\n  const [dataNeedsGeocoding, setDataNeedsGeocoding] = useState(true);\n  const [compareMarkersEnabled, setCompareMarkersEnabled] = useState(false);\n  const [stateCoordinates, setStateCoordinates] = useState({}); // To store state centroids for markers\n\n  // Initialize Map\n  useEffect(() => {\n    const initializeMap = new mapboxgl.Map({\n      container: 'map',\n      // HTML container id\n      style: 'mapbox://styles/mapbox/streets-v11',\n      // style URL\n      center: [-98.5795, 39.8283],\n      // starting position [lng, lat] (center of USA)\n      zoom: 3 // starting zoom\n    });\n\n    // Add navigation control (the +/- zoom buttons)\n    const nav = new mapboxgl.NavigationControl();\n    initializeMap.addControl(nav, 'top-right');\n    setMap(initializeMap);\n\n    // Clean up on unmount\n    return () => initializeMap.remove();\n  }, []);\n\n  // Reverse Geocode Function to get State Name\n  const reverseGeocodeState = useCallback(async (latitude, longitude) => {\n    try {\n      const response = await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${longitude},${latitude}.json?types=region&access_token=${MAPBOX_TOKEN}`);\n      const data = await response.json();\n      if (data.features && data.features.length > 0) {\n        return data.features[0].text; // Returns the state name\n      } else {\n        return null;\n      }\n    } catch (error) {\n      console.error('Reverse geocoding error:', error);\n      return null;\n    }\n  }, []);\n\n  // Preprocess Data Function\n  const handlePreprocess = useCallback(async rawData => {\n    setProgress(prev => ({\n      ...prev,\n      preprocess: 0\n    }));\n\n    // Remove null, undefined, and inconsistent data rows\n    const cleanRawData = rawData.filter(item => item !== null && item !== undefined && Object.keys(item).length > 0);\n\n    // Determine if data contains latitude and longitude\n    const dataContainsLatLng = cleanRawData.some(item => item.latitude && item.longitude);\n    setDataNeedsGeocoding(!dataContainsLatLng);\n\n    // Determine the location column dynamically (case-insensitive)\n    const possibleLocationColumns = ['State', 'state', 'Province', 'province', 'City', 'city'];\n    let detectedLocationColumn = possibleLocationColumns.find(col => cleanRawData[0] && Object.keys(cleanRawData[0]).some(key => key.toLowerCase() === col.toLowerCase()));\n    if (!detectedLocationColumn && dataContainsLatLng) {\n      detectedLocationColumn = null;\n    }\n    setLocationColumn(detectedLocationColumn || '');\n    console.log('Detected Location Column:', detectedLocationColumn);\n    if (!detectedLocationColumn && !dataContainsLatLng) {\n      alert('No valid location column found in the dataset.');\n      return;\n    }\n\n    // Preprocess data\n    const processedData = await preprocessData(cleanRawData, setProgress, detectedLocationColumn);\n    if (!processedData || processedData.length === 0) {\n      alert('No valid data after preprocessing.');\n      return;\n    }\n    setProgress(prev => ({\n      ...prev,\n      preprocess: 50\n    }));\n\n    // Initialize state data aggregation\n    const stateDataMap = {};\n    const stateCoordsMap = {}; // To store state coordinates\n    const numericFields = new Set();\n    if (dataContainsLatLng) {\n      // Data contains latitude and longitude, need to reverse geocode to get state names\n      for (const item of processedData) {\n        const latitude = parseFloat(item.latitude);\n        const longitude = parseFloat(item.longitude);\n        if (!isNaN(latitude) && !isNaN(longitude)) {\n          let stateName = await reverseGeocodeState(latitude, longitude);\n          if (!stateName) continue; // Skip if state name couldn't be retrieved\n\n          // Aggregate data per state\n          if (!stateDataMap[stateName]) {\n            stateDataMap[stateName] = {\n              ...item\n            };\n            stateDataMap[stateName].state = stateName;\n            stateDataMap[stateName].count = 1;\n            stateCoordsMap[stateName] = {\n              latitude,\n              longitude\n            };\n          } else {\n            // Sum numeric fields\n            Object.keys(item).forEach(key => {\n              const value = parseFloat(item[key]);\n              if (!isNaN(value)) {\n                numericFields.add(key);\n                stateDataMap[stateName][key] = (stateDataMap[stateName][key] || 0) + value;\n              }\n            });\n            stateDataMap[stateName].count += 1;\n          }\n        }\n      }\n    } else if (detectedLocationColumn) {\n      // Data contains state or city names\n      for (const item of processedData) {\n        let stateName = item[detectedLocationColumn];\n        if (detectedLocationColumn.toLowerCase().includes('city')) {\n          // If the location column is a city, we need to get the state name\n          const coords = await geocodeLocation(stateName);\n          if (coords.latitude && coords.longitude) {\n            stateName = await reverseGeocodeState(coords.latitude, coords.longitude);\n            if (!stateName) continue; // Skip if state name couldn't be retrieved\n          } else {\n            continue;\n          }\n        }\n        if (!stateName) continue;\n\n        // Aggregate data per state\n        if (!stateDataMap[stateName]) {\n          stateDataMap[stateName] = {\n            ...item\n          };\n          stateDataMap[stateName].state = stateName;\n          stateDataMap[stateName].count = 1;\n        } else {\n          // Sum numeric fields\n          Object.keys(item).forEach(key => {\n            const value = parseFloat(item[key]);\n            if (!isNaN(value)) {\n              numericFields.add(key);\n              stateDataMap[stateName][key] = (stateDataMap[stateName][key] || 0) + value;\n            }\n          });\n          stateDataMap[stateName].count += 1;\n        }\n      }\n\n      // Geocode states to get their coordinates\n      for (const stateName of Object.keys(stateDataMap)) {\n        const response = await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(stateName)}.json?types=region&access_token=${MAPBOX_TOKEN}`);\n        const data = await response.json();\n        if (data.features && data.features.length > 0) {\n          const [longitude, latitude] = data.features[0].center;\n          stateCoordsMap[stateName] = {\n            latitude,\n            longitude\n          };\n        }\n      }\n    }\n    setProgress(prev => ({\n      ...prev,\n      preprocess: 80\n    }));\n\n    // Calculate averages for numeric fields\n    const aggregatedData = Object.values(stateDataMap).map(item => {\n      const count = item.count || 1;\n      numericFields.forEach(key => {\n        const parsedValue = parseFloat(item[key]);\n        if (!isNaN(parsedValue)) {\n          item[key] = parsedValue / count;\n        } else {\n          item[key] = 0; // Assign 0 if value is invalid\n        }\n      });\n      return item;\n    });\n    setGeoData(aggregatedData);\n    setStateCoordinates(stateCoordsMap);\n\n    // Identify numeric and string headers\n    if (aggregatedData.length > 0) {\n      const headers = Object.keys(aggregatedData[0]);\n      const numeric = [];\n      const strings = [];\n      headers.forEach(header => {\n        if (['latitude', 'longitude', 'GeoLocation', 'locationID', 'count', 'state'].includes(header)) return;\n        const isNumeric = aggregatedData.every(item => {\n          const value = parseFloat(item[header]);\n          return !isNaN(value);\n        });\n        if (isNumeric) {\n          numeric.push(header);\n        } else {\n          strings.push(header);\n        }\n      });\n      setNumericHeaders(numeric);\n      setStringHeaders(strings);\n      setTotalRows(aggregatedData.length);\n      setTotalColumns(headers.length);\n\n      // Extract unique states for comparison\n      const uniqueStates = Object.keys(stateDataMap);\n      setStateList(uniqueStates);\n    } else {\n      alert('No data available after filtering.');\n    }\n    setProgress(prev => ({\n      ...prev,\n      preprocess: 100\n    }));\n\n    // Reset markersAdded state when new data is uploaded\n    setMarkersAdded(false);\n  }, [reverseGeocodeState]);\n\n  // Geocode Function to get coordinates from location name\n  const geocodeLocation = async locationName => {\n    if (!locationName) return {\n      latitude: null,\n      longitude: null\n    };\n    try {\n      const response = await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(locationName)}.json?access_token=${MAPBOX_TOKEN}`);\n      const data = await response.json();\n      if (data.features && data.features.length > 0) {\n        const [longitude, latitude] = data.features[0].center;\n        return {\n          latitude,\n          longitude\n        };\n      }\n      return {\n        latitude: null,\n        longitude: null\n      };\n    } catch (error) {\n      console.error('Geocoding error:', error);\n      return {\n        latitude: null,\n        longitude: null\n      };\n    }\n  };\n\n  // Handle File Upload\n  const handleFileUpload = event => {\n    setProgress({\n      upload: 0,\n      preprocess: 0,\n      geocode: 0\n    });\n    setProgressMessages({\n      upload: '',\n      preprocess: '',\n      geocode: ''\n    });\n    const file = event.target.files[0];\n    if (file) {\n      const fileExtension = file.name.split('.').pop().toLowerCase();\n      if (fileExtension === 'json') {\n        const reader = new FileReader();\n        reader.onload = async e => {\n          try {\n            const data = JSON.parse(e.target.result);\n            setProgress(prev => ({\n              ...prev,\n              upload: 100\n            }));\n            setProgressMessages(prev => ({\n              ...prev,\n              upload: 'Dataset uploaded successfully.'\n            }));\n            await handlePreprocess(data);\n          } catch (error) {\n            console.error('Invalid JSON format:', error);\n            alert('Error: Uploaded file is not valid JSON.');\n          }\n        };\n        reader.readAsText(file);\n      } else if (fileExtension === 'csv') {\n        Papa.parse(file, {\n          header: true,\n          skipEmptyLines: true,\n          beforeFirstChunk: chunk => {\n            // Handle datasets with metadata rows\n            const lines = chunk.trim().split('\\n');\n            const dataStartIndex = lines.findIndex(line => line.toLowerCase().startsWith('country name') || line.toLowerCase().startsWith('state') || line.toLowerCase().startsWith('rowid'));\n            if (dataStartIndex > 0) {\n              return lines.slice(dataStartIndex).join('\\n');\n            }\n            return chunk;\n          },\n          complete: async results => {\n            setProgress(prev => ({\n              ...prev,\n              upload: 100\n            }));\n            setProgressMessages(prev => ({\n              ...prev,\n              upload: 'Dataset uploaded successfully.'\n            }));\n            await handlePreprocess(results.data);\n          },\n          error: error => {\n            console.error('CSV parsing error:', error);\n            alert('Error: Failed to parse CSV file.');\n          }\n        });\n      } else {\n        alert('Please upload a valid JSON or CSV file.');\n      }\n    }\n  };\n\n  // Monitor Progress Updates\n  useEffect(() => {\n    if (progress.preprocess === 100) {\n      setProgressMessages(prev => ({\n        ...prev,\n        preprocess: 'Preprocessing completed.'\n      }));\n    }\n  }, [progress.preprocess]);\n  useEffect(() => {\n    if (progress.geocode === 100) {\n      setProgressMessages(prev => ({\n        ...prev,\n        geocode: 'Locations marked on the map.'\n      }));\n    }\n  }, [progress.geocode]);\n\n  // Handle Location Selection from Map\n  const handleLocationSelect = useCallback(locationData => {\n    console.log('Marker clicked:', locationData); // Debugging statement\n    // Clear state selections if a map marker is selected\n    setSelectedState1('');\n    setSelectedState2('');\n    setCompareMarkersEnabled(false);\n    if (selectedLocation && selectedLocation.state === locationData.state) {\n      setSelectedLocation(null); // Deselect\n      setChartData(null);\n    } else {\n      setSelectedLocation(locationData);\n      setChartData(null);\n    }\n  }, [selectedLocation]);\n\n  // Handle State Comparison Selection\n  const handleStateSelection = () => {\n    if (selectedState1 && selectedState2) {\n      const data1 = geoData.filter(item => item.state === selectedState1);\n      const data2 = geoData.filter(item => item.state === selectedState2);\n      if (data1.length === 0 || data2.length === 0) {\n        alert('One or both selected states have no data.');\n        return;\n      }\n      const aggregatedData1 = data1[0];\n      const aggregatedData2 = data2[0];\n\n      // Normalize data for chart display (0.5% to 10%)\n      const dataMin = 0; // Minimum data value\n      const dataMax = Math.max(...numericHeaders.map(header => Math.max(aggregatedData1[header], aggregatedData2[header])));\n      const range = dataMax - dataMin || 1; // Avoid division by zero\n\n      const normalizedData1 = {};\n      const normalizedData2 = {};\n      const actualData1 = {};\n      const actualData2 = {};\n      numericHeaders.forEach(header => {\n        const value1 = parseFloat(aggregatedData1[header]);\n        const value2 = parseFloat(aggregatedData2[header]);\n        actualData1[header] = !isNaN(value1) ? value1 : 0;\n        actualData2[header] = !isNaN(value2) ? value2 : 0;\n        normalizedData1[header] = (actualData1[header] - dataMin) / range * 9.5 + 0.5;\n        normalizedData2[header] = (actualData2[header] - dataMin) / range * 9.5 + 0.5;\n      });\n\n      // Prepare chart data\n      const labels = numericHeaders;\n      const dataSet = {\n        labels,\n        datasets: [{\n          label: selectedState1,\n          data: numericHeaders.map(header => normalizedData1[header]),\n          actualValues: numericHeaders.map(header => actualData1[header]),\n          backgroundColor: 'rgba(255, 99, 132, 0.5)',\n          borderColor: 'rgba(255, 99, 132, 1)',\n          borderWidth: 1\n        }, {\n          label: selectedState2,\n          data: numericHeaders.map(header => normalizedData2[header]),\n          actualValues: numericHeaders.map(header => actualData2[header]),\n          backgroundColor: 'rgba(54, 162, 235, 0.5)',\n          borderColor: 'rgba(54, 162, 235, 1)',\n          borderWidth: 1\n        }]\n      };\n      setChartData(dataSet);\n      setSelectedLocation(null); // Deselect any single location\n\n      // Enable the \"Mark on Map\" button\n      setCompareMarkersEnabled(true);\n    }\n  };\n\n  // Generate Chart Data for Selected Location\n  const generateChartData = useCallback(() => {\n    if (selectedLocation) {\n      const locationValues = numericHeaders.map(header => ({\n        label: header,\n        value: parseFloat(selectedLocation[header]) || 0\n      }));\n\n      // Normalize data for chart display (0.5% to 10%)\n      const dataMin = 0; // Minimum data value\n      const dataMax = Math.max(...locationValues.map(item => item.value));\n      const range = dataMax - dataMin || 1; // Avoid division by zero\n\n      const normalizedValues = locationValues.map(item => ({\n        label: item.label,\n        normalizedValue: (item.value - dataMin) / range * 9.5 + 0.5,\n        actualValue: item.value // Keep the actual value\n      }));\n      setChartData({\n        labels: normalizedValues.map(item => item.label),\n        datasets: [{\n          label: selectedLocation.state,\n          data: normalizedValues.map(item => item.normalizedValue),\n          actualValues: normalizedValues.map(item => item.actualValue),\n          // Store actual values\n          backgroundColor: ['rgba(255, 99, 132, 0.5)', 'rgba(54, 162, 235, 0.5)', 'rgba(255, 206, 86, 0.5)', 'rgba(75, 192, 192, 0.5)', 'rgba(153, 102, 255, 0.5)', 'rgba(255, 159, 64, 0.5)'],\n          borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],\n          borderWidth: 1\n        }]\n      });\n    }\n  }, [selectedLocation, numericHeaders]);\n\n  // Data Generation\n  useEffect(() => {\n    generateChartData();\n  }, [generateChartData, chartType, selectedLocation]);\n\n  // Markers on Map\n  const renderMarkers = useCallback(() => {\n    if (map && geoData.length > 0) {\n      // Remove existing markers\n      markers.forEach(marker => marker.remove());\n      const newMarkers = [];\n      geoData.forEach(data => {\n        const stateName = data.state;\n        const coords = stateCoordinates[stateName];\n        if (!coords) return;\n        const latitude = parseFloat(coords.latitude);\n        const longitude = parseFloat(coords.longitude);\n        if (!isNaN(latitude) && !isNaN(longitude)) {\n          const el = document.createElement('div');\n          el.className = 'marker';\n          const isSelected = selectedLocation ? selectedLocation.state === data.state : false;\n          const icon = isSelected ? redMarkerIcon : blueMarkerIcon;\n          el.style.backgroundImage = `url(${icon})`;\n          el.style.width = '30px';\n          el.style.height = '30px';\n          el.style.backgroundSize = 'contain';\n          el.style.cursor = 'pointer';\n          const marker = new mapboxgl.Marker(el).setLngLat([longitude, latitude]).addTo(map);\n          marker.getElement().addEventListener('click', () => {\n            handleLocationSelect(data);\n          });\n          newMarkers.push(marker);\n        }\n      });\n      setMarkers(newMarkers);\n      setMarkersAdded(true);\n      setProgress(prev => ({\n        ...prev,\n        geocode: 100\n      }));\n      setProgressMessages(prev => ({\n        ...prev,\n        geocode: 'Locations marked on the map.'\n      }));\n    } else {\n      alert('Data has not been aggregated by states. Cannot mark locations on map.');\n    }\n  }, [map, geoData, selectedLocation, handleLocationSelect, stateCoordinates, markers]);\n\n  // Render Selected Markers\n  const renderSelectedMarkers = useCallback(async () => {\n    if (map && selectedState1 && selectedState2) {\n      // Remove existing markers\n      markers.forEach(marker => marker.remove());\n      const newMarkers = [];\n      const selectedStates = [selectedState1, selectedState2];\n      const bounds = new mapboxgl.LngLatBounds();\n      for (const stateName of selectedStates) {\n        const data = geoData.find(item => item.state === stateName);\n        if (!data) continue;\n        const coords = stateCoordinates[stateName];\n        if (!coords) continue;\n        const latitude = parseFloat(coords.latitude);\n        const longitude = parseFloat(coords.longitude);\n        if (!isNaN(latitude) && !isNaN(longitude)) {\n          const el = document.createElement('div');\n          el.className = 'marker';\n          el.style.backgroundImage = `url(${blueMarkerIcon})`;\n          el.style.width = '30px';\n          el.style.height = '30px';\n          el.style.backgroundSize = 'contain';\n          el.style.cursor = 'pointer';\n          const marker = new mapboxgl.Marker(el).setLngLat([longitude, latitude]).addTo(map);\n\n          // Add a popup or label with the state name\n          const popup = new mapboxgl.Popup({\n            offset: 25\n          }).setText(stateName);\n          marker.setPopup(popup);\n          bounds.extend([longitude, latitude]);\n          newMarkers.push(marker);\n        }\n      }\n      setMarkers(newMarkers);\n      setMarkersAdded(true);\n\n      // Adjust the map to fit the markers\n      if (!bounds.isEmpty()) {\n        map.fitBounds(bounds, {\n          padding: 50\n        });\n      }\n    }\n  }, [map, selectedState1, selectedState2, geoData, markers, stateCoordinates]);\n\n  // Re-render markers when selectedLocation changes to update marker colors\n  useEffect(() => {\n    if (markersAdded) {\n      renderMarkers();\n    }\n  }, [selectedLocation, renderMarkers, markersAdded]);\n\n  // Chart Options\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: chartType === 'Bar' ? {\n      y: {\n        beginAtZero: true,\n        min: 0.5,\n        max: 10\n      }\n    } : {},\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      datalabels: {\n        display: true,\n        color: '#000',\n        align: 'center',\n        // Align labels to the center of the bars\n        anchor: 'center',\n        formatter: function (value, context) {\n          const dataset = context.chart.data.datasets[context.datasetIndex];\n          if (dataset.actualValues) {\n            const actualValue = dataset.actualValues[context.dataIndex];\n            if (typeof actualValue === 'number' && !isNaN(actualValue)) {\n              return actualValue.toFixed(2); // Display actual value\n            } else {\n              return '';\n            }\n          } else {\n            if (typeof value === 'number' && !isNaN(value)) {\n              return value.toFixed(2);\n            } else {\n              return '';\n            }\n          }\n        }\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            const dataset = context.dataset;\n            const actualValue = dataset.actualValues ? dataset.actualValues[context.dataIndex] : context.parsed.y;\n            if (typeof actualValue === 'number' && !isNaN(actualValue)) {\n              return `${context.label}: ${actualValue.toFixed(2)}`;\n            } else {\n              return `${context.label}: ${actualValue || ''}`;\n            }\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: styles.map\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 756,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.sidebar,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.combinedBox,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.progressContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.progressItem,\n            children: [/*#__PURE__*/_jsxDEV(CircularProgressbar, {\n              value: progress.upload,\n              text: `${Math.round(progress.upload)}%`,\n              styles: {\n                root: {\n                  width: '80px'\n                },\n                text: {\n                  fontSize: '10px'\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 765,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: styles.progressMessage,\n              children: progressMessages.upload\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 773,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 764,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.progressItem,\n            children: [/*#__PURE__*/_jsxDEV(CircularProgressbar, {\n              value: progress.preprocess,\n              text: `${Math.round(progress.preprocess)}%`,\n              styles: {\n                root: {\n                  width: '80px'\n                },\n                text: {\n                  fontSize: '10px'\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 776,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: styles.progressMessage,\n              children: progressMessages.preprocess\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 784,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 775,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.progressItem,\n            children: [/*#__PURE__*/_jsxDEV(CircularProgressbar, {\n              value: progress.geocode,\n              text: `${Math.round(progress.geocode)}%`,\n              styles: {\n                root: {\n                  width: '80px'\n                },\n                text: {\n                  fontSize: '10px'\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 787,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: styles.progressMessage,\n              children: progressMessages.geocode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 795,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 786,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 763,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.section,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            style: styles.sectionTitle,\n            children: \"Upload Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 801,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \".json, .csv\",\n            onChange: handleFileUpload,\n            style: styles.fileInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 802,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 800,\n          columnNumber: 11\n        }, this), geoData.length > 0 && !markersAdded && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.section,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: renderMarkers,\n            style: {\n              ...styles.chartButton,\n              backgroundColor: '#17a2b8',\n              width: '100%'\n            },\n            children: \"Mark Locations on Map\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 813,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 812,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.section,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            style: styles.sectionTitle,\n            children: \"Dataset Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 828,\n            columnNumber: 13\n          }, this), geoData.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.datasetDetails,\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Rows:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 832,\n                columnNumber: 19\n              }, this), \" \", totalRows]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 831,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Columns:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 835,\n                columnNumber: 19\n              }, this), \" \", totalColumns]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 834,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Numeric Columns:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 838,\n                columnNumber: 19\n              }, this), \" \", numericHeaders.join(', ')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 837,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"String Columns:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 841,\n                columnNumber: 19\n              }, this), \" \", stringHeaders.join(', ')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 840,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 830,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No dataset uploaded yet.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 845,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 827,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.section,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            style: styles.sectionTitle,\n            children: \"Compare Two States\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 851,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.inputGroup,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              style: styles.inputLabel,\n              children: \"State 1:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 853,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedState1,\n              onChange: e => setSelectedState1(e.target.value),\n              style: styles.selectDropdown,\n              disabled: stateList.length === 0,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select State\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 860,\n                columnNumber: 17\n              }, this), stateList.map(state => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: state,\n                children: state\n              }, state, false, {\n                fileName: _jsxFileName,\n                lineNumber: 862,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 854,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 852,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.inputGroup,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              style: styles.inputLabel,\n              children: \"State 2:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 869,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedState2,\n              onChange: e => setSelectedState2(e.target.value),\n              style: styles.selectDropdown,\n              disabled: stateList.length === 0,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select State\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 876,\n                columnNumber: 17\n              }, this), stateList.map(state => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: state,\n                children: state\n              }, state, false, {\n                fileName: _jsxFileName,\n                lineNumber: 878,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 870,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 868,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleStateSelection,\n            disabled: !selectedState1 || !selectedState2,\n            style: {\n              ...styles.chartButton,\n              backgroundColor: selectedState1 && selectedState2 ? '#28a745' : '#6c757d'\n            },\n            children: \"Compare\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 884,\n            columnNumber: 13\n          }, this), compareMarkersEnabled && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginTop: '10px'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: renderSelectedMarkers,\n              style: {\n                ...styles.chartButton,\n                backgroundColor: '#17a2b8',\n                width: '100%'\n              },\n              children: \"Mark Selected States on Map\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 899,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 898,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 850,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.section,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            style: styles.sectionTitle,\n            children: \"Select Chart Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 915,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.chartOptions,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setChartType('Bar'),\n              style: {\n                ...styles.chartButton,\n                ...(chartType === 'Bar' ? styles.chartButtonActive : {})\n              },\n              children: \"Bar Chart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 917,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setChartType('Pie'),\n              style: {\n                ...styles.chartButton,\n                ...(chartType === 'Pie' ? styles.chartButtonActive : {})\n              },\n              children: \"Pie Chart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 926,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setChartType('Doughnut'),\n              style: {\n                ...styles.chartButton,\n                ...(chartType === 'Doughnut' ? styles.chartButtonActive : {})\n              },\n              children: \"Doughnut Chart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 935,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setChartType('PolarArea'),\n              style: {\n                ...styles.chartButton,\n                ...(chartType === 'PolarArea' ? styles.chartButtonActive : {})\n              },\n              children: \"PolarArea Chart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 944,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 916,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 914,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 761,\n        columnNumber: 9\n      }, this), chartData && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.chartContainer,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.chartWrapper,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.chartContent,\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [chartType, \" Chart\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 962,\n              columnNumber: 17\n            }, this), chartType === 'Bar' && /*#__PURE__*/_jsxDEV(Bar, {\n              data: chartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 963,\n              columnNumber: 41\n            }, this), chartType === 'Pie' && /*#__PURE__*/_jsxDEV(Pie, {\n              data: chartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 964,\n              columnNumber: 41\n            }, this), chartType === 'Doughnut' && /*#__PURE__*/_jsxDEV(Doughnut, {\n              data: chartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 966,\n              columnNumber: 19\n            }, this), chartType === 'PolarArea' && /*#__PURE__*/_jsxDEV(PolarArea, {\n              data: chartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 969,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 961,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 960,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 959,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 759,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 754,\n    columnNumber: 5\n  }, this);\n};\n_s(MapView, \"sNiMFDc5iqoNp62lz4FZAbK9UJo=\");\n_c = MapView;\nexport default MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","mapboxgl","Papa","Bar","Pie","Doughnut","PolarArea","Chart","ChartJS","RadialLinearScale","CategoryScale","LinearScale","BarElement","ArcElement","Title","Tooltip","Legend","ChartDataLabels","CircularProgressbar","styles","preprocessData","MAPBOX_TOKEN","blueMarkerIcon","redMarkerIcon","jsxDEV","_jsxDEV","register","accessToken","MapView","_s","map","setMap","geoData","setGeoData","numericHeaders","setNumericHeaders","stringHeaders","setStringHeaders","selectedLocation","setSelectedLocation","chartType","setChartType","chartData","setChartData","totalRows","setTotalRows","totalColumns","setTotalColumns","markers","setMarkers","progress","setProgress","upload","preprocess","geocode","progressMessages","setProgressMessages","stateList","setStateList","selectedState1","setSelectedState1","selectedState2","setSelectedState2","locationColumn","setLocationColumn","markersAdded","setMarkersAdded","dataNeedsGeocoding","setDataNeedsGeocoding","compareMarkersEnabled","setCompareMarkersEnabled","stateCoordinates","setStateCoordinates","initializeMap","Map","container","style","center","zoom","nav","NavigationControl","addControl","remove","reverseGeocodeState","latitude","longitude","response","fetch","data","json","features","length","text","error","console","handlePreprocess","rawData","prev","cleanRawData","filter","item","undefined","Object","keys","dataContainsLatLng","some","possibleLocationColumns","detectedLocationColumn","find","col","key","toLowerCase","log","alert","processedData","stateDataMap","stateCoordsMap","numericFields","Set","parseFloat","isNaN","stateName","state","count","forEach","value","add","includes","coords","geocodeLocation","encodeURIComponent","aggregatedData","values","parsedValue","headers","numeric","strings","header","isNumeric","every","push","uniqueStates","locationName","handleFileUpload","event","file","target","files","fileExtension","name","split","pop","reader","FileReader","onload","e","JSON","parse","result","readAsText","skipEmptyLines","beforeFirstChunk","chunk","lines","trim","dataStartIndex","findIndex","line","startsWith","slice","join","complete","results","handleLocationSelect","locationData","handleStateSelection","data1","data2","aggregatedData1","aggregatedData2","dataMin","dataMax","Math","max","range","normalizedData1","normalizedData2","actualData1","actualData2","value1","value2","labels","dataSet","datasets","label","actualValues","backgroundColor","borderColor","borderWidth","generateChartData","locationValues","normalizedValues","normalizedValue","actualValue","renderMarkers","marker","newMarkers","el","document","createElement","className","isSelected","icon","backgroundImage","width","height","backgroundSize","cursor","Marker","setLngLat","addTo","getElement","addEventListener","renderSelectedMarkers","selectedStates","bounds","LngLatBounds","popup","Popup","offset","setText","setPopup","extend","isEmpty","fitBounds","padding","chartOptions","responsive","maintainAspectRatio","scales","y","beginAtZero","min","plugins","legend","position","datalabels","display","color","align","anchor","formatter","context","dataset","chart","datasetIndex","dataIndex","toFixed","tooltip","callbacks","parsed","children","id","fileName","_jsxFileName","lineNumber","columnNumber","sidebar","combinedBox","progressContainer","progressItem","round","root","fontSize","progressMessage","section","sectionTitle","type","accept","onChange","fileInput","onClick","chartButton","datasetDetails","inputGroup","inputLabel","selectDropdown","disabled","marginTop","chartButtonActive","chartContainer","chartWrapper","chartContent","options","_c","$RefreshReg$"],"sources":["/Users/girishkumarpatchikoru/Desktop/projecthci/geovizproject/frontend/src/components/MapView.js"],"sourcesContent":["// src/components/MapView.js\r\n\r\nimport React, { useEffect, useState, useCallback } from 'react';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport Papa from 'papaparse';\r\nimport { Bar, Pie, Doughnut, PolarArea } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  RadialLinearScale,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\nimport { CircularProgressbar } from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\n\r\nimport styles from './styles'; // Ensure this file exists and is properly configured\r\nimport preprocessData from './preprocessData'; // Ensure this file exists and is properly configured\r\nimport { MAPBOX_TOKEN } from './constants'; // Ensure this file contains your Mapbox token\r\nimport blueMarkerIcon from '../assets/images/custom-marker-blue.png'; // Ensure these assets exist\r\nimport redMarkerIcon from '../assets/images/custom-marker-red.png';\r\nimport './marker.css'; // Ensure this CSS file exists for marker styling\r\n\r\n// Register Chart.js components\r\nChartJS.register(\r\n  RadialLinearScale,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  ChartDataLabels\r\n);\r\n\r\n// Set Mapbox access token\r\nmapboxgl.accessToken = MAPBOX_TOKEN;\r\n\r\nconst MapView = () => {\r\n  // State Variables\r\n  const [map, setMap] = useState(null);\r\n  const [geoData, setGeoData] = useState([]);\r\n  const [numericHeaders, setNumericHeaders] = useState([]);\r\n  const [stringHeaders, setStringHeaders] = useState([]);\r\n  const [selectedLocation, setSelectedLocation] = useState(null);\r\n  const [chartType, setChartType] = useState('Bar');\r\n  const [chartData, setChartData] = useState(null);\r\n  const [totalRows, setTotalRows] = useState(0);\r\n  const [totalColumns, setTotalColumns] = useState(0);\r\n  const [markers, setMarkers] = useState([]);\r\n  const [progress, setProgress] = useState({\r\n    upload: 0,\r\n    preprocess: 0,\r\n    geocode: 0,\r\n  });\r\n  const [progressMessages, setProgressMessages] = useState({\r\n    upload: '',\r\n    preprocess: '',\r\n    geocode: '',\r\n  });\r\n  const [stateList, setStateList] = useState([]);\r\n  const [selectedState1, setSelectedState1] = useState('');\r\n  const [selectedState2, setSelectedState2] = useState('');\r\n  const [locationColumn, setLocationColumn] = useState('');\r\n  const [markersAdded, setMarkersAdded] = useState(false);\r\n  const [dataNeedsGeocoding, setDataNeedsGeocoding] = useState(true);\r\n  const [compareMarkersEnabled, setCompareMarkersEnabled] = useState(false);\r\n  const [stateCoordinates, setStateCoordinates] = useState({}); // To store state centroids for markers\r\n\r\n  // Initialize Map\r\n  useEffect(() => {\r\n    const initializeMap = new mapboxgl.Map({\r\n      container: 'map', // HTML container id\r\n      style: 'mapbox://styles/mapbox/streets-v11', // style URL\r\n      center: [-98.5795, 39.8283], // starting position [lng, lat] (center of USA)\r\n      zoom: 3, // starting zoom\r\n    });\r\n\r\n    // Add navigation control (the +/- zoom buttons)\r\n    const nav = new mapboxgl.NavigationControl();\r\n    initializeMap.addControl(nav, 'top-right');\r\n\r\n    setMap(initializeMap);\r\n\r\n    // Clean up on unmount\r\n    return () => initializeMap.remove();\r\n  }, []);\r\n\r\n  // Reverse Geocode Function to get State Name\r\n  const reverseGeocodeState = useCallback(async (latitude, longitude) => {\r\n    try {\r\n      const response = await fetch(\r\n        `https://api.mapbox.com/geocoding/v5/mapbox.places/${longitude},${latitude}.json?types=region&access_token=${MAPBOX_TOKEN}`\r\n      );\r\n      const data = await response.json();\r\n      if (data.features && data.features.length > 0) {\r\n        return data.features[0].text; // Returns the state name\r\n      } else {\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Reverse geocoding error:', error);\r\n      return null;\r\n    }\r\n  }, []);\r\n\r\n  // Preprocess Data Function\r\n  const handlePreprocess = useCallback(\r\n    async (rawData) => {\r\n      setProgress((prev) => ({ ...prev, preprocess: 0 }));\r\n\r\n      // Remove null, undefined, and inconsistent data rows\r\n      const cleanRawData = rawData.filter(\r\n        (item) => item !== null && item !== undefined && Object.keys(item).length > 0\r\n      );\r\n\r\n      // Determine if data contains latitude and longitude\r\n      const dataContainsLatLng = cleanRawData.some(\r\n        (item) => item.latitude && item.longitude\r\n      );\r\n\r\n      setDataNeedsGeocoding(!dataContainsLatLng);\r\n\r\n      // Determine the location column dynamically (case-insensitive)\r\n      const possibleLocationColumns = [\r\n        'State',\r\n        'state',\r\n        'Province',\r\n        'province',\r\n        'City',\r\n        'city',\r\n      ];\r\n      let detectedLocationColumn = possibleLocationColumns.find(\r\n        (col) => cleanRawData[0] && Object.keys(cleanRawData[0]).some(key => key.toLowerCase() === col.toLowerCase())\r\n      );\r\n\r\n      if (!detectedLocationColumn && dataContainsLatLng) {\r\n        detectedLocationColumn = null;\r\n      }\r\n\r\n      setLocationColumn(detectedLocationColumn || '');\r\n\r\n      console.log('Detected Location Column:', detectedLocationColumn);\r\n\r\n      if (!detectedLocationColumn && !dataContainsLatLng) {\r\n        alert('No valid location column found in the dataset.');\r\n        return;\r\n      }\r\n\r\n      // Preprocess data\r\n      const processedData = await preprocessData(\r\n        cleanRawData,\r\n        setProgress,\r\n        detectedLocationColumn\r\n      );\r\n\r\n      if (!processedData || processedData.length === 0) {\r\n        alert('No valid data after preprocessing.');\r\n        return;\r\n      }\r\n\r\n      setProgress((prev) => ({ ...prev, preprocess: 50 }));\r\n\r\n      // Initialize state data aggregation\r\n      const stateDataMap = {};\r\n      const stateCoordsMap = {}; // To store state coordinates\r\n      const numericFields = new Set();\r\n\r\n      if (dataContainsLatLng) {\r\n        // Data contains latitude and longitude, need to reverse geocode to get state names\r\n        for (const item of processedData) {\r\n          const latitude = parseFloat(item.latitude);\r\n          const longitude = parseFloat(item.longitude);\r\n          if (!isNaN(latitude) && !isNaN(longitude)) {\r\n            let stateName = await reverseGeocodeState(latitude, longitude);\r\n            if (!stateName) continue; // Skip if state name couldn't be retrieved\r\n\r\n            // Aggregate data per state\r\n            if (!stateDataMap[stateName]) {\r\n              stateDataMap[stateName] = { ...item };\r\n              stateDataMap[stateName].state = stateName;\r\n              stateDataMap[stateName].count = 1;\r\n              stateCoordsMap[stateName] = { latitude, longitude };\r\n            } else {\r\n              // Sum numeric fields\r\n              Object.keys(item).forEach((key) => {\r\n                const value = parseFloat(item[key]);\r\n                if (!isNaN(value)) {\r\n                  numericFields.add(key);\r\n                  stateDataMap[stateName][key] =\r\n                    (stateDataMap[stateName][key] || 0) + value;\r\n                }\r\n              });\r\n              stateDataMap[stateName].count += 1;\r\n            }\r\n          }\r\n        }\r\n      } else if (detectedLocationColumn) {\r\n        // Data contains state or city names\r\n        for (const item of processedData) {\r\n          let stateName = item[detectedLocationColumn];\r\n\r\n          if (detectedLocationColumn.toLowerCase().includes('city')) {\r\n            // If the location column is a city, we need to get the state name\r\n            const coords = await geocodeLocation(stateName);\r\n            if (coords.latitude && coords.longitude) {\r\n              stateName = await reverseGeocodeState(coords.latitude, coords.longitude);\r\n              if (!stateName) continue; // Skip if state name couldn't be retrieved\r\n            } else {\r\n              continue;\r\n            }\r\n          }\r\n\r\n          if (!stateName) continue;\r\n\r\n          // Aggregate data per state\r\n          if (!stateDataMap[stateName]) {\r\n            stateDataMap[stateName] = { ...item };\r\n            stateDataMap[stateName].state = stateName;\r\n            stateDataMap[stateName].count = 1;\r\n          } else {\r\n            // Sum numeric fields\r\n            Object.keys(item).forEach((key) => {\r\n              const value = parseFloat(item[key]);\r\n              if (!isNaN(value)) {\r\n                numericFields.add(key);\r\n                stateDataMap[stateName][key] =\r\n                  (stateDataMap[stateName][key] || 0) + value;\r\n              }\r\n            });\r\n            stateDataMap[stateName].count += 1;\r\n          }\r\n        }\r\n\r\n        // Geocode states to get their coordinates\r\n        for (const stateName of Object.keys(stateDataMap)) {\r\n          const response = await fetch(\r\n            `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(\r\n              stateName\r\n            )}.json?types=region&access_token=${MAPBOX_TOKEN}`\r\n          );\r\n          const data = await response.json();\r\n          if (data.features && data.features.length > 0) {\r\n            const [longitude, latitude] = data.features[0].center;\r\n            stateCoordsMap[stateName] = { latitude, longitude };\r\n          }\r\n        }\r\n      }\r\n\r\n      setProgress((prev) => ({ ...prev, preprocess: 80 }));\r\n\r\n      // Calculate averages for numeric fields\r\n      const aggregatedData = Object.values(stateDataMap).map((item) => {\r\n        const count = item.count || 1;\r\n        numericFields.forEach((key) => {\r\n          const parsedValue = parseFloat(item[key]);\r\n          if (!isNaN(parsedValue)) {\r\n            item[key] = parsedValue / count;\r\n          } else {\r\n            item[key] = 0; // Assign 0 if value is invalid\r\n          }\r\n        });\r\n        return item;\r\n      });\r\n\r\n      setGeoData(aggregatedData);\r\n      setStateCoordinates(stateCoordsMap);\r\n\r\n      // Identify numeric and string headers\r\n      if (aggregatedData.length > 0) {\r\n        const headers = Object.keys(aggregatedData[0]);\r\n        const numeric = [];\r\n        const strings = [];\r\n\r\n        headers.forEach((header) => {\r\n          if (\r\n            [\r\n              'latitude',\r\n              'longitude',\r\n              'GeoLocation',\r\n              'locationID',\r\n              'count',\r\n              'state',\r\n            ].includes(header)\r\n          )\r\n            return;\r\n\r\n          const isNumeric = aggregatedData.every((item) => {\r\n            const value = parseFloat(item[header]);\r\n            return !isNaN(value);\r\n          });\r\n          if (isNumeric) {\r\n            numeric.push(header);\r\n          } else {\r\n            strings.push(header);\r\n          }\r\n        });\r\n\r\n        setNumericHeaders(numeric);\r\n        setStringHeaders(strings);\r\n\r\n        setTotalRows(aggregatedData.length);\r\n        setTotalColumns(headers.length);\r\n\r\n        // Extract unique states for comparison\r\n        const uniqueStates = Object.keys(stateDataMap);\r\n        setStateList(uniqueStates);\r\n      } else {\r\n        alert('No data available after filtering.');\r\n      }\r\n\r\n      setProgress((prev) => ({ ...prev, preprocess: 100 }));\r\n\r\n      // Reset markersAdded state when new data is uploaded\r\n      setMarkersAdded(false);\r\n    },\r\n    [reverseGeocodeState]\r\n  );\r\n\r\n  // Geocode Function to get coordinates from location name\r\n  const geocodeLocation = async (locationName) => {\r\n    if (!locationName) return { latitude: null, longitude: null };\r\n    try {\r\n      const response = await fetch(\r\n        `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(\r\n          locationName\r\n        )}.json?access_token=${MAPBOX_TOKEN}`\r\n      );\r\n      const data = await response.json();\r\n      if (data.features && data.features.length > 0) {\r\n        const [longitude, latitude] = data.features[0].center;\r\n        return { latitude, longitude };\r\n      }\r\n      return { latitude: null, longitude: null };\r\n    } catch (error) {\r\n      console.error('Geocoding error:', error);\r\n      return { latitude: null, longitude: null };\r\n    }\r\n  };\r\n\r\n  // Handle File Upload\r\n  const handleFileUpload = (event) => {\r\n    setProgress({\r\n      upload: 0,\r\n      preprocess: 0,\r\n      geocode: 0,\r\n    });\r\n    setProgressMessages({\r\n      upload: '',\r\n      preprocess: '',\r\n      geocode: '',\r\n    });\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      const fileExtension = file.name.split('.').pop().toLowerCase();\r\n\r\n      if (fileExtension === 'json') {\r\n        const reader = new FileReader();\r\n        reader.onload = async (e) => {\r\n          try {\r\n            const data = JSON.parse(e.target.result);\r\n            setProgress((prev) => ({ ...prev, upload: 100 }));\r\n            setProgressMessages((prev) => ({\r\n              ...prev,\r\n              upload: 'Dataset uploaded successfully.',\r\n            }));\r\n            await handlePreprocess(data);\r\n          } catch (error) {\r\n            console.error('Invalid JSON format:', error);\r\n            alert('Error: Uploaded file is not valid JSON.');\r\n          }\r\n        };\r\n        reader.readAsText(file);\r\n      } else if (fileExtension === 'csv') {\r\n        Papa.parse(file, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          beforeFirstChunk: (chunk) => {\r\n            // Handle datasets with metadata rows\r\n            const lines = chunk.trim().split('\\n');\r\n            const dataStartIndex = lines.findIndex(\r\n              (line) =>\r\n                line.toLowerCase().startsWith('country name') ||\r\n                line.toLowerCase().startsWith('state') ||\r\n                line.toLowerCase().startsWith('rowid')\r\n            );\r\n            if (dataStartIndex > 0) {\r\n              return lines.slice(dataStartIndex).join('\\n');\r\n            }\r\n            return chunk;\r\n          },\r\n          complete: async (results) => {\r\n            setProgress((prev) => ({ ...prev, upload: 100 }));\r\n            setProgressMessages((prev) => ({\r\n              ...prev,\r\n              upload: 'Dataset uploaded successfully.',\r\n            }));\r\n            await handlePreprocess(results.data);\r\n          },\r\n          error: (error) => {\r\n            console.error('CSV parsing error:', error);\r\n            alert('Error: Failed to parse CSV file.');\r\n          },\r\n        });\r\n      } else {\r\n        alert('Please upload a valid JSON or CSV file.');\r\n      }\r\n    }\r\n  };\r\n\r\n  // Monitor Progress Updates\r\n  useEffect(() => {\r\n    if (progress.preprocess === 100) {\r\n      setProgressMessages((prev) => ({\r\n        ...prev,\r\n        preprocess: 'Preprocessing completed.',\r\n      }));\r\n    }\r\n  }, [progress.preprocess]);\r\n\r\n  useEffect(() => {\r\n    if (progress.geocode === 100) {\r\n      setProgressMessages((prev) => ({\r\n        ...prev,\r\n        geocode: 'Locations marked on the map.',\r\n      }));\r\n    }\r\n  }, [progress.geocode]);\r\n\r\n  // Handle Location Selection from Map\r\n  const handleLocationSelect = useCallback(\r\n    (locationData) => {\r\n      console.log('Marker clicked:', locationData); // Debugging statement\r\n      // Clear state selections if a map marker is selected\r\n      setSelectedState1('');\r\n      setSelectedState2('');\r\n      setCompareMarkersEnabled(false);\r\n      if (selectedLocation && selectedLocation.state === locationData.state) {\r\n        setSelectedLocation(null); // Deselect\r\n        setChartData(null);\r\n      } else {\r\n        setSelectedLocation(locationData);\r\n        setChartData(null);\r\n      }\r\n    },\r\n    [selectedLocation]\r\n  );\r\n\r\n  // Handle State Comparison Selection\r\n  const handleStateSelection = () => {\r\n    if (selectedState1 && selectedState2) {\r\n      const data1 = geoData.filter((item) => item.state === selectedState1);\r\n      const data2 = geoData.filter((item) => item.state === selectedState2);\r\n\r\n      if (data1.length === 0 || data2.length === 0) {\r\n        alert('One or both selected states have no data.');\r\n        return;\r\n      }\r\n\r\n      const aggregatedData1 = data1[0];\r\n      const aggregatedData2 = data2[0];\r\n\r\n      // Normalize data for chart display (0.5% to 10%)\r\n      const dataMin = 0; // Minimum data value\r\n      const dataMax = Math.max(\r\n        ...numericHeaders.map((header) =>\r\n          Math.max(aggregatedData1[header], aggregatedData2[header])\r\n        )\r\n      );\r\n      const range = dataMax - dataMin || 1; // Avoid division by zero\r\n\r\n      const normalizedData1 = {};\r\n      const normalizedData2 = {};\r\n      const actualData1 = {};\r\n      const actualData2 = {};\r\n\r\n      numericHeaders.forEach((header) => {\r\n        const value1 = parseFloat(aggregatedData1[header]);\r\n        const value2 = parseFloat(aggregatedData2[header]);\r\n\r\n        actualData1[header] = !isNaN(value1) ? value1 : 0;\r\n        actualData2[header] = !isNaN(value2) ? value2 : 0;\r\n\r\n        normalizedData1[header] =\r\n          ((actualData1[header] - dataMin) / range) * 9.5 + 0.5;\r\n        normalizedData2[header] =\r\n          ((actualData2[header] - dataMin) / range) * 9.5 + 0.5;\r\n      });\r\n\r\n      // Prepare chart data\r\n      const labels = numericHeaders;\r\n      const dataSet = {\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: selectedState1,\r\n            data: numericHeaders.map((header) => normalizedData1[header]),\r\n            actualValues: numericHeaders.map((header) => actualData1[header]),\r\n            backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n            borderColor: 'rgba(255, 99, 132, 1)',\r\n            borderWidth: 1,\r\n          },\r\n          {\r\n            label: selectedState2,\r\n            data: numericHeaders.map((header) => normalizedData2[header]),\r\n            actualValues: numericHeaders.map((header) => actualData2[header]),\r\n            backgroundColor: 'rgba(54, 162, 235, 0.5)',\r\n            borderColor: 'rgba(54, 162, 235, 1)',\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      };\r\n\r\n      setChartData(dataSet);\r\n      setSelectedLocation(null); // Deselect any single location\r\n\r\n      // Enable the \"Mark on Map\" button\r\n      setCompareMarkersEnabled(true);\r\n    }\r\n  };\r\n\r\n  // Generate Chart Data for Selected Location\r\n  const generateChartData = useCallback(() => {\r\n    if (selectedLocation) {\r\n      const locationValues = numericHeaders.map((header) => ({\r\n        label: header,\r\n        value: parseFloat(selectedLocation[header]) || 0,\r\n      }));\r\n\r\n      // Normalize data for chart display (0.5% to 10%)\r\n      const dataMin = 0; // Minimum data value\r\n      const dataMax = Math.max(...locationValues.map((item) => item.value));\r\n      const range = dataMax - dataMin || 1; // Avoid division by zero\r\n\r\n      const normalizedValues = locationValues.map((item) => ({\r\n        label: item.label,\r\n        normalizedValue: ((item.value - dataMin) / range) * 9.5 + 0.5,\r\n        actualValue: item.value, // Keep the actual value\r\n      }));\r\n\r\n      setChartData({\r\n        labels: normalizedValues.map((item) => item.label),\r\n        datasets: [\r\n          {\r\n            label: selectedLocation.state,\r\n            data: normalizedValues.map((item) => item.normalizedValue),\r\n            actualValues: normalizedValues.map((item) => item.actualValue), // Store actual values\r\n            backgroundColor: [\r\n              'rgba(255, 99, 132, 0.5)',\r\n              'rgba(54, 162, 235, 0.5)',\r\n              'rgba(255, 206, 86, 0.5)',\r\n              'rgba(75, 192, 192, 0.5)',\r\n              'rgba(153, 102, 255, 0.5)',\r\n              'rgba(255, 159, 64, 0.5)',\r\n            ],\r\n            borderColor: [\r\n              'rgba(255, 99, 132, 1)',\r\n              'rgba(54, 162, 235, 1)',\r\n              'rgba(255, 206, 86, 1)',\r\n              'rgba(75, 192, 192, 1)',\r\n              'rgba(153, 102, 255, 1)',\r\n              'rgba(255, 159, 64, 1)',\r\n            ],\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      });\r\n    }\r\n  }, [selectedLocation, numericHeaders]);\r\n\r\n  // Data Generation\r\n  useEffect(() => {\r\n    generateChartData();\r\n  }, [generateChartData, chartType, selectedLocation]);\r\n\r\n  // Markers on Map\r\n  const renderMarkers = useCallback(() => {\r\n    if (map && geoData.length > 0) {\r\n      // Remove existing markers\r\n      markers.forEach((marker) => marker.remove());\r\n      const newMarkers = [];\r\n\r\n      geoData.forEach((data) => {\r\n        const stateName = data.state;\r\n        const coords = stateCoordinates[stateName];\r\n        if (!coords) return;\r\n\r\n        const latitude = parseFloat(coords.latitude);\r\n        const longitude = parseFloat(coords.longitude);\r\n\r\n        if (!isNaN(latitude) && !isNaN(longitude)) {\r\n          const el = document.createElement('div');\r\n          el.className = 'marker';\r\n          const isSelected = selectedLocation\r\n            ? selectedLocation.state === data.state\r\n            : false;\r\n          const icon = isSelected ? redMarkerIcon : blueMarkerIcon;\r\n          el.style.backgroundImage = `url(${icon})`;\r\n          el.style.width = '30px';\r\n          el.style.height = '30px';\r\n          el.style.backgroundSize = 'contain';\r\n          el.style.cursor = 'pointer';\r\n\r\n          const marker = new mapboxgl.Marker(el)\r\n            .setLngLat([longitude, latitude])\r\n            .addTo(map);\r\n\r\n          marker.getElement().addEventListener('click', () => {\r\n            handleLocationSelect(data);\r\n          });\r\n\r\n          newMarkers.push(marker);\r\n        }\r\n      });\r\n      setMarkers(newMarkers);\r\n      setMarkersAdded(true);\r\n\r\n      setProgress((prev) => ({ ...prev, geocode: 100 }));\r\n      setProgressMessages((prev) => ({\r\n        ...prev,\r\n        geocode: 'Locations marked on the map.',\r\n      }));\r\n    } else {\r\n      alert('Data has not been aggregated by states. Cannot mark locations on map.');\r\n    }\r\n  }, [map, geoData, selectedLocation, handleLocationSelect, stateCoordinates, markers]);\r\n\r\n  // Render Selected Markers\r\n  const renderSelectedMarkers = useCallback(async () => {\r\n    if (map && selectedState1 && selectedState2) {\r\n      // Remove existing markers\r\n      markers.forEach((marker) => marker.remove());\r\n      const newMarkers = [];\r\n\r\n      const selectedStates = [selectedState1, selectedState2];\r\n\r\n      const bounds = new mapboxgl.LngLatBounds();\r\n\r\n      for (const stateName of selectedStates) {\r\n        const data = geoData.find((item) => item.state === stateName);\r\n        if (!data) continue;\r\n        const coords = stateCoordinates[stateName];\r\n        if (!coords) continue;\r\n\r\n        const latitude = parseFloat(coords.latitude);\r\n        const longitude = parseFloat(coords.longitude);\r\n\r\n        if (!isNaN(latitude) && !isNaN(longitude)) {\r\n          const el = document.createElement('div');\r\n          el.className = 'marker';\r\n          el.style.backgroundImage = `url(${blueMarkerIcon})`;\r\n          el.style.width = '30px';\r\n          el.style.height = '30px';\r\n          el.style.backgroundSize = 'contain';\r\n          el.style.cursor = 'pointer';\r\n\r\n          const marker = new mapboxgl.Marker(el)\r\n            .setLngLat([longitude, latitude])\r\n            .addTo(map);\r\n\r\n          // Add a popup or label with the state name\r\n          const popup = new mapboxgl.Popup({ offset: 25 }).setText(stateName);\r\n          marker.setPopup(popup);\r\n\r\n          bounds.extend([longitude, latitude]);\r\n\r\n          newMarkers.push(marker);\r\n        }\r\n      }\r\n\r\n      setMarkers(newMarkers);\r\n      setMarkersAdded(true);\r\n\r\n      // Adjust the map to fit the markers\r\n      if (!bounds.isEmpty()) {\r\n        map.fitBounds(bounds, { padding: 50 });\r\n      }\r\n    }\r\n  }, [map, selectedState1, selectedState2, geoData, markers, stateCoordinates]);\r\n\r\n  // Re-render markers when selectedLocation changes to update marker colors\r\n  useEffect(() => {\r\n    if (markersAdded) {\r\n      renderMarkers();\r\n    }\r\n  }, [selectedLocation, renderMarkers, markersAdded]);\r\n\r\n  // Chart Options\r\n  const chartOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    scales:\r\n      chartType === 'Bar'\r\n        ? {\r\n            y: {\r\n              beginAtZero: true,\r\n              min: 0.5,\r\n              max: 10,\r\n            },\r\n          }\r\n        : {},\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n      },\r\n      datalabels: {\r\n        display: true,\r\n        color: '#000',\r\n        align: 'center', // Align labels to the center of the bars\r\n        anchor: 'center',\r\n        formatter: function (value, context) {\r\n          const dataset = context.chart.data.datasets[context.datasetIndex];\r\n          if (dataset.actualValues) {\r\n            const actualValue = dataset.actualValues[context.dataIndex];\r\n            if (typeof actualValue === 'number' && !isNaN(actualValue)) {\r\n              return actualValue.toFixed(2); // Display actual value\r\n            } else {\r\n              return '';\r\n            }\r\n          } else {\r\n            if (typeof value === 'number' && !isNaN(value)) {\r\n              return value.toFixed(2);\r\n            } else {\r\n              return '';\r\n            }\r\n          }\r\n        },\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function (context) {\r\n            const dataset = context.dataset;\r\n            const actualValue = dataset.actualValues\r\n              ? dataset.actualValues[context.dataIndex]\r\n              : context.parsed.y;\r\n            if (typeof actualValue === 'number' && !isNaN(actualValue)) {\r\n              return `${context.label}: ${actualValue.toFixed(2)}`;\r\n            } else {\r\n              return `${context.label}: ${actualValue || ''}`;\r\n            }\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      {/* Map Container */}\r\n      <div id=\"map\" style={styles.map}></div>\r\n\r\n      {/* Sidebar */}\r\n      <div style={styles.sidebar}>\r\n        {/* Combined Controls Box */}\r\n        <div style={styles.combinedBox}>\r\n          {/* Progress Indicators */}\r\n          <div style={styles.progressContainer}>\r\n            <div style={styles.progressItem}>\r\n              <CircularProgressbar\r\n                value={progress.upload}\r\n                text={`${Math.round(progress.upload)}%`}\r\n                styles={{\r\n                  root: { width: '80px' },\r\n                  text: { fontSize: '10px' },\r\n                }}\r\n              />\r\n              <div style={styles.progressMessage}>{progressMessages.upload}</div>\r\n            </div>\r\n            <div style={styles.progressItem}>\r\n              <CircularProgressbar\r\n                value={progress.preprocess}\r\n                text={`${Math.round(progress.preprocess)}%`}\r\n                styles={{\r\n                  root: { width: '80px' },\r\n                  text: { fontSize: '10px' },\r\n                }}\r\n              />\r\n              <div style={styles.progressMessage}>{progressMessages.preprocess}</div>\r\n            </div>\r\n            <div style={styles.progressItem}>\r\n              <CircularProgressbar\r\n                value={progress.geocode}\r\n                text={`${Math.round(progress.geocode)}%`}\r\n                styles={{\r\n                  root: { width: '80px' },\r\n                  text: { fontSize: '10px' },\r\n                }}\r\n              />\r\n              <div style={styles.progressMessage}>{progressMessages.geocode}</div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Upload Data Section */}\r\n          <div style={styles.section}>\r\n            <h3 style={styles.sectionTitle}>Upload Data</h3>\r\n            <input\r\n              type=\"file\"\r\n              accept=\".json, .csv\"\r\n              onChange={handleFileUpload}\r\n              style={styles.fileInput}\r\n            />\r\n          </div>\r\n\r\n          {/* Mark Locations Button */}\r\n          {geoData.length > 0 && !markersAdded && (\r\n            <div style={styles.section}>\r\n              <button\r\n                onClick={renderMarkers}\r\n                style={{\r\n                  ...styles.chartButton,\r\n                  backgroundColor: '#17a2b8',\r\n                  width: '100%',\r\n                }}\r\n              >\r\n                Mark Locations on Map\r\n              </button>\r\n            </div>\r\n          )}\r\n\r\n          {/* Dataset Details Section */}\r\n          <div style={styles.section}>\r\n            <h3 style={styles.sectionTitle}>Dataset Details</h3>\r\n            {geoData.length > 0 ? (\r\n              <div style={styles.datasetDetails}>\r\n                <p>\r\n                  <strong>Rows:</strong> {totalRows}\r\n                </p>\r\n                <p>\r\n                  <strong>Columns:</strong> {totalColumns}\r\n                </p>\r\n                <p>\r\n                  <strong>Numeric Columns:</strong> {numericHeaders.join(', ')}\r\n                </p>\r\n                <p>\r\n                  <strong>String Columns:</strong> {stringHeaders.join(', ')}\r\n                </p>\r\n              </div>\r\n            ) : (\r\n              <p>No dataset uploaded yet.</p>\r\n            )}\r\n          </div>\r\n\r\n          {/* Location Comparison Section */}\r\n          <div style={styles.section}>\r\n            <h3 style={styles.sectionTitle}>Compare Two States</h3>\r\n            <div style={styles.inputGroup}>\r\n              <label style={styles.inputLabel}>State 1:</label>\r\n              <select\r\n                value={selectedState1}\r\n                onChange={(e) => setSelectedState1(e.target.value)}\r\n                style={styles.selectDropdown}\r\n                disabled={stateList.length === 0}\r\n              >\r\n                <option value=\"\">Select State</option>\r\n                {stateList.map((state) => (\r\n                  <option key={state} value={state}>\r\n                    {state}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div style={styles.inputGroup}>\r\n              <label style={styles.inputLabel}>State 2:</label>\r\n              <select\r\n                value={selectedState2}\r\n                onChange={(e) => setSelectedState2(e.target.value)}\r\n                style={styles.selectDropdown}\r\n                disabled={stateList.length === 0}\r\n              >\r\n                <option value=\"\">Select State</option>\r\n                {stateList.map((state) => (\r\n                  <option key={state} value={state}>\r\n                    {state}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <button\r\n              onClick={handleStateSelection}\r\n              disabled={!selectedState1 || !selectedState2}\r\n              style={{\r\n                ...styles.chartButton,\r\n                backgroundColor:\r\n                  selectedState1 && selectedState2 ? '#28a745' : '#6c757d',\r\n              }}\r\n            >\r\n              Compare\r\n            </button>\r\n\r\n            {/* New Mark on Map Button */}\r\n            {compareMarkersEnabled && (\r\n              <div style={{ marginTop: '10px' }}>\r\n                <button\r\n                  onClick={renderSelectedMarkers}\r\n                  style={{\r\n                    ...styles.chartButton,\r\n                    backgroundColor: '#17a2b8',\r\n                    width: '100%',\r\n                  }}\r\n                >\r\n                  Mark Selected States on Map\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Chart Type Selection Section */}\r\n          <div style={styles.section}>\r\n            <h3 style={styles.sectionTitle}>Select Chart Type</h3>\r\n            <div style={styles.chartOptions}>\r\n              <button\r\n                onClick={() => setChartType('Bar')}\r\n                style={{\r\n                  ...styles.chartButton,\r\n                  ...(chartType === 'Bar' ? styles.chartButtonActive : {}),\r\n                }}\r\n              >\r\n                Bar Chart\r\n              </button>\r\n              <button\r\n                onClick={() => setChartType('Pie')}\r\n                style={{\r\n                  ...styles.chartButton,\r\n                  ...(chartType === 'Pie' ? styles.chartButtonActive : {}),\r\n                }}\r\n              >\r\n                Pie Chart\r\n              </button>\r\n              <button\r\n                onClick={() => setChartType('Doughnut')}\r\n                style={{\r\n                  ...styles.chartButton,\r\n                  ...(chartType === 'Doughnut' ? styles.chartButtonActive : {}),\r\n                }}\r\n              >\r\n                Doughnut Chart\r\n              </button>\r\n              <button\r\n                onClick={() => setChartType('PolarArea')}\r\n                style={{\r\n                  ...styles.chartButton,\r\n                  ...(chartType === 'PolarArea' ? styles.chartButtonActive : {}),\r\n                }}\r\n              >\r\n                PolarArea Chart\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Chart Display Section */}\r\n        {chartData && (\r\n          <div style={styles.chartContainer}>\r\n            <div style={styles.chartWrapper}>\r\n              <div style={styles.chartContent}>\r\n                <h3>{chartType} Chart</h3>\r\n                {chartType === 'Bar' && <Bar data={chartData} options={chartOptions} />}\r\n                {chartType === 'Pie' && <Pie data={chartData} options={chartOptions} />}\r\n                {chartType === 'Doughnut' && (\r\n                  <Doughnut data={chartData} options={chartOptions} />\r\n                )}\r\n                {chartType === 'PolarArea' && (\r\n                  <PolarArea data={chartData} options={chartOptions} />\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}