{"ast":null,"code":"import React,{useEffect,useState,useCallback,useRef}from'react';import mapboxgl from'mapbox-gl';import Papa from'papaparse';import'mapbox-gl/dist/mapbox-gl.css';import{Bar,Pie,Doughnut,PolarArea}from'react-chartjs-2';import{Chart as ChartJS,RadialLinearScale,CategoryScale,LinearScale,BarElement,ArcElement,Title,Tooltip,Legend}from'chart.js';import ChartDataLabels from'chartjs-plugin-datalabels';import'react-circular-progressbar/dist/styles.css';import styles from'./styles';import preprocessData from'./preprocessData';import{MAPBOX_TOKEN}from'./constants';import blueMarkerIcon from'../assets/images/custom-marker-blue.png';import redMarkerIcon from'../assets/images/custom-marker-red.png';import yellowMarkerIcon from'../assets/images/custom-marker-yellow.png';//comparison markers\nimport'./marker.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";ChartJS.register(RadialLinearScale,CategoryScale,LinearScale,BarElement,ArcElement,Title,Tooltip,Legend,ChartDataLabels);// Set Mapbox access token\nmapboxgl.accessToken=MAPBOX_TOKEN;// Loading Bar \nconst LoadingBar=_ref=>{let{progress}=_ref;return/*#__PURE__*/_jsx(\"div\",{style:{width:'100%',backgroundColor:'#ddd',height:'10px',borderRadius:'5px'},children:/*#__PURE__*/_jsx(\"div\",{style:{width:`${progress}%`,height:'100%',backgroundColor:'#28a745',borderRadius:'5px',transition:'width 0.3s ease'}})});};const MapView=()=>{const[map,setMap]=useState(null);const[geoData,setGeoData]=useState([]);const[numericHeaders,setNumericHeaders]=useState([]);const[stringHeaders,setStringHeaders]=useState([]);const[selectedLocation,setSelectedLocation]=useState(null);const[chartType,setChartType]=useState('Bar');const[chartData,setChartData]=useState(null);const[totalRows,setTotalRows]=useState(0);const[totalColumns,setTotalColumns]=useState(0);const[markers,setMarkers]=useState([]);const[progress,setProgress]=useState({upload:0,preprocess:0,geocode:0});const[progressMessages,setProgressMessages]=useState({upload:'',preprocess:'',geocode:''});const[stateList,setStateList]=useState([]);const[selectedState1,setSelectedState1]=useState('');const[selectedState2,setSelectedState2]=useState('');const[locationColumn,setLocationColumn]=useState('');const[markersAdded,setMarkersAdded]=useState(false);const[dataNeedsGeocoding,setDataNeedsGeocoding]=useState(false);const[compareMarkersEnabled,setCompareMarkersEnabled]=useState(false);const[stateCoordinates,setStateCoordinates]=useState({});const[globalMinMax,setGlobalMinMax]=useState({});// Ref for map container\nconst mapContainerRef=useRef(null);useEffect(()=>{const initializeMap=new mapboxgl.Map({container:mapContainerRef.current,style:'mapbox://styles/mapbox/streets-v11',center:[-98.5795,39.8283],// Centered on USA\nzoom:3});const nav=new mapboxgl.NavigationControl();initializeMap.addControl(nav,'top-right');setMap(initializeMap);// Clean up on unmount\nreturn()=>initializeMap.remove();},[]);// Reverse Geocode Function to get State Name\nconst reverseGeocodeState=useCallback(async(latitude,longitude)=>{try{const response=await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${longitude},${latitude}.json?types=region&access_token=${MAPBOX_TOKEN}`);const data=await response.json();if(data.features&&data.features.length>0){return data.features[0].text.trim().toUpperCase();}else{return null;}}catch(error){console.error('Reverse geocoding error:',error);return null;}},[]);// Geocode Function to get coordinates from location name\nconst geocodeLocation=useCallback(async locationName=>{if(!locationName)return{latitude:null,longitude:null};try{const response=await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(locationName)}.json?access_token=${MAPBOX_TOKEN}&limit=1`);const data=await response.json();if(data.features&&data.features.length>0){const[longitude,latitude]=data.features[0].center;return{latitude,longitude};}return{latitude:null,longitude:null};}catch(error){console.error('Geocoding error:',error);return{latitude:null,longitude:null};}},[]);const generateChartData=useCallback(locationData=>{if(locationData){const locationValues=numericHeaders.map(header=>({label:header,value:parseFloat(locationData[header])||0}));const normalizedValues=locationValues.map(item=>{const{min,max}=globalMinMax[item.label]||{min:0,max:1};const normalizedValue=max!==min?(item.value-min)/(max-min)*9.5+0.5:5;return{label:item.label,normalizedValue:isFinite(normalizedValue)?normalizedValue:0.5,actualValue:item.value};});setChartData({labels:normalizedValues.map(item=>item.label),datasets:[{label:locationData.state,data:normalizedValues.map(item=>item.normalizedValue),actualValues:normalizedValues.map(item=>item.actualValue),backgroundColor:['rgba(255, 99, 132, 0.5)','rgba(54, 162, 235, 0.5)','rgba(255, 206, 86, 0.5)','rgba(75, 192, 192, 0.5)','rgba(153, 102, 255, 0.5)','rgba(255, 159, 64, 0.5)','rgba(255, 99, 132, 0.5)','rgba(54, 162, 235, 0.5)','rgba(255, 206, 86, 0.5)'],borderColor:['rgba(255, 99, 132, 1)','rgba(54, 162, 235, 1)','rgba(255, 206, 86, 1)','rgba(75, 192, 192, 1)','rgba(153, 102, 255, 1)','rgba(255, 159, 64, 1)','rgba(255, 99, 132, 1)','rgba(54, 162, 235, 1)','rgba(255, 206, 86, 1)'],borderWidth:1}]});}},[numericHeaders,globalMinMax]);// Handle Location Selection from Map\nconst handleLocationSelect=useCallback(locationData=>{console.log('Marker clicked:',locationData);setSelectedState1('');setSelectedState2('');setCompareMarkersEnabled(false);//clicked state is already selected, deselect it\nif(selectedLocation&&selectedLocation.state===locationData.state){setSelectedLocation(null);setChartData(null);}else{setSelectedLocation(locationData);generateChartData(locationData);}},[selectedLocation,generateChartData]);// Data Generation\nuseEffect(()=>{if(selectedLocation){generateChartData(selectedLocation);}else{setChartData(null);}},[selectedLocation]);// Preprocess Data Function\nconst handlePreprocess=useCallback(async rawData=>{setProgress(prev=>({...prev,preprocess:0}));// Remove null, undefined, and inconsistent data rows\nconst cleanRawData=rawData.filter(item=>item!==null&&item!==undefined&&Object.keys(item).length>0);const dataContainsLatLng=cleanRawData.some(item=>item.latitude&&item.longitude);setDataNeedsGeocoding(!dataContainsLatLng);const possibleLocationColumns=['state','province','city'];let detectedLocationColumn=possibleLocationColumns.find(col=>cleanRawData[0]&&Object.keys(cleanRawData[0]).some(key=>key.toLowerCase()===col.toLowerCase()));setLocationColumn(detectedLocationColumn||'');console.log('Detected Location Column:',detectedLocationColumn);if(!detectedLocationColumn&&!dataContainsLatLng){alert('No valid location column found in the dataset.');return;}// Preprocess data\nconst processedData=await preprocessData(cleanRawData,setProgress);console.log('Number of Data Points After Preprocessing:',processedData.length);if(!processedData||processedData.length===0){alert('No data available after filtering.');return;}setProgress(prev=>({...prev,preprocess:50}));const stateDataMap={};const stateCoordsMap={};const numericFields=new Set();if(detectedLocationColumn||dataContainsLatLng){for(const item of processedData){let stateName='';if(detectedLocationColumn){stateName=item[detectedLocationColumn];if(detectedLocationColumn.toLowerCase().includes('city')){// If the location column is a city, we need to get the state name\nconst coords=await geocodeLocation(stateName);if(coords.latitude&&coords.longitude){stateName=await reverseGeocodeState(coords.latitude,coords.longitude);if(!stateName)continue;}else{continue;}}else{stateName=stateName.trim().toUpperCase();}}else if(dataContainsLatLng){const latitude=parseFloat(item.latitude);const longitude=parseFloat(item.longitude);if(!isNaN(latitude)&&!isNaN(longitude)){stateName=await reverseGeocodeState(latitude,longitude);if(stateName){stateName=stateName.trim().toUpperCase();}else{continue;}}else{continue;}}if(!stateName)continue;// Aggregate data per state\nif(!stateDataMap[stateName]){stateDataMap[stateName]={...item};stateDataMap[stateName].state=stateName;stateDataMap[stateName].count=1;// Store coordinates for the first occurrence\nconst latitude=parseFloat(item.latitude);const longitude=parseFloat(item.longitude);if(!isNaN(latitude)&&!isNaN(longitude)){stateCoordsMap[stateName]={latitude,longitude};}}else{// Sum numeric fields\nObject.keys(item).forEach(key=>{if(key.toLowerCase()==='state')return;const value=parseFloat(item[key]);if(!isNaN(value)){numericFields.add(key);stateDataMap[stateName][key]=(stateDataMap[stateName][key]||0)+value;}});stateDataMap[stateName].count+=1;}}}setProgress(prev=>({...prev,preprocess:80}));const aggregatedData=Object.values(stateDataMap).map(item=>{const count=item.count||1;numericFields.forEach(key=>{const parsedValue=parseFloat(item[key]);if(!isNaN(parsedValue)){item[key]=parsedValue/count;}else{item[key]=0;}});return item;});setGeoData(aggregatedData);setStateCoordinates(stateCoordsMap);// checking  numeric and string headers\nif(aggregatedData.length>0){const headers=Object.keys(aggregatedData[0]);const numeric=[];const strings=[];headers.forEach(header=>{if(['latitude','longitude','GeoLocation','locationID','count','state'].includes(header))return;const isNumeric=aggregatedData.every(item=>{const value=parseFloat(item[header]);return!isNaN(value);});if(isNumeric){numeric.push(header);}else{strings.push(header);}});const globalMinMaxCalc={};numeric.forEach(header=>{const values=aggregatedData.map(item=>parseFloat(item[header]));globalMinMaxCalc[header]={min:Math.min(...values),max:Math.max(...values)};});setGlobalMinMax(globalMinMaxCalc);setNumericHeaders(numeric);setStringHeaders(strings);setTotalRows(aggregatedData.length);setTotalColumns(headers.length);const uniqueStates=Object.keys(stateDataMap);setStateList(uniqueStates);}else{alert('No data available after filtering.');}setProgress(prev=>({...prev,preprocess:100}));// Reset markersAdded state when new data is uploaded\nsetMarkersAdded(false);},[reverseGeocodeState,geocodeLocation,preprocessData]);const handleFileUpload=event=>{setProgress({upload:0,preprocess:0,geocode:0});setProgressMessages({upload:'',preprocess:'',geocode:''});const file=event.target.files[0];if(file){const fileExtension=file.name.split('.').pop().toLowerCase();if(fileExtension==='json'){const reader=new FileReader();reader.onload=async e=>{try{const data=JSON.parse(e.target.result);setProgress(prev=>({...prev,upload:100}));setProgressMessages(prev=>({...prev,upload:'Dataset uploaded successfully.'}));await handlePreprocess(data);}catch(error){console.error('Invalid JSON format:',error);alert('Error: Uploaded file is not valid JSON.');}};reader.readAsText(file);}else if(fileExtension==='csv'){Papa.parse(file,{header:true,skipEmptyLines:true,beforeFirstChunk:chunk=>{//datasets with metadata rows\nconst lines=chunk.trim().split('\\n');const dataStartIndex=lines.findIndex(line=>line.toLowerCase().startsWith('country name')||line.toLowerCase().startsWith('state')||line.toLowerCase().startsWith('rowid')||line.toLowerCase().startsWith('longitude')||line.toLowerCase().startsWith('latitude'));if(dataStartIndex>0){return lines.slice(dataStartIndex).join('\\n');}return chunk;},complete:async results=>{setProgress(prev=>({...prev,upload:100}));setProgressMessages(prev=>({...prev,upload:'Dataset uploaded successfully.'}));await handlePreprocess(results.data);},error:error=>{console.error('CSV parsing error:',error);alert('Error: Failed to parse CSV file.');}});}else{alert('Please upload a valid JSON or CSV file.');}}};//Progress indicators\nuseEffect(()=>{if(progress.preprocess===100){setProgressMessages(prev=>({...prev,preprocess:'Preprocessing completed.'}));}},[progress.preprocess]);useEffect(()=>{if(progress.geocode===100){setProgressMessages(prev=>({...prev,geocode:'Locations marked on the map.'}));}},[progress.geocode]);// Markerson Map\nconst renderMarkers=useCallback(()=>{if(map&&geoData.length>0){if(stateList.length===0){alert('Data is not aggregated by state. Cannot mark locations on the map.');return;}//Removed existing markers\nmarkers.forEach(marker=>marker.remove());const newMarkers=[];geoData.forEach(data=>{const stateName=data.state;const coords=stateCoordinates[stateName];if(!coords)return;const latitude=parseFloat(coords.latitude);const longitude=parseFloat(coords.longitude);if(!isNaN(latitude)&&!isNaN(longitude)){const el=document.createElement('div');el.className='marker';const isSelected=selectedLocation?selectedLocation.state===data.state:false;const isCompared=compareMarkersEnabled?[selectedState1,selectedState2].includes(stateName):false;const icon=isSelected?redMarkerIcon:isCompared?yellowMarkerIcon:blueMarkerIcon;el.style.backgroundImage=`url(${icon})`;el.style.width='30px';el.style.height='30px';el.style.backgroundSize='contain';el.style.cursor='pointer';const marker=new mapboxgl.Marker(el).setLngLat([longitude,latitude]).addTo(map);const popup=new mapboxgl.Popup({offset:25}).setText(stateName);marker.setPopup(popup);marker.getElement().addEventListener('click',()=>{handleLocationSelect(data);});newMarkers.push(marker);}});setMarkers(newMarkers);setMarkersAdded(true);setProgress(prev=>({...prev,geocode:100}));setProgressMessages(prev=>({...prev,geocode:'Locations marked on the map.'}));}},[map,geoData,selectedLocation,stateCoordinates,markers,stateList,compareMarkersEnabled,selectedState1,selectedState2,handleLocationSelect]);// Re-render markers  selectedLocation or comparison changes\nuseEffect(()=>{if(markersAdded){renderMarkers();}},[selectedLocation,compareMarkersEnabled]);//Comparison Selected state\nconst handleStateSelection=()=>{if(selectedState1&&selectedState2){const data1=geoData.find(item=>item.state===selectedState1);const data2=geoData.find(item=>item.state===selectedState2);if(!data1||!data2){alert('One or both selected states have no data.');return;}const labels=numericHeaders;const dataset={labels,datasets:[{label:selectedState1,data:numericHeaders.map(header=>{const value=data1[header]||0;const{min,max}=globalMinMax[header]||{min:0,max:1};const normalizedValue=max!==min?(value-min)/(max-min)*9.5+0.5:5;return isFinite(normalizedValue)?normalizedValue:0.5;}),actualValues:numericHeaders.map(header=>data1[header]||0),backgroundColor:'rgba(255, 99, 132, 0.5)',borderColor:'rgba(255, 99, 132, 1)',borderWidth:1},{label:selectedState2,data:numericHeaders.map(header=>{const value=data2[header]||0;const{min,max}=globalMinMax[header]||{min:0,max:1};const normalizedValue=max!==min?(value-min)/(max-min)*9.5+0.5:5;return isFinite(normalizedValue)?normalizedValue:0.5;}),actualValues:numericHeaders.map(header=>data2[header]||0),backgroundColor:'rgba(54, 162, 235, 0.5)',borderColor:'rgba(54, 162, 235, 1)',borderWidth:1}]};setChartData(dataset);setSelectedLocation(null);setCompareMarkersEnabled(true);// selected states\nrenderMarkers();}};const chartOptions={responsive:true,maintainAspectRatio:false,scales:chartType==='Bar'?{y:{beginAtZero:true,min:0.5,max:10}}:{},plugins:{legend:{position:'top'},datalabels:{display:true,color:'#000',align:'center',anchor:'center',formatter:function(value,context){const dataset=context.chart.data.datasets[context.datasetIndex];if(dataset.actualValues){const actualValue=dataset.actualValues[context.dataIndex];if(typeof actualValue==='number'&&isFinite(actualValue)){return actualValue.toFixed(2);}else{return'';}}else{if(typeof value==='number'&&isFinite(value)){return value.toFixed(2);}else{return'';}}}},tooltip:{callbacks:{label:function(context){const dataset=context.dataset;const actualValue=dataset.actualValues?dataset.actualValues[context.dataIndex]:context.parsed.y;if(typeof actualValue==='number'&&isFinite(actualValue)){return`${context.label}: ${actualValue.toFixed(2)}`;}else{return`${context.label}: ${actualValue||''}`;}}}}}};return/*#__PURE__*/_jsxs(\"div\",{style:styles.container,children:[/*#__PURE__*/_jsx(\"div\",{ref:mapContainerRef,style:styles.map}),/*#__PURE__*/_jsxs(\"div\",{style:styles.sidebar,children:[/*#__PURE__*/_jsxs(\"div\",{style:styles.combinedBox,children:[/*#__PURE__*/_jsxs(\"div\",{style:styles.progressContainer,children:[/*#__PURE__*/_jsxs(\"div\",{style:styles.progressItem,children:[/*#__PURE__*/_jsx(LoadingBar,{progress:progress.upload}),/*#__PURE__*/_jsx(\"div\",{style:styles.progressMessage,children:progressMessages.upload})]}),/*#__PURE__*/_jsxs(\"div\",{style:styles.progressItem,children:[/*#__PURE__*/_jsx(LoadingBar,{progress:progress.preprocess}),/*#__PURE__*/_jsx(\"div\",{style:styles.progressMessage,children:progressMessages.preprocess})]}),dataNeedsGeocoding&&/*#__PURE__*/_jsxs(\"div\",{style:styles.progressItem,children:[/*#__PURE__*/_jsx(LoadingBar,{progress:progress.geocode}),/*#__PURE__*/_jsx(\"div\",{style:styles.progressMessage,children:progressMessages.geocode})]})]}),/*#__PURE__*/_jsxs(\"div\",{style:styles.section,children:[/*#__PURE__*/_jsx(\"h3\",{style:styles.sectionTitle,children:\"Upload Data\"}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",accept:\".json, .csv\",onChange:handleFileUpload,style:styles.fileInput})]}),geoData.length>0&&stateList.length>0&&!markersAdded&&/*#__PURE__*/_jsx(\"div\",{style:styles.section,children:/*#__PURE__*/_jsx(\"button\",{onClick:renderMarkers,style:{...styles.chartButton,backgroundColor:'#17a2b8',width:'100%'},children:\"Mark Locations on Map\"})}),/*#__PURE__*/_jsxs(\"div\",{style:styles.section,children:[/*#__PURE__*/_jsx(\"h3\",{style:styles.sectionTitle,children:\"Dataset Details\"}),geoData.length>0?/*#__PURE__*/_jsxs(\"div\",{style:styles.datasetDetails,children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Rows:\"}),\" \",totalRows]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Columns:\"}),\" \",totalColumns]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Numeric Columns:\"}),\" \",numericHeaders.join(', ')]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"String Columns:\"}),\" \",stringHeaders.join(', ')]})]}):/*#__PURE__*/_jsx(\"p\",{children:\"No dataset uploaded yet.\"})]}),stateList.length>=2?/*#__PURE__*/_jsxs(\"div\",{style:styles.section,children:[/*#__PURE__*/_jsx(\"h3\",{style:styles.sectionTitle,children:\"Compare Two States\"}),/*#__PURE__*/_jsxs(\"div\",{style:styles.inputGroup,children:[/*#__PURE__*/_jsx(\"label\",{style:styles.inputLabel,children:\"State 1:\"}),/*#__PURE__*/_jsxs(\"select\",{value:selectedState1,onChange:e=>setSelectedState1(e.target.value),style:styles.selectDropdown,disabled:stateList.length===0,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select State\"}),stateList.map(state=>/*#__PURE__*/_jsx(\"option\",{value:state,children:state},state))]})]}),/*#__PURE__*/_jsxs(\"div\",{style:styles.inputGroup,children:[/*#__PURE__*/_jsx(\"label\",{style:styles.inputLabel,children:\"State 2:\"}),/*#__PURE__*/_jsxs(\"select\",{value:selectedState2,onChange:e=>setSelectedState2(e.target.value),style:styles.selectDropdown,disabled:stateList.length===0,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select State\"}),stateList.map(state=>/*#__PURE__*/_jsx(\"option\",{value:state,children:state},state))]})]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleStateSelection,disabled:!selectedState1||!selectedState2,style:{...styles.chartButton,backgroundColor:selectedState1&&selectedState2?'#28a745':'#6c757d'},children:\"Compare\"})]}):geoData.length>0?/*#__PURE__*/_jsxs(\"div\",{style:styles.section,children:[/*#__PURE__*/_jsx(\"h3\",{style:styles.sectionTitle,children:\"Compare Two States\"}),/*#__PURE__*/_jsx(\"p\",{style:{color:'#6c757d'},children:\"Comparison is Enabled when the dataset contains at least two unique states.\"})]}):null,/*#__PURE__*/_jsxs(\"div\",{style:styles.section,children:[/*#__PURE__*/_jsx(\"h3\",{style:styles.sectionTitle,children:\"Select Chart Type\"}),/*#__PURE__*/_jsxs(\"div\",{style:styles.chartOptions,children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>setChartType('Bar'),style:{...styles.chartButton,...(chartType==='Bar'?styles.chartButtonActive:{})},children:\"Bar Chart\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setChartType('Pie'),style:{...styles.chartButton,...(chartType==='Pie'?styles.chartButtonActive:{})},children:\"Pie Chart\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setChartType('Doughnut'),style:{...styles.chartButton,...(chartType==='Doughnut'?styles.chartButtonActive:{})},children:\"Doughnut Chart\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setChartType('PolarArea'),style:{...styles.chartButton,...(chartType==='PolarArea'?styles.chartButtonActive:{})},children:\"PolarArea Chart\"})]})]})]}),chartData&&/*#__PURE__*/_jsx(\"div\",{style:styles.chartContainer,children:/*#__PURE__*/_jsx(\"div\",{style:styles.chartWrapper,children:/*#__PURE__*/_jsxs(\"div\",{style:styles.chartContent,children:[/*#__PURE__*/_jsxs(\"h3\",{children:[chartType,\" Chart\"]}),chartType==='Bar'&&/*#__PURE__*/_jsx(Bar,{data:chartData,options:chartOptions}),chartType==='Pie'&&/*#__PURE__*/_jsx(Pie,{data:chartData,options:chartOptions}),chartType==='Doughnut'&&/*#__PURE__*/_jsx(Doughnut,{data:chartData,options:chartOptions}),chartType==='PolarArea'&&/*#__PURE__*/_jsx(PolarArea,{data:chartData,options:chartOptions})]})})})]})]});};export default MapView;","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","mapboxgl","Papa","Bar","Pie","Doughnut","PolarArea","Chart","ChartJS","RadialLinearScale","CategoryScale","LinearScale","BarElement","ArcElement","Title","Tooltip","Legend","ChartDataLabels","styles","preprocessData","MAPBOX_TOKEN","blueMarkerIcon","redMarkerIcon","yellowMarkerIcon","jsx","_jsx","jsxs","_jsxs","register","accessToken","LoadingBar","_ref","progress","style","width","backgroundColor","height","borderRadius","children","transition","MapView","map","setMap","geoData","setGeoData","numericHeaders","setNumericHeaders","stringHeaders","setStringHeaders","selectedLocation","setSelectedLocation","chartType","setChartType","chartData","setChartData","totalRows","setTotalRows","totalColumns","setTotalColumns","markers","setMarkers","setProgress","upload","preprocess","geocode","progressMessages","setProgressMessages","stateList","setStateList","selectedState1","setSelectedState1","selectedState2","setSelectedState2","locationColumn","setLocationColumn","markersAdded","setMarkersAdded","dataNeedsGeocoding","setDataNeedsGeocoding","compareMarkersEnabled","setCompareMarkersEnabled","stateCoordinates","setStateCoordinates","globalMinMax","setGlobalMinMax","mapContainerRef","initializeMap","Map","container","current","center","zoom","nav","NavigationControl","addControl","remove","reverseGeocodeState","latitude","longitude","response","fetch","data","json","features","length","text","trim","toUpperCase","error","console","geocodeLocation","locationName","encodeURIComponent","generateChartData","locationData","locationValues","header","label","value","parseFloat","normalizedValues","item","min","max","normalizedValue","isFinite","actualValue","labels","datasets","state","actualValues","borderColor","borderWidth","handleLocationSelect","log","handlePreprocess","rawData","prev","cleanRawData","filter","undefined","Object","keys","dataContainsLatLng","some","possibleLocationColumns","detectedLocationColumn","find","col","key","toLowerCase","alert","processedData","stateDataMap","stateCoordsMap","numericFields","Set","stateName","includes","coords","isNaN","count","forEach","add","aggregatedData","values","parsedValue","headers","numeric","strings","isNumeric","every","push","globalMinMaxCalc","Math","uniqueStates","handleFileUpload","event","file","target","files","fileExtension","name","split","pop","reader","FileReader","onload","e","JSON","parse","result","readAsText","skipEmptyLines","beforeFirstChunk","chunk","lines","dataStartIndex","findIndex","line","startsWith","slice","join","complete","results","renderMarkers","marker","newMarkers","el","document","createElement","className","isSelected","isCompared","icon","backgroundImage","backgroundSize","cursor","Marker","setLngLat","addTo","popup","Popup","offset","setText","setPopup","getElement","addEventListener","handleStateSelection","data1","data2","dataset","chartOptions","responsive","maintainAspectRatio","scales","y","beginAtZero","plugins","legend","position","datalabels","display","color","align","anchor","formatter","context","chart","datasetIndex","dataIndex","toFixed","tooltip","callbacks","parsed","ref","sidebar","combinedBox","progressContainer","progressItem","progressMessage","section","sectionTitle","type","accept","onChange","fileInput","onClick","chartButton","datasetDetails","inputGroup","inputLabel","selectDropdown","disabled","chartButtonActive","chartContainer","chartWrapper","chartContent","options"],"sources":["/Users/girishkumarpatchikoru/Desktop/projecthci/geovizproject/frontend/src/components/MapView.js"],"sourcesContent":["\r\nimport React, { useEffect, useState, useCallback, useRef } from 'react';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport Papa from 'papaparse';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport { Bar, Pie, Doughnut, PolarArea } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  RadialLinearScale,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\n\r\nimport styles from './styles'; \r\nimport preprocessData from './preprocessData';\r\nimport { MAPBOX_TOKEN } from './constants'; \r\nimport blueMarkerIcon from '../assets/images/custom-marker-blue.png'; \r\nimport redMarkerIcon from '../assets/images/custom-marker-red.png';\r\nimport yellowMarkerIcon from '../assets/images/custom-marker-yellow.png'; //comparison markers\r\nimport './marker.css'; \r\nChartJS.register(\r\n  RadialLinearScale,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  ChartDataLabels\r\n);\r\n\r\n// Set Mapbox access token\r\nmapboxgl.accessToken = MAPBOX_TOKEN;\r\n\r\n// Loading Bar \r\nconst LoadingBar = ({ progress }) => (\r\n  <div style={{ width: '100%', backgroundColor: '#ddd', height: '10px', borderRadius: '5px' }}>\r\n    <div\r\n      style={{\r\n        width: `${progress}%`,\r\n        height: '100%',\r\n        backgroundColor: '#28a745',\r\n        borderRadius: '5px',\r\n        transition: 'width 0.3s ease',\r\n      }}\r\n    ></div>\r\n  </div>\r\n);\r\n\r\nconst MapView = () => {\r\n  const [map, setMap] = useState(null);\r\n  const [geoData, setGeoData] = useState([]);\r\n  const [numericHeaders, setNumericHeaders] = useState([]);\r\n  const [stringHeaders, setStringHeaders] = useState([]);\r\n  const [selectedLocation, setSelectedLocation] = useState(null);\r\n  const [chartType, setChartType] = useState('Bar');\r\n  const [chartData, setChartData] = useState(null);\r\n  const [totalRows, setTotalRows] = useState(0);\r\n  const [totalColumns, setTotalColumns] = useState(0);\r\n  const [markers, setMarkers] = useState([]);\r\n  const [progress, setProgress] = useState({\r\n    upload: 0,\r\n    preprocess: 0,\r\n    geocode: 0,\r\n  });\r\n  const [progressMessages, setProgressMessages] = useState({\r\n    upload: '',\r\n    preprocess: '',\r\n    geocode: '',\r\n  });\r\n  const [stateList, setStateList] = useState([]);\r\n  const [selectedState1, setSelectedState1] = useState('');\r\n  const [selectedState2, setSelectedState2] = useState('');\r\n  const [locationColumn, setLocationColumn] = useState('');\r\n  const [markersAdded, setMarkersAdded] = useState(false);\r\n  const [dataNeedsGeocoding, setDataNeedsGeocoding] = useState(false);\r\n  const [compareMarkersEnabled, setCompareMarkersEnabled] = useState(false);\r\n  const [stateCoordinates, setStateCoordinates] = useState({});\r\n  const [globalMinMax, setGlobalMinMax] = useState({});\r\n\r\n  // Ref for map container\r\n  const mapContainerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const initializeMap = new mapboxgl.Map({\r\n      container: mapContainerRef.current,\r\n      style: 'mapbox://styles/mapbox/streets-v11',\r\n      center: [-98.5795, 39.8283], // Centered on USA\r\n      zoom: 3,\r\n    });\r\n    const nav = new mapboxgl.NavigationControl();\r\n    initializeMap.addControl(nav, 'top-right');\r\n\r\n    setMap(initializeMap);\r\n\r\n    // Clean up on unmount\r\n    return () => initializeMap.remove();\r\n  }, []);\r\n\r\n  // Reverse Geocode Function to get State Name\r\n  const reverseGeocodeState = useCallback(async (latitude, longitude) => {\r\n    try {\r\n      const response = await fetch(\r\n        `https://api.mapbox.com/geocoding/v5/mapbox.places/${longitude},${latitude}.json?types=region&access_token=${MAPBOX_TOKEN}`\r\n      );\r\n      const data = await response.json();\r\n      if (data.features && data.features.length > 0) {\r\n        return data.features[0].text.trim().toUpperCase();\r\n      } else {\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Reverse geocoding error:', error);\r\n      return null;\r\n    }\r\n  }, []);\r\n\r\n  // Geocode Function to get coordinates from location name\r\n  const geocodeLocation = useCallback(async (locationName) => {\r\n    if (!locationName) return { latitude: null, longitude: null };\r\n    try {\r\n      const response = await fetch(\r\n        `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(\r\n          locationName\r\n        )}.json?access_token=${MAPBOX_TOKEN}&limit=1`\r\n      );\r\n      const data = await response.json();\r\n      if (data.features && data.features.length > 0) {\r\n        const [longitude, latitude] = data.features[0].center;\r\n        return { latitude, longitude };\r\n      }\r\n      return { latitude: null, longitude: null };\r\n    } catch (error) {\r\n      console.error('Geocoding error:', error);\r\n      return { latitude: null, longitude: null };\r\n    }\r\n  }, []);\r\n  const generateChartData = useCallback(\r\n    (locationData) => {\r\n      if (locationData) {\r\n        const locationValues = numericHeaders.map((header) => ({\r\n          label: header,\r\n          value: parseFloat(locationData[header]) || 0,\r\n        }));\r\n\r\n        const normalizedValues = locationValues.map((item) => {\r\n          const { min, max } = globalMinMax[item.label] || { min: 0, max: 1 };\r\n          const normalizedValue =\r\n            max !== min ? ((item.value - min) / (max - min)) * 9.5 + 0.5 : 5;\r\n          return {\r\n            label: item.label,\r\n            normalizedValue: isFinite(normalizedValue) ? normalizedValue : 0.5,\r\n            actualValue: item.value,\r\n          };\r\n        });\r\n\r\n        setChartData({\r\n          labels: normalizedValues.map((item) => item.label),\r\n          datasets: [\r\n            {\r\n              label: locationData.state,\r\n              data: normalizedValues.map((item) => item.normalizedValue),\r\n              actualValues: normalizedValues.map((item) => item.actualValue),\r\n              backgroundColor: [\r\n                'rgba(255, 99, 132, 0.5)',\r\n                'rgba(54, 162, 235, 0.5)',\r\n                'rgba(255, 206, 86, 0.5)',\r\n                'rgba(75, 192, 192, 0.5)',\r\n                'rgba(153, 102, 255, 0.5)',\r\n                'rgba(255, 159, 64, 0.5)',\r\n                'rgba(255, 99, 132, 0.5)',\r\n                'rgba(54, 162, 235, 0.5)',\r\n                'rgba(255, 206, 86, 0.5)',\r\n              ],\r\n              borderColor: [\r\n                'rgba(255, 99, 132, 1)',\r\n                'rgba(54, 162, 235, 1)',\r\n                'rgba(255, 206, 86, 1)',\r\n                'rgba(75, 192, 192, 1)',\r\n                'rgba(153, 102, 255, 1)',\r\n                'rgba(255, 159, 64, 1)',\r\n                'rgba(255, 99, 132, 1)',\r\n                'rgba(54, 162, 235, 1)',\r\n                'rgba(255, 206, 86, 1)',\r\n              ],\r\n              borderWidth: 1,\r\n            },\r\n          ],\r\n        });\r\n      }\r\n    },\r\n    [numericHeaders, globalMinMax]\r\n  );\r\n\r\n  // Handle Location Selection from Map\r\n  const handleLocationSelect = useCallback(\r\n    (locationData) => {\r\n      console.log('Marker clicked:', locationData);\r\n\r\n      setSelectedState1('');\r\n      setSelectedState2('');\r\n      setCompareMarkersEnabled(false);\r\n\r\n      //clicked state is already selected, deselect it\r\n      if (selectedLocation && selectedLocation.state === locationData.state) {\r\n        setSelectedLocation(null);\r\n        setChartData(null);\r\n      } else {\r\n        setSelectedLocation(locationData);\r\n        generateChartData(locationData);\r\n      }\r\n    },\r\n    [selectedLocation, generateChartData]\r\n  );\r\n\r\n  // Data Generation\r\n  useEffect(() => {\r\n    if (selectedLocation) {\r\n      generateChartData(selectedLocation);\r\n    } else {\r\n      setChartData(null);\r\n    }\r\n  }, [selectedLocation]);\r\n\r\n  // Preprocess Data Function\r\n  const handlePreprocess = useCallback(\r\n    async (rawData) => {\r\n      setProgress((prev) => ({ ...prev, preprocess: 0 }));\r\n\r\n      // Remove null, undefined, and inconsistent data rows\r\n      const cleanRawData = rawData.filter(\r\n        (item) => item !== null && item !== undefined && Object.keys(item).length > 0\r\n      );\r\n      const dataContainsLatLng = cleanRawData.some(\r\n        (item) => item.latitude && item.longitude\r\n      );\r\n\r\n      setDataNeedsGeocoding(!dataContainsLatLng);\r\n      const possibleLocationColumns = ['state', 'province', 'city'];\r\n      let detectedLocationColumn = possibleLocationColumns.find((col) =>\r\n        cleanRawData[0] &&\r\n        Object.keys(cleanRawData[0]).some((key) => key.toLowerCase() === col.toLowerCase())\r\n      );\r\n\r\n      setLocationColumn(detectedLocationColumn || '');\r\n\r\n      console.log('Detected Location Column:', detectedLocationColumn);\r\n\r\n      if (!detectedLocationColumn && !dataContainsLatLng) {\r\n        alert('No valid location column found in the dataset.');\r\n        return;\r\n      }\r\n\r\n      // Preprocess data\r\n      const processedData = await preprocessData(\r\n        cleanRawData,\r\n        setProgress\r\n      );\r\n\r\n      console.log('Number of Data Points After Preprocessing:', processedData.length);\r\n\r\n      if (!processedData || processedData.length === 0) {\r\n        alert('No data available after filtering.');\r\n        return;\r\n      }\r\n\r\n      setProgress((prev) => ({ ...prev, preprocess: 50 }));\r\n      const stateDataMap = {};\r\n      const stateCoordsMap = {};\r\n      const numericFields = new Set();\r\n\r\n      if (detectedLocationColumn || dataContainsLatLng) {\r\n        for (const item of processedData) {\r\n          let stateName = '';\r\n\r\n          if (detectedLocationColumn) {\r\n            stateName = item[detectedLocationColumn];\r\n            if (detectedLocationColumn.toLowerCase().includes('city')) {\r\n              // If the location column is a city, we need to get the state name\r\n              const coords = await geocodeLocation(stateName);\r\n              if (coords.latitude && coords.longitude) {\r\n                stateName = await reverseGeocodeState(coords.latitude, coords.longitude);\r\n                if (!stateName) continue;\r\n              } else {\r\n                continue;\r\n              }\r\n            } else {\r\n              stateName = stateName.trim().toUpperCase();\r\n            }\r\n          } else if (dataContainsLatLng) {\r\n            const latitude = parseFloat(item.latitude);\r\n            const longitude = parseFloat(item.longitude);\r\n            if (!isNaN(latitude) && !isNaN(longitude)) {\r\n              stateName = await reverseGeocodeState(latitude, longitude);\r\n              if (stateName) {\r\n                stateName = stateName.trim().toUpperCase();\r\n              } else {\r\n                continue;\r\n              }\r\n            } else {\r\n              continue;\r\n            }\r\n          }\r\n\r\n          if (!stateName) continue;\r\n\r\n          // Aggregate data per state\r\n          if (!stateDataMap[stateName]) {\r\n            stateDataMap[stateName] = { ...item };\r\n            stateDataMap[stateName].state = stateName;\r\n            stateDataMap[stateName].count = 1;\r\n\r\n            // Store coordinates for the first occurrence\r\n            const latitude = parseFloat(item.latitude);\r\n            const longitude = parseFloat(item.longitude);\r\n            if (!isNaN(latitude) && !isNaN(longitude)) {\r\n              stateCoordsMap[stateName] = { latitude, longitude };\r\n            }\r\n          } else {\r\n            // Sum numeric fields\r\n            Object.keys(item).forEach((key) => {\r\n              if (key.toLowerCase() === 'state') return;\r\n              const value = parseFloat(item[key]);\r\n              if (!isNaN(value)) {\r\n                numericFields.add(key);\r\n                stateDataMap[stateName][key] =\r\n                  (stateDataMap[stateName][key] || 0) + value;\r\n              }\r\n            });\r\n            stateDataMap[stateName].count += 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      setProgress((prev) => ({ ...prev, preprocess: 80 }));\r\n      const aggregatedData = Object.values(stateDataMap).map((item) => {\r\n        const count = item.count || 1;\r\n        numericFields.forEach((key) => {\r\n          const parsedValue = parseFloat(item[key]);\r\n          if (!isNaN(parsedValue)) {\r\n            item[key] = parsedValue / count;\r\n          } else {\r\n            item[key] = 0;\r\n          }\r\n        });\r\n        return item;\r\n      });\r\n\r\n      setGeoData(aggregatedData);\r\n      setStateCoordinates(stateCoordsMap);\r\n\r\n      // checking  numeric and string headers\r\n      if (aggregatedData.length > 0) {\r\n        const headers = Object.keys(aggregatedData[0]);\r\n        const numeric = [];\r\n        const strings = [];\r\n\r\n        headers.forEach((header) => {\r\n          if (\r\n            [\r\n              'latitude',\r\n              'longitude',\r\n              'GeoLocation',\r\n              'locationID',\r\n              'count',\r\n              'state',\r\n            ].includes(header)\r\n          )\r\n            return;\r\n\r\n          const isNumeric = aggregatedData.every((item) => {\r\n            const value = parseFloat(item[header]);\r\n            return !isNaN(value);\r\n          });\r\n          if (isNumeric) {\r\n            numeric.push(header);\r\n          } else {\r\n            strings.push(header);\r\n          }\r\n        });\r\n        const globalMinMaxCalc = {};\r\n        numeric.forEach((header) => {\r\n          const values = aggregatedData.map((item) => parseFloat(item[header]));\r\n          globalMinMaxCalc[header] = {\r\n            min: Math.min(...values),\r\n            max: Math.max(...values),\r\n          };\r\n        });\r\n        setGlobalMinMax(globalMinMaxCalc);\r\n\r\n        setNumericHeaders(numeric);\r\n        setStringHeaders(strings);\r\n\r\n        setTotalRows(aggregatedData.length);\r\n        setTotalColumns(headers.length);\r\n        const uniqueStates = Object.keys(stateDataMap);\r\n        setStateList(uniqueStates);\r\n      } else {\r\n        alert('No data available after filtering.');\r\n      }\r\n\r\n      setProgress((prev) => ({ ...prev, preprocess: 100 }));\r\n\r\n      // Reset markersAdded state when new data is uploaded\r\n      setMarkersAdded(false);\r\n    },\r\n    [reverseGeocodeState, geocodeLocation, preprocessData]\r\n  );\r\n  const handleFileUpload = (event) => {\r\n    setProgress({\r\n      upload: 0,\r\n      preprocess: 0,\r\n      geocode: 0,\r\n    });\r\n    setProgressMessages({\r\n      upload: '',\r\n      preprocess: '',\r\n      geocode: '',\r\n    });\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      const fileExtension = file.name.split('.').pop().toLowerCase();\r\n\r\n      if (fileExtension === 'json') {\r\n        const reader = new FileReader();\r\n        reader.onload = async (e) => {\r\n          try {\r\n            const data = JSON.parse(e.target.result);\r\n            setProgress((prev) => ({ ...prev, upload: 100 }));\r\n            setProgressMessages((prev) => ({\r\n              ...prev,\r\n              upload: 'Dataset uploaded successfully.',\r\n            }));\r\n            await handlePreprocess(data);\r\n          } catch (error) {\r\n            console.error('Invalid JSON format:', error);\r\n            alert('Error: Uploaded file is not valid JSON.');\r\n          }\r\n        };\r\n        reader.readAsText(file);\r\n      } else if (fileExtension === 'csv') {\r\n        Papa.parse(file, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          beforeFirstChunk: (chunk) => {\r\n            //datasets with metadata rows\r\n            const lines = chunk.trim().split('\\n');\r\n            const dataStartIndex = lines.findIndex(\r\n              (line) =>\r\n                line.toLowerCase().startsWith('country name') ||\r\n                line.toLowerCase().startsWith('state') ||\r\n                line.toLowerCase().startsWith('rowid') ||\r\n                line.toLowerCase().startsWith('longitude') ||\r\n                line.toLowerCase().startsWith('latitude')\r\n            );\r\n            if (dataStartIndex > 0) {\r\n              return lines.slice(dataStartIndex).join('\\n');\r\n            }\r\n            return chunk;\r\n          },\r\n          complete: async (results) => {\r\n            setProgress((prev) => ({ ...prev, upload: 100 }));\r\n            setProgressMessages((prev) => ({\r\n              ...prev,\r\n              upload: 'Dataset uploaded successfully.',\r\n            }));\r\n            await handlePreprocess(results.data);\r\n          },\r\n          error: (error) => {\r\n            console.error('CSV parsing error:', error);\r\n            alert('Error: Failed to parse CSV file.');\r\n          },\r\n        });\r\n      } else {\r\n        alert('Please upload a valid JSON or CSV file.');\r\n      }\r\n    }\r\n  };\r\n\r\n  //Progress indicators\r\n  useEffect(() => {\r\n    if (progress.preprocess === 100) {\r\n      setProgressMessages((prev) => ({\r\n        ...prev,\r\n        preprocess: 'Preprocessing completed.',\r\n      }));\r\n    }\r\n  }, [progress.preprocess]);\r\n\r\n  useEffect(() => {\r\n    if (progress.geocode === 100) {\r\n      setProgressMessages((prev) => ({\r\n        ...prev,\r\n        geocode: 'Locations marked on the map.',\r\n      }));\r\n    }\r\n  }, [progress.geocode]);\r\n\r\n  // Markerson Map\r\n  const renderMarkers = useCallback(() => {\r\n    if (map && geoData.length > 0) {\r\n      if (stateList.length === 0) {\r\n        alert('Data is not aggregated by state. Cannot mark locations on the map.');\r\n        return;\r\n      }\r\n\r\n      //Removed existing markers\r\n      markers.forEach((marker) => marker.remove());\r\n      const newMarkers = [];\r\n\r\n      geoData.forEach((data) => {\r\n        const stateName = data.state;\r\n        const coords = stateCoordinates[stateName];\r\n        if (!coords) return;\r\n\r\n        const latitude = parseFloat(coords.latitude);\r\n        const longitude = parseFloat(coords.longitude);\r\n\r\n        if (!isNaN(latitude) && !isNaN(longitude)) {\r\n          const el = document.createElement('div');\r\n          el.className = 'marker';\r\n          const isSelected = selectedLocation\r\n            ? selectedLocation.state === data.state\r\n            : false;\r\n          const isCompared = compareMarkersEnabled\r\n            ? [selectedState1, selectedState2].includes(stateName)\r\n            : false;\r\n          const icon = isSelected\r\n            ? redMarkerIcon\r\n            : isCompared\r\n            ? yellowMarkerIcon\r\n            : blueMarkerIcon;\r\n          el.style.backgroundImage = `url(${icon})`;\r\n          el.style.width = '30px';\r\n          el.style.height = '30px';\r\n          el.style.backgroundSize = 'contain';\r\n          el.style.cursor = 'pointer';\r\n\r\n          const marker = new mapboxgl.Marker(el)\r\n            .setLngLat([longitude, latitude])\r\n            .addTo(map);\r\n          const popup = new mapboxgl.Popup({ offset: 25 }).setText(stateName);\r\n          marker.setPopup(popup);\r\n\r\n          marker.getElement().addEventListener('click', () => {\r\n            handleLocationSelect(data);\r\n          });\r\n\r\n          newMarkers.push(marker);\r\n        }\r\n      });\r\n      setMarkers(newMarkers);\r\n      setMarkersAdded(true);\r\n\r\n      setProgress((prev) => ({ ...prev, geocode: 100 }));\r\n      setProgressMessages((prev) => ({\r\n        ...prev,\r\n        geocode: 'Locations marked on the map.',\r\n      }));\r\n    }\r\n  }, [\r\n    map,\r\n    geoData,\r\n    selectedLocation,\r\n    stateCoordinates,\r\n    markers,\r\n    stateList,\r\n    compareMarkersEnabled,\r\n    selectedState1,\r\n    selectedState2,\r\n    handleLocationSelect,\r\n  ]);\r\n\r\n  // Re-render markers  selectedLocation or comparison changes\r\n  useEffect(() => {\r\n    if (markersAdded) {\r\n      renderMarkers();\r\n    }\r\n  }, [selectedLocation, compareMarkersEnabled]);\r\n\r\n  //Comparison Selected state\r\n  const handleStateSelection = () => {\r\n    if (selectedState1 && selectedState2) {\r\n      const data1 = geoData.find((item) => item.state === selectedState1);\r\n      const data2 = geoData.find((item) => item.state === selectedState2);\r\n\r\n      if (!data1 || !data2) {\r\n        alert('One or both selected states have no data.');\r\n        return;\r\n      }\r\n\r\n      const labels = numericHeaders;\r\n      const dataset = {\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: selectedState1,\r\n            data: numericHeaders.map((header) => {\r\n              const value = data1[header] || 0;\r\n              const { min, max } = globalMinMax[header] || { min: 0, max: 1 };\r\n              const normalizedValue =\r\n                max !== min ? ((value - min) / (max - min)) * 9.5 + 0.5 : 5;\r\n              return isFinite(normalizedValue) ? normalizedValue : 0.5;\r\n            }),\r\n            actualValues: numericHeaders.map((header) => data1[header] || 0),\r\n            backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n            borderColor: 'rgba(255, 99, 132, 1)',\r\n            borderWidth: 1,\r\n          },\r\n          {\r\n            label: selectedState2,\r\n            data: numericHeaders.map((header) => {\r\n              const value = data2[header] || 0;\r\n              const { min, max } = globalMinMax[header] || { min: 0, max: 1 };\r\n              const normalizedValue =\r\n                max !== min ? ((value - min) / (max - min)) * 9.5 + 0.5 : 5;\r\n              return isFinite(normalizedValue) ? normalizedValue : 0.5;\r\n            }),\r\n            actualValues: numericHeaders.map((header) => data2[header] || 0),\r\n            backgroundColor: 'rgba(54, 162, 235, 0.5)',\r\n            borderColor: 'rgba(54, 162, 235, 1)',\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      };\r\n\r\n      setChartData(dataset);\r\n      setSelectedLocation(null);\r\n      setCompareMarkersEnabled(true);\r\n\r\n      // selected states\r\n      renderMarkers();\r\n    }\r\n  };\r\n  const chartOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    scales:\r\n      chartType === 'Bar'\r\n        ? {\r\n            y: {\r\n              beginAtZero: true,\r\n              min: 0.5,\r\n              max: 10,\r\n            },\r\n          }\r\n        : {},\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n      },\r\n      datalabels: {\r\n        display: true,\r\n        color: '#000',\r\n        align: 'center',\r\n        anchor: 'center',\r\n        formatter: function (value, context) {\r\n          const dataset = context.chart.data.datasets[context.datasetIndex];\r\n          if (dataset.actualValues) {\r\n            const actualValue = dataset.actualValues[context.dataIndex];\r\n            if (typeof actualValue === 'number' && isFinite(actualValue)) {\r\n              return actualValue.toFixed(2);\r\n            } else {\r\n              return '';\r\n            }\r\n          } else {\r\n            if (typeof value === 'number' && isFinite(value)) {\r\n              return value.toFixed(2);\r\n            } else {\r\n              return '';\r\n            }\r\n          }\r\n        },\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function (context) {\r\n            const dataset = context.dataset;\r\n            const actualValue = dataset.actualValues\r\n              ? dataset.actualValues[context.dataIndex]\r\n              : context.parsed.y;\r\n            if (typeof actualValue === 'number' && isFinite(actualValue)) {\r\n              return `${context.label}: ${actualValue.toFixed(2)}`;\r\n            } else {\r\n              return `${context.label}: ${actualValue || ''}`;\r\n            }\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <div ref={mapContainerRef} style={styles.map}></div>\r\n      <div style={styles.sidebar}>\r\n        <div style={styles.combinedBox}>\r\n          <div style={styles.progressContainer}>\r\n            <div style={styles.progressItem}>\r\n              <LoadingBar progress={progress.upload} />\r\n              <div style={styles.progressMessage}>{progressMessages.upload}</div>\r\n            </div>\r\n            <div style={styles.progressItem}>\r\n              <LoadingBar progress={progress.preprocess} />\r\n              <div style={styles.progressMessage}>{progressMessages.preprocess}</div>\r\n            </div>\r\n            {dataNeedsGeocoding && (\r\n              <div style={styles.progressItem}>\r\n                <LoadingBar progress={progress.geocode} />\r\n                <div style={styles.progressMessage}>{progressMessages.geocode}</div>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Upload Data Section */}\r\n          <div style={styles.section}>\r\n            <h3 style={styles.sectionTitle}>Upload Data</h3>\r\n            <input\r\n              type=\"file\"\r\n              accept=\".json, .csv\"\r\n              onChange={handleFileUpload}\r\n              style={styles.fileInput}\r\n            />\r\n          </div>\r\n          {geoData.length > 0 && stateList.length > 0 && !markersAdded && (\r\n            <div style={styles.section}>\r\n              <button\r\n                onClick={renderMarkers}\r\n                style={{\r\n                  ...styles.chartButton,\r\n                  backgroundColor: '#17a2b8',\r\n                  width: '100%',\r\n                }}\r\n              >\r\n                Mark Locations on Map\r\n              </button>\r\n            </div>\r\n          )}\r\n\r\n          {/* Dataset Details Section */}\r\n          <div style={styles.section}>\r\n            <h3 style={styles.sectionTitle}>Dataset Details</h3>\r\n            {geoData.length > 0 ? (\r\n              <div style={styles.datasetDetails}>\r\n                <p>\r\n                  <strong>Rows:</strong> {totalRows}\r\n                </p>\r\n                <p>\r\n                  <strong>Columns:</strong> {totalColumns}\r\n                </p>\r\n                <p>\r\n                  <strong>Numeric Columns:</strong> {numericHeaders.join(', ')}\r\n                </p>\r\n                <p>\r\n                  <strong>String Columns:</strong> {stringHeaders.join(', ')}\r\n                </p>\r\n              </div>\r\n            ) : (\r\n              <p>No dataset uploaded yet.</p>\r\n            )}\r\n          </div>\r\n\r\n          {/* Location Comparison Section */}\r\n          {stateList.length >= 2 ? (\r\n            <div style={styles.section}>\r\n              <h3 style={styles.sectionTitle}>Compare Two States</h3>\r\n              <div style={styles.inputGroup}>\r\n                <label style={styles.inputLabel}>State 1:</label>\r\n                <select\r\n                  value={selectedState1}\r\n                  onChange={(e) => setSelectedState1(e.target.value)}\r\n                  style={styles.selectDropdown}\r\n                  disabled={stateList.length === 0}\r\n                >\r\n                  <option value=\"\">Select State</option>\r\n                  {stateList.map((state) => (\r\n                    <option key={state} value={state}>\r\n                      {state}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n              <div style={styles.inputGroup}>\r\n                <label style={styles.inputLabel}>State 2:</label>\r\n                <select\r\n                  value={selectedState2}\r\n                  onChange={(e) => setSelectedState2(e.target.value)}\r\n                  style={styles.selectDropdown}\r\n                  disabled={stateList.length === 0}\r\n                >\r\n                  <option value=\"\">Select State</option>\r\n                  {stateList.map((state) => (\r\n                    <option key={state} value={state}>\r\n                      {state}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n              <button\r\n                onClick={handleStateSelection}\r\n                disabled={!selectedState1 || !selectedState2}\r\n                style={{\r\n                  ...styles.chartButton,\r\n                  backgroundColor:\r\n                    selectedState1 && selectedState2 ? '#28a745' : '#6c757d',\r\n                }}\r\n              >\r\n                Compare\r\n              </button>\r\n            </div>\r\n          ) : geoData.length > 0 ? (\r\n            <div style={styles.section}>\r\n              <h3 style={styles.sectionTitle}>Compare Two States</h3>\r\n              <p style={{ color: '#6c757d' }}>\r\n                Comparison is Enabled when the dataset contains at least two unique states.\r\n              </p>\r\n            </div>\r\n          ) : null}\r\n\r\n          {/* Chart Type Selection Section */}\r\n          <div style={styles.section}>\r\n            <h3 style={styles.sectionTitle}>Select Chart Type</h3>\r\n            <div style={styles.chartOptions}>\r\n              <button\r\n                onClick={() => setChartType('Bar')}\r\n                style={{\r\n                  ...styles.chartButton,\r\n                  ...(chartType === 'Bar' ? styles.chartButtonActive : {}),\r\n                }}\r\n              >\r\n                Bar Chart\r\n              </button>\r\n              <button\r\n                onClick={() => setChartType('Pie')}\r\n                style={{\r\n                  ...styles.chartButton,\r\n                  ...(chartType === 'Pie' ? styles.chartButtonActive : {}),\r\n                }}\r\n              >\r\n                Pie Chart\r\n              </button>\r\n              <button\r\n                onClick={() => setChartType('Doughnut')}\r\n                style={{\r\n                  ...styles.chartButton,\r\n                  ...(chartType === 'Doughnut' ? styles.chartButtonActive : {}),\r\n                }}\r\n              >\r\n                Doughnut Chart\r\n              </button>\r\n              <button\r\n                onClick={() => setChartType('PolarArea')}\r\n                style={{\r\n                  ...styles.chartButton,\r\n                  ...(chartType === 'PolarArea' ? styles.chartButtonActive : {}),\r\n                }}\r\n              >\r\n                PolarArea Chart\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Chart Display Section */}\r\n        {chartData && (\r\n          <div style={styles.chartContainer}>\r\n            <div style={styles.chartWrapper}>\r\n              <div style={styles.chartContent}>\r\n                <h3>{chartType} Chart</h3>\r\n                {chartType === 'Bar' && <Bar data={chartData} options={chartOptions} />}\r\n                {chartType === 'Pie' && <Pie data={chartData} options={chartOptions} />}\r\n                {chartType === 'Doughnut' && (\r\n                  <Doughnut data={chartData} options={chartOptions} />\r\n                )}\r\n                {chartType === 'PolarArea' && (\r\n                  <PolarArea data={chartData} options={chartOptions} />\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}