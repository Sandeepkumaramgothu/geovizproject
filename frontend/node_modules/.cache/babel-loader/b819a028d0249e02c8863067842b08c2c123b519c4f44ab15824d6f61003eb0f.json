{"ast":null,"code":"var _jsxFileName = \"/Users/girishkumarpatchikoru/Desktop/projecthci/geovizproject/frontend/src/components/MapView.js\",\n  _s = $RefreshSig$();\n// src/components/MapView.js\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport Papa from 'papaparse';\nimport { Bar, Pie, Doughnut, PolarArea } from 'react-chartjs-2';\nimport { Chart as ChartJS, RadialLinearScale, CategoryScale, LinearScale, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\nimport { CircularProgressbar } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport styles from './styles'; // Ensure this file exists and is properly configured\nimport preprocessData from './preprocessData'; // Ensure this file exists and is properly configured\nimport { MAPBOX_TOKEN } from './constants'; // Ensure this file exists and contains your Mapbox token\nimport blueMarkerIcon from '../assets/images/custom-marker-blue.png'; // Ensure these assets exist\nimport redMarkerIcon from '../assets/images/custom-marker-red.png';\nimport './marker.css'; // Ensure this CSS file exists for marker styling\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(RadialLinearScale, CategoryScale, LinearScale, BarElement, ArcElement, Title, Tooltip, Legend, ChartDataLabels);\n\n// Set Mapbox access token\nmapboxgl.accessToken = MAPBOX_TOKEN;\nconst MapView = () => {\n  _s();\n  // State Variables\n  const [map, setMap] = useState(null);\n  const [geoData, setGeoData] = useState([]);\n  const [numericHeaders, setNumericHeaders] = useState([]);\n  const [stringHeaders, setStringHeaders] = useState([]);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [chartType, setChartType] = useState('Bar');\n  const [chartData, setChartData] = useState(null);\n  const [totalRows, setTotalRows] = useState(0);\n  const [totalColumns, setTotalColumns] = useState(0);\n  const [markers, setMarkers] = useState([]);\n  const [progress, setProgress] = useState({\n    upload: 0,\n    preprocess: 0,\n    geocode: 0\n  });\n  const [progressMessages, setProgressMessages] = useState({\n    upload: '',\n    preprocess: '',\n    geocode: ''\n  });\n  const [cityList, setCityList] = useState([]);\n  const [selectedCity1, setSelectedCity1] = useState('');\n  const [selectedCity2, setSelectedCity2] = useState('');\n  const [locationColumn, setLocationColumn] = useState('');\n  const [markersAdded, setMarkersAdded] = useState(false);\n  const [dataNeedsGeocoding, setDataNeedsGeocoding] = useState(true);\n  const [compareMarkersEnabled, setCompareMarkersEnabled] = useState(false);\n\n  // Initialize Map\n  useEffect(() => {\n    const initializeMap = new mapboxgl.Map({\n      container: 'map',\n      // HTML container id\n      style: 'mapbox://styles/mapbox/streets-v11',\n      // style URL\n      center: [-98.5795, 39.8283],\n      // starting position [lng, lat] (center of USA)\n      zoom: 3 // starting zoom\n    });\n\n    // Add navigation control (the +/- zoom buttons)\n    const nav = new mapboxgl.NavigationControl();\n    initializeMap.addControl(nav, 'top-right');\n    setMap(initializeMap);\n\n    // Clean up on unmount\n    return () => initializeMap.remove();\n  }, []);\n\n  // Preprocess Data Function\n  const handlePreprocess = useCallback(async rawData => {\n    // Determine the location column dynamically\n    const possibleLocationColumns = ['LocationDesc', 'LocationAbbr', 'state', 'State', 'city', 'City', 'Country', 'Country Name', 'Country Code', 'Address', 'Place', 'GeoLocation'\n    // Include more possible location columns if necessary\n    ];\n    let detectedLocationColumn = possibleLocationColumns.find(col => rawData[0] && rawData[0].hasOwnProperty(col));\n\n    // If no location column is found, use 'locationID'\n    if (!detectedLocationColumn) {\n      detectedLocationColumn = 'locationID';\n    }\n    setLocationColumn(detectedLocationColumn);\n    console.log('Detected Location Column:', detectedLocationColumn);\n\n    // Check if data contains latitude and longitude\n    const dataContainsLatLng = rawData.some(item => item.latitude && item.longitude);\n\n    // Set dataNeedsGeocoding based on whether latitude and longitude are present\n    setDataNeedsGeocoding(!dataContainsLatLng);\n\n    // Preprocess data\n    const processedData = await preprocessData(rawData, setProgress, detectedLocationColumn);\n    if (!processedData || processedData.length === 0) {\n      alert('No valid data after preprocessing.');\n      return;\n    }\n    setGeoData(processedData);\n\n    // Identify numeric and string headers\n    if (processedData.length > 0) {\n      const headers = Object.keys(processedData[0]);\n      const numeric = [];\n      const strings = [];\n      headers.forEach(header => {\n        if (['latitude', 'longitude', 'GeoLocation', 'locationID'].includes(header)) return;\n        const isNumeric = processedData.every(item => {\n          const value = parseFloat(item[header]);\n          return !isNaN(value);\n        });\n        if (isNumeric) {\n          numeric.push(header);\n        } else {\n          strings.push(header);\n        }\n      });\n      setNumericHeaders(numeric);\n      setStringHeaders(strings);\n      setTotalRows(processedData.length);\n      setTotalColumns(headers.length);\n\n      // Extract unique locations for comparison\n      const uniqueLocations = [...new Set(processedData.map(item => item[detectedLocationColumn]).filter(Boolean))];\n      setCityList(uniqueLocations);\n    } else {\n      alert('No data available after filtering.');\n    }\n\n    // Reset markersAdded state when new data is uploaded\n    setMarkersAdded(false);\n  }, []);\n\n  // Generate a human-readable label for the location\n  const getLocationLabel = useCallback(data => {\n    if (data[locationColumn]) return data[locationColumn];\n    if (data.city) return data.city;\n    if (data.state) return data.state;\n    if (data.address) return data.address;\n    return `Lat: ${parseFloat(data.latitude).toFixed(2)}, Lng: ${parseFloat(data.longitude).toFixed(2)}`;\n  }, [locationColumn]);\n\n  // Handle File Upload\n  const handleFileUpload = event => {\n    setProgress({\n      upload: 0,\n      preprocess: 0,\n      geocode: 0\n    });\n    setProgressMessages({\n      upload: '',\n      preprocess: '',\n      geocode: ''\n    });\n    const file = event.target.files[0];\n    if (file) {\n      const fileExtension = file.name.split('.').pop().toLowerCase();\n      if (fileExtension === 'json') {\n        const reader = new FileReader();\n        reader.onload = async e => {\n          try {\n            const data = JSON.parse(e.target.result);\n            setProgress(prev => ({\n              ...prev,\n              upload: 100\n            }));\n            setProgressMessages(prev => ({\n              ...prev,\n              upload: 'Dataset uploaded successfully.'\n            }));\n            await handlePreprocess(data);\n          } catch (error) {\n            console.error('Invalid JSON format:', error);\n            alert('Error: Uploaded file is not valid JSON.');\n          }\n        };\n        reader.readAsText(file);\n      } else if (fileExtension === 'csv') {\n        Papa.parse(file, {\n          header: true,\n          skipEmptyLines: true,\n          beforeFirstChunk: chunk => {\n            // Handle datasets with metadata rows\n            const lines = chunk.trim().split('\\n');\n            const dataStartIndex = lines.findIndex(line => line.startsWith('Country Name') || line.startsWith('state') || line.startsWith('RowId'));\n            if (dataStartIndex > 0) {\n              return lines.slice(dataStartIndex).join('\\n');\n            }\n            return chunk;\n          },\n          complete: async results => {\n            setProgress(prev => ({\n              ...prev,\n              upload: 100\n            }));\n            setProgressMessages(prev => ({\n              ...prev,\n              upload: 'Dataset uploaded successfully.'\n            }));\n            await handlePreprocess(results.data);\n          },\n          error: error => {\n            console.error('CSV parsing error:', error);\n            alert('Error: Failed to parse CSV file.');\n          }\n        });\n      } else {\n        alert('Please upload a valid JSON or CSV file.');\n      }\n    }\n  };\n\n  // Monitor Progress Updates\n  useEffect(() => {\n    if (progress.preprocess === 100) {\n      setProgressMessages(prev => ({\n        ...prev,\n        preprocess: 'Preprocessing completed.'\n      }));\n    }\n  }, [progress.preprocess]);\n  useEffect(() => {\n    if (progress.geocode === 100) {\n      setProgressMessages(prev => ({\n        ...prev,\n        geocode: 'Locations marked on the map.'\n      }));\n    }\n  }, [progress.geocode]);\n\n  // Handle Location Selection from Map\n  const handleLocationSelect = useCallback(locationData => {\n    console.log('Marker clicked:', locationData); // Debugging statement\n    // Clear city selections if a map marker is selected\n    setSelectedCity1('');\n    setSelectedCity2('');\n    if (selectedLocation && selectedLocation.locationID === locationData.locationID) {\n      setSelectedLocation(null); // Deselect\n      setChartData(null);\n    } else {\n      setSelectedLocation(locationData);\n      setChartData(null);\n    }\n  }, [selectedLocation]);\n\n  // Handle Location Comparison Selection\n  const handleCitySelection = () => {\n    if (selectedCity1 && selectedCity2) {\n      const data1 = geoData.filter(item => item[locationColumn] === selectedCity1);\n      const data2 = geoData.filter(item => item[locationColumn] === selectedCity2);\n      if (data1.length === 0 || data2.length === 0) {\n        alert('One or both selected locations have no data.');\n        return;\n      }\n\n      // Aggregate data (e.g., average)\n      const aggregatedData1 = {};\n      const aggregatedData2 = {};\n      numericHeaders.forEach(header => {\n        const values1 = data1.map(item => parseFloat(item[header]) || 0);\n        const values2 = data2.map(item => parseFloat(item[header]) || 0);\n        const avg1 = values1.reduce((a, b) => a + b, 0) / (values1.length || 1);\n        const avg2 = values2.reduce((a, b) => a + b, 0) / (values2.length || 1);\n        aggregatedData1[header] = avg1;\n        aggregatedData2[header] = avg2;\n      });\n\n      // Normalize data for chart display (0.5% to 10%)\n      const dataMin = 0; // Minimum data value\n      const dataMax = Math.max(...Object.values(aggregatedData1), ...Object.values(aggregatedData2));\n      const range = dataMax - dataMin || 1; // Avoid division by zero\n\n      const normalizedData1 = {};\n      const normalizedData2 = {};\n      const actualData1 = {};\n      const actualData2 = {};\n      numericHeaders.forEach(header => {\n        normalizedData1[header] = (aggregatedData1[header] - dataMin) / range * 9.5 + 0.5;\n        normalizedData2[header] = (aggregatedData2[header] - dataMin) / range * 9.5 + 0.5;\n        actualData1[header] = aggregatedData1[header];\n        actualData2[header] = aggregatedData2[header];\n      });\n\n      // Prepare chart data\n      const labels = numericHeaders;\n      const dataSet = {\n        labels,\n        datasets: [{\n          label: selectedCity1,\n          data: numericHeaders.map(header => normalizedData1[header]),\n          actualValues: numericHeaders.map(header => actualData1[header]),\n          backgroundColor: 'rgba(255, 99, 132, 0.5)',\n          borderColor: 'rgba(255, 99, 132, 1)',\n          borderWidth: 1\n        }, {\n          label: selectedCity2,\n          data: numericHeaders.map(header => normalizedData2[header]),\n          actualValues: numericHeaders.map(header => actualData2[header]),\n          backgroundColor: 'rgba(54, 162, 235, 0.5)',\n          borderColor: 'rgba(54, 162, 235, 1)',\n          borderWidth: 1\n        }]\n      };\n      setChartData(dataSet);\n      setSelectedLocation(null); // Deselect any single location\n\n      // Enable the \"Mark on Map\" button\n      setCompareMarkersEnabled(true);\n    }\n  };\n\n  // Generate Chart Data for Selected Location\n  const generateChartData = useCallback(() => {\n    if (selectedLocation) {\n      const locationValues = numericHeaders.map(header => ({\n        label: header,\n        value: parseFloat(selectedLocation[header]) || 0\n      }));\n\n      // Normalize data for chart display (0.5% to 10%)\n      const dataMin = 0; // Minimum data value\n      const dataMax = Math.max(...locationValues.map(item => item.value));\n      const range = dataMax - dataMin || 1; // Avoid division by zero\n\n      const normalizedValues = locationValues.map(item => ({\n        label: item.label,\n        normalizedValue: (item.value - dataMin) / range * 9.5 + 0.5,\n        actualValue: item.value // Keep the actual value\n      }));\n      setChartData({\n        labels: normalizedValues.map(item => item.label),\n        datasets: [{\n          label: getLocationLabel(selectedLocation),\n          data: normalizedValues.map(item => item.normalizedValue),\n          actualValues: normalizedValues.map(item => item.actualValue),\n          // Store actual values\n          backgroundColor: ['rgba(255, 99, 132, 0.5)', 'rgba(54, 162, 235, 0.5)', 'rgba(255, 206, 86, 0.5)', 'rgba(75, 192, 192, 0.5)', 'rgba(153, 102, 255, 0.5)', 'rgba(255, 159, 64, 0.5)'],\n          borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],\n          borderWidth: 1\n        }]\n      });\n    }\n  }, [selectedLocation, numericHeaders, getLocationLabel]);\n\n  // Data Generation\n  useEffect(() => {\n    generateChartData();\n  }, [generateChartData, chartType]);\n\n  // Markers on Map\n  const renderMarkers = useCallback(() => {\n    if (map && geoData.length > 0) {\n      // Remove existing markers\n      markers.forEach(marker => marker.remove());\n      const newMarkers = [];\n      geoData.forEach(data => {\n        const latitude = parseFloat(data.latitude);\n        const longitude = parseFloat(data.longitude);\n        if (!isNaN(latitude) && !isNaN(longitude)) {\n          const el = document.createElement('div');\n          el.className = 'marker';\n          const isSelected = selectedLocation ? selectedLocation.locationID === data.locationID : false;\n          const icon = isSelected ? redMarkerIcon : blueMarkerIcon;\n          el.style.backgroundImage = `url(${icon})`;\n          el.style.width = '30px';\n          el.style.height = '30px';\n          el.style.backgroundSize = 'contain';\n          el.style.cursor = 'pointer';\n          const marker = new mapboxgl.Marker(el).setLngLat([longitude, latitude]).addTo(map);\n          marker.getElement().addEventListener('click', () => {\n            handleLocationSelect(data);\n          });\n          newMarkers.push(marker);\n        }\n      });\n      setMarkers(newMarkers);\n      setMarkersAdded(true);\n      setProgress(prev => ({\n        ...prev,\n        geocode: 100\n      }));\n      setProgressMessages(prev => ({\n        ...prev,\n        geocode: 'Locations marked on the map.'\n      }));\n    }\n  }, [map, geoData, selectedLocation, handleLocationSelect]);\n\n  // Render Selected Markers\n  const renderSelectedMarkers = useCallback(() => {\n    if (map && selectedCity1 && selectedCity2) {\n      // Remove existing markers\n      markers.forEach(marker => marker.remove());\n      const newMarkers = [];\n      const selectedLocations = geoData.filter(item => item[locationColumn] === selectedCity1 || item[locationColumn] === selectedCity2);\n      const bounds = new mapboxgl.LngLatBounds();\n      selectedLocations.forEach(data => {\n        const latitude = parseFloat(data.latitude);\n        const longitude = parseFloat(data.longitude);\n        if (!isNaN(latitude) && !isNaN(longitude)) {\n          const el = document.createElement('div');\n          el.className = 'marker';\n          el.style.backgroundImage = `url(${blueMarkerIcon})`;\n          el.style.width = '30px';\n          el.style.height = '30px';\n          el.style.backgroundSize = 'contain';\n          el.style.cursor = 'pointer';\n          const marker = new mapboxgl.Marker(el).setLngLat([longitude, latitude]).addTo(map);\n\n          // Add a popup or label with the location name\n          const popup = new mapboxgl.Popup({\n            offset: 25\n          }).setText(data[locationColumn]);\n          marker.setPopup(popup);\n          bounds.extend([longitude, latitude]);\n          newMarkers.push(marker);\n        }\n      });\n      setMarkers(newMarkers);\n      setMarkersAdded(true);\n\n      // Adjust the map to fit the markers\n      if (!bounds.isEmpty()) {\n        map.fitBounds(bounds, {\n          padding: 50\n        });\n      }\n    }\n  }, [map, selectedCity1, selectedCity2, geoData, locationColumn, markers]);\n\n  // Re-render markers when selectedLocation changes to update marker colors\n  useEffect(() => {\n    if (markersAdded && dataNeedsGeocoding) {\n      renderMarkers();\n    }\n  }, [selectedLocation, renderMarkers, markersAdded, dataNeedsGeocoding]);\n\n  // Chart Options\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: chartType === 'Bar' ? {\n      y: {\n        beginAtZero: true,\n        min: 0.5,\n        max: 10\n      }\n    } : {},\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      datalabels: {\n        display: true,\n        color: '#000',\n        align: 'center',\n        // Align labels to the center of the bars\n        anchor: 'center',\n        formatter: function (value, context) {\n          const dataset = context.chart.data.datasets[context.datasetIndex];\n          if (dataset.actualValues) {\n            const actualValue = dataset.actualValues[context.dataIndex];\n            return actualValue.toFixed(2); // Display actual value\n          } else {\n            return value.toFixed(2);\n          }\n        }\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            const dataset = context.dataset;\n            if (dataset.actualValues) {\n              const actualValue = dataset.actualValues[context.dataIndex];\n              return `${context.label}: ${actualValue.toFixed(2)}`;\n            } else {\n              return `${context.label}: ${context.parsed.y}`;\n            }\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: styles.map\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.sidebar,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.combinedBox,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.progressContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.progressItem,\n            children: [/*#__PURE__*/_jsxDEV(CircularProgressbar, {\n              value: progress.upload,\n              text: `${Math.round(progress.upload)}%`,\n              styles: {\n                root: {\n                  width: '80px'\n                },\n                text: {\n                  fontSize: '10px'\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 619,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: styles.progressMessage,\n              children: progressMessages.upload\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 627,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 618,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.progressItem,\n            children: [/*#__PURE__*/_jsxDEV(CircularProgressbar, {\n              value: progress.preprocess,\n              text: `${Math.round(progress.preprocess)}%`,\n              styles: {\n                root: {\n                  width: '80px'\n                },\n                text: {\n                  fontSize: '10px'\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 630,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: styles.progressMessage,\n              children: progressMessages.preprocess\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 638,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 629,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.progressItem,\n            children: [/*#__PURE__*/_jsxDEV(CircularProgressbar, {\n              value: progress.geocode,\n              text: `${Math.round(progress.geocode)}%`,\n              styles: {\n                root: {\n                  width: '80px'\n                },\n                text: {\n                  fontSize: '10px'\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 641,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: styles.progressMessage,\n              children: progressMessages.geocode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 649,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 640,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.section,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            style: styles.sectionTitle,\n            children: \"Upload Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \".json, .csv\",\n            onChange: handleFileUpload,\n            style: styles.fileInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 656,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 654,\n          columnNumber: 11\n        }, this), geoData.length > 0 && !markersAdded && dataNeedsGeocoding && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.section,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: renderMarkers,\n            style: {\n              ...styles.chartButton,\n              backgroundColor: '#17a2b8',\n              width: '100%'\n            },\n            children: \"Mark Locations on Map\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 667,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.section,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            style: styles.sectionTitle,\n            children: \"Dataset Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 682,\n            columnNumber: 13\n          }, this), geoData.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.datasetDetails,\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Rows:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 686,\n                columnNumber: 19\n              }, this), \" \", totalRows]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 685,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Columns:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 689,\n                columnNumber: 19\n              }, this), \" \", totalColumns]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 688,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Numeric Columns:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 692,\n                columnNumber: 19\n              }, this), \" \", numericHeaders.join(', ')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 691,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"String Columns:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 695,\n                columnNumber: 19\n              }, this), \" \", stringHeaders.join(', ')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 694,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 684,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No dataset uploaded yet.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 699,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.section,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            style: styles.sectionTitle,\n            children: \"Compare Two Locations\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 705,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.inputGroup,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              style: styles.inputLabel,\n              children: \"Location 1:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 707,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedCity1,\n              onChange: e => setSelectedCity1(e.target.value),\n              style: styles.selectDropdown,\n              disabled: cityList.length === 0,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Location\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 714,\n                columnNumber: 17\n              }, this), cityList.map(city => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: city,\n                children: city\n              }, city, false, {\n                fileName: _jsxFileName,\n                lineNumber: 716,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 708,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 706,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.inputGroup,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              style: styles.inputLabel,\n              children: \"Location 2:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 723,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedCity2,\n              onChange: e => setSelectedCity2(e.target.value),\n              style: styles.selectDropdown,\n              disabled: cityList.length === 0,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Location\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 730,\n                columnNumber: 17\n              }, this), cityList.map(city => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: city,\n                children: city\n              }, city, false, {\n                fileName: _jsxFileName,\n                lineNumber: 732,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 724,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 722,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleCitySelection,\n            disabled: !selectedCity1 || !selectedCity2,\n            style: {\n              ...styles.chartButton,\n              backgroundColor: selectedCity1 && selectedCity2 ? '#28a745' : '#6c757d'\n            },\n            children: \"Compare\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 738,\n            columnNumber: 13\n          }, this), compareMarkersEnabled && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginTop: '10px'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: renderSelectedMarkers,\n              style: {\n                ...styles.chartButton,\n                backgroundColor: '#17a2b8',\n                width: '100%'\n              },\n              children: \"Mark on Map\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 753,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 752,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 704,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.section,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            style: styles.sectionTitle,\n            children: \"Select Chart Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 769,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.chartOptions,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setChartType('Bar'),\n              style: {\n                ...styles.chartButton,\n                ...(chartType === 'Bar' ? styles.chartButtonActive : {})\n              },\n              children: \"Bar Chart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 771,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setChartType('Pie'),\n              style: {\n                ...styles.chartButton,\n                ...(chartType === 'Pie' ? styles.chartButtonActive : {})\n              },\n              children: \"Pie Chart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 780,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setChartType('Doughnut'),\n              style: {\n                ...styles.chartButton,\n                ...(chartType === 'Doughnut' ? styles.chartButtonActive : {})\n              },\n              children: \"Doughnut Chart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 789,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setChartType('PolarArea'),\n              style: {\n                ...styles.chartButton,\n                ...(chartType === 'PolarArea' ? styles.chartButtonActive : {})\n              },\n              children: \"PolarArea Chart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 798,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 770,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 768,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 9\n      }, this), chartData && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.chartContainer,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.chartWrapper,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.chartContent,\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [chartType, \" Chart\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 816,\n              columnNumber: 17\n            }, this), chartType === 'Bar' && /*#__PURE__*/_jsxDEV(Bar, {\n              data: chartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 817,\n              columnNumber: 41\n            }, this), chartType === 'Pie' && /*#__PURE__*/_jsxDEV(Pie, {\n              data: chartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 818,\n              columnNumber: 41\n            }, this), chartType === 'Doughnut' && /*#__PURE__*/_jsxDEV(Doughnut, {\n              data: chartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 820,\n              columnNumber: 19\n            }, this), chartType === 'PolarArea' && /*#__PURE__*/_jsxDEV(PolarArea, {\n              data: chartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 823,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 815,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 814,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 813,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 613,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 608,\n    columnNumber: 5\n  }, this);\n};\n_s(MapView, \"iMctpPo4gCP3wIAa4NVKQK+HLfw=\");\n_c = MapView;\nexport default MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","mapboxgl","Papa","Bar","Pie","Doughnut","PolarArea","Chart","ChartJS","RadialLinearScale","CategoryScale","LinearScale","BarElement","ArcElement","Title","Tooltip","Legend","ChartDataLabels","CircularProgressbar","styles","preprocessData","MAPBOX_TOKEN","blueMarkerIcon","redMarkerIcon","jsxDEV","_jsxDEV","register","accessToken","MapView","_s","map","setMap","geoData","setGeoData","numericHeaders","setNumericHeaders","stringHeaders","setStringHeaders","selectedLocation","setSelectedLocation","chartType","setChartType","chartData","setChartData","totalRows","setTotalRows","totalColumns","setTotalColumns","markers","setMarkers","progress","setProgress","upload","preprocess","geocode","progressMessages","setProgressMessages","cityList","setCityList","selectedCity1","setSelectedCity1","selectedCity2","setSelectedCity2","locationColumn","setLocationColumn","markersAdded","setMarkersAdded","dataNeedsGeocoding","setDataNeedsGeocoding","compareMarkersEnabled","setCompareMarkersEnabled","initializeMap","Map","container","style","center","zoom","nav","NavigationControl","addControl","remove","handlePreprocess","rawData","possibleLocationColumns","detectedLocationColumn","find","col","hasOwnProperty","console","log","dataContainsLatLng","some","item","latitude","longitude","processedData","length","alert","headers","Object","keys","numeric","strings","forEach","header","includes","isNumeric","every","value","parseFloat","isNaN","push","uniqueLocations","Set","filter","Boolean","getLocationLabel","data","city","state","address","toFixed","handleFileUpload","event","file","target","files","fileExtension","name","split","pop","toLowerCase","reader","FileReader","onload","e","JSON","parse","result","prev","error","readAsText","skipEmptyLines","beforeFirstChunk","chunk","lines","trim","dataStartIndex","findIndex","line","startsWith","slice","join","complete","results","handleLocationSelect","locationData","locationID","handleCitySelection","data1","data2","aggregatedData1","aggregatedData2","values1","values2","avg1","reduce","a","b","avg2","dataMin","dataMax","Math","max","values","range","normalizedData1","normalizedData2","actualData1","actualData2","labels","dataSet","datasets","label","actualValues","backgroundColor","borderColor","borderWidth","generateChartData","locationValues","normalizedValues","normalizedValue","actualValue","renderMarkers","marker","newMarkers","el","document","createElement","className","isSelected","icon","backgroundImage","width","height","backgroundSize","cursor","Marker","setLngLat","addTo","getElement","addEventListener","renderSelectedMarkers","selectedLocations","bounds","LngLatBounds","popup","Popup","offset","setText","setPopup","extend","isEmpty","fitBounds","padding","chartOptions","responsive","maintainAspectRatio","scales","y","beginAtZero","min","plugins","legend","position","datalabels","display","color","align","anchor","formatter","context","dataset","chart","datasetIndex","dataIndex","tooltip","callbacks","parsed","children","id","fileName","_jsxFileName","lineNumber","columnNumber","sidebar","combinedBox","progressContainer","progressItem","text","round","root","fontSize","progressMessage","section","sectionTitle","type","accept","onChange","fileInput","onClick","chartButton","datasetDetails","inputGroup","inputLabel","selectDropdown","disabled","marginTop","chartButtonActive","chartContainer","chartWrapper","chartContent","options","_c","$RefreshReg$"],"sources":["/Users/girishkumarpatchikoru/Desktop/projecthci/geovizproject/frontend/src/components/MapView.js"],"sourcesContent":["// src/components/MapView.js\r\n\r\nimport React, { useEffect, useState, useCallback } from 'react';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport Papa from 'papaparse';\r\nimport { Bar, Pie, Doughnut, PolarArea } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  RadialLinearScale,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\nimport { CircularProgressbar } from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\n\r\nimport styles from './styles'; // Ensure this file exists and is properly configured\r\nimport preprocessData from './preprocessData'; // Ensure this file exists and is properly configured\r\nimport { MAPBOX_TOKEN } from './constants'; // Ensure this file exists and contains your Mapbox token\r\nimport blueMarkerIcon from '../assets/images/custom-marker-blue.png'; // Ensure these assets exist\r\nimport redMarkerIcon from '../assets/images/custom-marker-red.png';\r\nimport './marker.css'; // Ensure this CSS file exists for marker styling\r\n\r\n// Register Chart.js components\r\nChartJS.register(\r\n  RadialLinearScale,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  ChartDataLabels\r\n);\r\n\r\n// Set Mapbox access token\r\nmapboxgl.accessToken = MAPBOX_TOKEN;\r\n\r\nconst MapView = () => {\r\n  // State Variables\r\n  const [map, setMap] = useState(null);\r\n  const [geoData, setGeoData] = useState([]);\r\n  const [numericHeaders, setNumericHeaders] = useState([]);\r\n  const [stringHeaders, setStringHeaders] = useState([]);\r\n  const [selectedLocation, setSelectedLocation] = useState(null);\r\n  const [chartType, setChartType] = useState('Bar');\r\n  const [chartData, setChartData] = useState(null);\r\n  const [totalRows, setTotalRows] = useState(0);\r\n  const [totalColumns, setTotalColumns] = useState(0);\r\n  const [markers, setMarkers] = useState([]);\r\n  const [progress, setProgress] = useState({\r\n    upload: 0,\r\n    preprocess: 0,\r\n    geocode: 0,\r\n  });\r\n  const [progressMessages, setProgressMessages] = useState({\r\n    upload: '',\r\n    preprocess: '',\r\n    geocode: '',\r\n  });\r\n  const [cityList, setCityList] = useState([]);\r\n  const [selectedCity1, setSelectedCity1] = useState('');\r\n  const [selectedCity2, setSelectedCity2] = useState('');\r\n  const [locationColumn, setLocationColumn] = useState('');\r\n  const [markersAdded, setMarkersAdded] = useState(false);\r\n  const [dataNeedsGeocoding, setDataNeedsGeocoding] = useState(true);\r\n  const [compareMarkersEnabled, setCompareMarkersEnabled] = useState(false);\r\n\r\n  // Initialize Map\r\n  useEffect(() => {\r\n    const initializeMap = new mapboxgl.Map({\r\n      container: 'map', // HTML container id\r\n      style: 'mapbox://styles/mapbox/streets-v11', // style URL\r\n      center: [-98.5795, 39.8283], // starting position [lng, lat] (center of USA)\r\n      zoom: 3, // starting zoom\r\n    });\r\n\r\n    // Add navigation control (the +/- zoom buttons)\r\n    const nav = new mapboxgl.NavigationControl();\r\n    initializeMap.addControl(nav, 'top-right');\r\n\r\n    setMap(initializeMap);\r\n\r\n    // Clean up on unmount\r\n    return () => initializeMap.remove();\r\n  }, []);\r\n\r\n  // Preprocess Data Function\r\n  const handlePreprocess = useCallback(\r\n    async (rawData) => {\r\n      // Determine the location column dynamically\r\n      const possibleLocationColumns = [\r\n        'LocationDesc',\r\n        'LocationAbbr',\r\n        'state',\r\n        'State',\r\n        'city',\r\n        'City',\r\n        'Country',\r\n        'Country Name',\r\n        'Country Code',\r\n        'Address',\r\n        'Place',\r\n        'GeoLocation',\r\n        // Include more possible location columns if necessary\r\n      ];\r\n      let detectedLocationColumn = possibleLocationColumns.find(\r\n        (col) => rawData[0] && rawData[0].hasOwnProperty(col)\r\n      );\r\n\r\n      // If no location column is found, use 'locationID'\r\n      if (!detectedLocationColumn) {\r\n        detectedLocationColumn = 'locationID';\r\n      }\r\n\r\n      setLocationColumn(detectedLocationColumn);\r\n      console.log('Detected Location Column:', detectedLocationColumn);\r\n\r\n      // Check if data contains latitude and longitude\r\n      const dataContainsLatLng = rawData.some(\r\n        (item) => item.latitude && item.longitude\r\n      );\r\n\r\n      // Set dataNeedsGeocoding based on whether latitude and longitude are present\r\n      setDataNeedsGeocoding(!dataContainsLatLng);\r\n\r\n      // Preprocess data\r\n      const processedData = await preprocessData(\r\n        rawData,\r\n        setProgress,\r\n        detectedLocationColumn\r\n      );\r\n\r\n      if (!processedData || processedData.length === 0) {\r\n        alert('No valid data after preprocessing.');\r\n        return;\r\n      }\r\n\r\n      setGeoData(processedData);\r\n\r\n      // Identify numeric and string headers\r\n      if (processedData.length > 0) {\r\n        const headers = Object.keys(processedData[0]);\r\n        const numeric = [];\r\n        const strings = [];\r\n\r\n        headers.forEach((header) => {\r\n          if (\r\n            ['latitude', 'longitude', 'GeoLocation', 'locationID'].includes(header)\r\n          )\r\n            return;\r\n\r\n          const isNumeric = processedData.every((item) => {\r\n            const value = parseFloat(item[header]);\r\n            return !isNaN(value);\r\n          });\r\n          if (isNumeric) {\r\n            numeric.push(header);\r\n          } else {\r\n            strings.push(header);\r\n          }\r\n        });\r\n\r\n        setNumericHeaders(numeric);\r\n        setStringHeaders(strings);\r\n\r\n        setTotalRows(processedData.length);\r\n        setTotalColumns(headers.length);\r\n\r\n        // Extract unique locations for comparison\r\n        const uniqueLocations = [\r\n          ...new Set(\r\n            processedData.map((item) => item[detectedLocationColumn]).filter(Boolean)\r\n          ),\r\n        ];\r\n        setCityList(uniqueLocations);\r\n      } else {\r\n        alert('No data available after filtering.');\r\n      }\r\n\r\n      // Reset markersAdded state when new data is uploaded\r\n      setMarkersAdded(false);\r\n    },\r\n    []\r\n  );\r\n\r\n  // Generate a human-readable label for the location\r\n  const getLocationLabel = useCallback(\r\n    (data) => {\r\n      if (data[locationColumn]) return data[locationColumn];\r\n      if (data.city) return data.city;\r\n      if (data.state) return data.state;\r\n      if (data.address) return data.address;\r\n      return `Lat: ${parseFloat(data.latitude).toFixed(2)}, Lng: ${parseFloat(\r\n        data.longitude\r\n      ).toFixed(2)}`;\r\n    },\r\n    [locationColumn]\r\n  );\r\n\r\n  // Handle File Upload\r\n  const handleFileUpload = (event) => {\r\n    setProgress({\r\n      upload: 0,\r\n      preprocess: 0,\r\n      geocode: 0,\r\n    });\r\n    setProgressMessages({\r\n      upload: '',\r\n      preprocess: '',\r\n      geocode: '',\r\n    });\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      const fileExtension = file.name.split('.').pop().toLowerCase();\r\n\r\n      if (fileExtension === 'json') {\r\n        const reader = new FileReader();\r\n        reader.onload = async (e) => {\r\n          try {\r\n            const data = JSON.parse(e.target.result);\r\n            setProgress((prev) => ({ ...prev, upload: 100 }));\r\n            setProgressMessages((prev) => ({\r\n              ...prev,\r\n              upload: 'Dataset uploaded successfully.',\r\n            }));\r\n            await handlePreprocess(data);\r\n          } catch (error) {\r\n            console.error('Invalid JSON format:', error);\r\n            alert('Error: Uploaded file is not valid JSON.');\r\n          }\r\n        };\r\n        reader.readAsText(file);\r\n      } else if (fileExtension === 'csv') {\r\n        Papa.parse(file, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          beforeFirstChunk: (chunk) => {\r\n            // Handle datasets with metadata rows\r\n            const lines = chunk.trim().split('\\n');\r\n            const dataStartIndex = lines.findIndex(\r\n              (line) =>\r\n                line.startsWith('Country Name') ||\r\n                line.startsWith('state') ||\r\n                line.startsWith('RowId')\r\n            );\r\n            if (dataStartIndex > 0) {\r\n              return lines.slice(dataStartIndex).join('\\n');\r\n            }\r\n            return chunk;\r\n          },\r\n          complete: async (results) => {\r\n            setProgress((prev) => ({ ...prev, upload: 100 }));\r\n            setProgressMessages((prev) => ({\r\n              ...prev,\r\n              upload: 'Dataset uploaded successfully.',\r\n            }));\r\n            await handlePreprocess(results.data);\r\n          },\r\n          error: (error) => {\r\n            console.error('CSV parsing error:', error);\r\n            alert('Error: Failed to parse CSV file.');\r\n          },\r\n        });\r\n      } else {\r\n        alert('Please upload a valid JSON or CSV file.');\r\n      }\r\n    }\r\n  };\r\n\r\n  // Monitor Progress Updates\r\n  useEffect(() => {\r\n    if (progress.preprocess === 100) {\r\n      setProgressMessages((prev) => ({\r\n        ...prev,\r\n        preprocess: 'Preprocessing completed.',\r\n      }));\r\n    }\r\n  }, [progress.preprocess]);\r\n\r\n  useEffect(() => {\r\n    if (progress.geocode === 100) {\r\n      setProgressMessages((prev) => ({\r\n        ...prev,\r\n        geocode: 'Locations marked on the map.',\r\n      }));\r\n    }\r\n  }, [progress.geocode]);\r\n\r\n  // Handle Location Selection from Map\r\n  const handleLocationSelect = useCallback(\r\n    (locationData) => {\r\n      console.log('Marker clicked:', locationData); // Debugging statement\r\n      // Clear city selections if a map marker is selected\r\n      setSelectedCity1('');\r\n      setSelectedCity2('');\r\n      if (\r\n        selectedLocation &&\r\n        selectedLocation.locationID === locationData.locationID\r\n      ) {\r\n        setSelectedLocation(null); // Deselect\r\n        setChartData(null);\r\n      } else {\r\n        setSelectedLocation(locationData);\r\n        setChartData(null);\r\n      }\r\n    },\r\n    [selectedLocation]\r\n  );\r\n\r\n  // Handle Location Comparison Selection\r\n  const handleCitySelection = () => {\r\n    if (selectedCity1 && selectedCity2) {\r\n      const data1 = geoData.filter((item) => item[locationColumn] === selectedCity1);\r\n      const data2 = geoData.filter((item) => item[locationColumn] === selectedCity2);\r\n\r\n      if (data1.length === 0 || data2.length === 0) {\r\n        alert('One or both selected locations have no data.');\r\n        return;\r\n      }\r\n\r\n      // Aggregate data (e.g., average)\r\n      const aggregatedData1 = {};\r\n      const aggregatedData2 = {};\r\n\r\n      numericHeaders.forEach((header) => {\r\n        const values1 = data1.map((item) => parseFloat(item[header]) || 0);\r\n        const values2 = data2.map((item) => parseFloat(item[header]) || 0);\r\n\r\n        const avg1 = values1.reduce((a, b) => a + b, 0) / (values1.length || 1);\r\n        const avg2 = values2.reduce((a, b) => a + b, 0) / (values2.length || 1);\r\n\r\n        aggregatedData1[header] = avg1;\r\n        aggregatedData2[header] = avg2;\r\n      });\r\n\r\n      // Normalize data for chart display (0.5% to 10%)\r\n      const dataMin = 0; // Minimum data value\r\n      const dataMax = Math.max(\r\n        ...Object.values(aggregatedData1),\r\n        ...Object.values(aggregatedData2)\r\n      );\r\n      const range = dataMax - dataMin || 1; // Avoid division by zero\r\n\r\n      const normalizedData1 = {};\r\n      const normalizedData2 = {};\r\n      const actualData1 = {};\r\n      const actualData2 = {};\r\n\r\n      numericHeaders.forEach((header) => {\r\n        normalizedData1[header] =\r\n          ((aggregatedData1[header] - dataMin) / range) * 9.5 + 0.5;\r\n        normalizedData2[header] =\r\n          ((aggregatedData2[header] - dataMin) / range) * 9.5 + 0.5;\r\n        actualData1[header] = aggregatedData1[header];\r\n        actualData2[header] = aggregatedData2[header];\r\n      });\r\n\r\n      // Prepare chart data\r\n      const labels = numericHeaders;\r\n      const dataSet = {\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: selectedCity1,\r\n            data: numericHeaders.map((header) => normalizedData1[header]),\r\n            actualValues: numericHeaders.map((header) => actualData1[header]),\r\n            backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n            borderColor: 'rgba(255, 99, 132, 1)',\r\n            borderWidth: 1,\r\n          },\r\n          {\r\n            label: selectedCity2,\r\n            data: numericHeaders.map((header) => normalizedData2[header]),\r\n            actualValues: numericHeaders.map((header) => actualData2[header]),\r\n            backgroundColor: 'rgba(54, 162, 235, 0.5)',\r\n            borderColor: 'rgba(54, 162, 235, 1)',\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      };\r\n\r\n      setChartData(dataSet);\r\n      setSelectedLocation(null); // Deselect any single location\r\n\r\n      // Enable the \"Mark on Map\" button\r\n      setCompareMarkersEnabled(true);\r\n    }\r\n  };\r\n\r\n  // Generate Chart Data for Selected Location\r\n  const generateChartData = useCallback(() => {\r\n    if (selectedLocation) {\r\n      const locationValues = numericHeaders.map((header) => ({\r\n        label: header,\r\n        value: parseFloat(selectedLocation[header]) || 0,\r\n      }));\r\n\r\n      // Normalize data for chart display (0.5% to 10%)\r\n      const dataMin = 0; // Minimum data value\r\n      const dataMax = Math.max(...locationValues.map((item) => item.value));\r\n      const range = dataMax - dataMin || 1; // Avoid division by zero\r\n\r\n      const normalizedValues = locationValues.map((item) => ({\r\n        label: item.label,\r\n        normalizedValue: ((item.value - dataMin) / range) * 9.5 + 0.5,\r\n        actualValue: item.value, // Keep the actual value\r\n      }));\r\n\r\n      setChartData({\r\n        labels: normalizedValues.map((item) => item.label),\r\n        datasets: [\r\n          {\r\n            label: getLocationLabel(selectedLocation),\r\n            data: normalizedValues.map((item) => item.normalizedValue),\r\n            actualValues: normalizedValues.map((item) => item.actualValue), // Store actual values\r\n            backgroundColor: [\r\n              'rgba(255, 99, 132, 0.5)',\r\n              'rgba(54, 162, 235, 0.5)',\r\n              'rgba(255, 206, 86, 0.5)',\r\n              'rgba(75, 192, 192, 0.5)',\r\n              'rgba(153, 102, 255, 0.5)',\r\n              'rgba(255, 159, 64, 0.5)',\r\n            ],\r\n            borderColor: [\r\n              'rgba(255, 99, 132, 1)',\r\n              'rgba(54, 162, 235, 1)',\r\n              'rgba(255, 206, 86, 1)',\r\n              'rgba(75, 192, 192, 1)',\r\n              'rgba(153, 102, 255, 1)',\r\n              'rgba(255, 159, 64, 1)',\r\n            ],\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      });\r\n    }\r\n  }, [selectedLocation, numericHeaders, getLocationLabel]);\r\n\r\n  // Data Generation\r\n  useEffect(() => {\r\n    generateChartData();\r\n  }, [generateChartData, chartType]);\r\n\r\n  // Markers on Map\r\n  const renderMarkers = useCallback(() => {\r\n    if (map && geoData.length > 0) {\r\n      // Remove existing markers\r\n      markers.forEach((marker) => marker.remove());\r\n      const newMarkers = [];\r\n\r\n      geoData.forEach((data) => {\r\n        const latitude = parseFloat(data.latitude);\r\n        const longitude = parseFloat(data.longitude);\r\n\r\n        if (!isNaN(latitude) && !isNaN(longitude)) {\r\n          const el = document.createElement('div');\r\n          el.className = 'marker';\r\n          const isSelected = selectedLocation\r\n            ? selectedLocation.locationID === data.locationID\r\n            : false;\r\n          const icon = isSelected ? redMarkerIcon : blueMarkerIcon;\r\n          el.style.backgroundImage = `url(${icon})`;\r\n          el.style.width = '30px';\r\n          el.style.height = '30px';\r\n          el.style.backgroundSize = 'contain';\r\n          el.style.cursor = 'pointer';\r\n\r\n          const marker = new mapboxgl.Marker(el)\r\n            .setLngLat([longitude, latitude])\r\n            .addTo(map);\r\n\r\n          marker.getElement().addEventListener('click', () => {\r\n            handleLocationSelect(data);\r\n          });\r\n\r\n          newMarkers.push(marker);\r\n        }\r\n      });\r\n      setMarkers(newMarkers);\r\n      setMarkersAdded(true);\r\n\r\n      setProgress((prev) => ({ ...prev, geocode: 100 }));\r\n      setProgressMessages((prev) => ({\r\n        ...prev,\r\n        geocode: 'Locations marked on the map.',\r\n      }));\r\n    }\r\n  }, [map, geoData, selectedLocation, handleLocationSelect]);\r\n\r\n  // Render Selected Markers\r\n  const renderSelectedMarkers = useCallback(() => {\r\n    if (map && selectedCity1 && selectedCity2) {\r\n      // Remove existing markers\r\n      markers.forEach((marker) => marker.remove());\r\n      const newMarkers = [];\r\n\r\n      const selectedLocations = geoData.filter(\r\n        (item) =>\r\n          item[locationColumn] === selectedCity1 ||\r\n          item[locationColumn] === selectedCity2\r\n      );\r\n\r\n      const bounds = new mapboxgl.LngLatBounds();\r\n\r\n      selectedLocations.forEach((data) => {\r\n        const latitude = parseFloat(data.latitude);\r\n        const longitude = parseFloat(data.longitude);\r\n\r\n        if (!isNaN(latitude) && !isNaN(longitude)) {\r\n          const el = document.createElement('div');\r\n          el.className = 'marker';\r\n          el.style.backgroundImage = `url(${blueMarkerIcon})`;\r\n          el.style.width = '30px';\r\n          el.style.height = '30px';\r\n          el.style.backgroundSize = 'contain';\r\n          el.style.cursor = 'pointer';\r\n\r\n          const marker = new mapboxgl.Marker(el)\r\n            .setLngLat([longitude, latitude])\r\n            .addTo(map);\r\n\r\n          // Add a popup or label with the location name\r\n          const popup = new mapboxgl.Popup({ offset: 25 }).setText(\r\n            data[locationColumn]\r\n          );\r\n          marker.setPopup(popup);\r\n\r\n          bounds.extend([longitude, latitude]);\r\n\r\n          newMarkers.push(marker);\r\n        }\r\n      });\r\n\r\n      setMarkers(newMarkers);\r\n      setMarkersAdded(true);\r\n\r\n      // Adjust the map to fit the markers\r\n      if (!bounds.isEmpty()) {\r\n        map.fitBounds(bounds, { padding: 50 });\r\n      }\r\n    }\r\n  }, [map, selectedCity1, selectedCity2, geoData, locationColumn, markers]);\r\n\r\n  // Re-render markers when selectedLocation changes to update marker colors\r\n  useEffect(() => {\r\n    if (markersAdded && dataNeedsGeocoding) {\r\n      renderMarkers();\r\n    }\r\n  }, [selectedLocation, renderMarkers, markersAdded, dataNeedsGeocoding]);\r\n\r\n  // Chart Options\r\n  const chartOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    scales:\r\n      chartType === 'Bar'\r\n        ? {\r\n            y: {\r\n              beginAtZero: true,\r\n              min: 0.5,\r\n              max: 10,\r\n            },\r\n          }\r\n        : {},\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n      },\r\n      datalabels: {\r\n        display: true,\r\n        color: '#000',\r\n        align: 'center', // Align labels to the center of the bars\r\n        anchor: 'center',\r\n        formatter: function (value, context) {\r\n          const dataset = context.chart.data.datasets[context.datasetIndex];\r\n          if (dataset.actualValues) {\r\n            const actualValue = dataset.actualValues[context.dataIndex];\r\n            return actualValue.toFixed(2); // Display actual value\r\n          } else {\r\n            return value.toFixed(2);\r\n          }\r\n        },\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function (context) {\r\n            const dataset = context.dataset;\r\n            if (dataset.actualValues) {\r\n              const actualValue = dataset.actualValues[context.dataIndex];\r\n              return `${context.label}: ${actualValue.toFixed(2)}`;\r\n            } else {\r\n              return `${context.label}: ${context.parsed.y}`;\r\n            }\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      {/* Map Container */}\r\n      <div id=\"map\" style={styles.map}></div>\r\n\r\n      {/* Sidebar */}\r\n      <div style={styles.sidebar}>\r\n        {/* Combined Controls Box */}\r\n        <div style={styles.combinedBox}>\r\n          {/* Progress Indicators */}\r\n          <div style={styles.progressContainer}>\r\n            <div style={styles.progressItem}>\r\n              <CircularProgressbar\r\n                value={progress.upload}\r\n                text={`${Math.round(progress.upload)}%`}\r\n                styles={{\r\n                  root: { width: '80px' },\r\n                  text: { fontSize: '10px' },\r\n                }}\r\n              />\r\n              <div style={styles.progressMessage}>{progressMessages.upload}</div>\r\n            </div>\r\n            <div style={styles.progressItem}>\r\n              <CircularProgressbar\r\n                value={progress.preprocess}\r\n                text={`${Math.round(progress.preprocess)}%`}\r\n                styles={{\r\n                  root: { width: '80px' },\r\n                  text: { fontSize: '10px' },\r\n                }}\r\n              />\r\n              <div style={styles.progressMessage}>{progressMessages.preprocess}</div>\r\n            </div>\r\n            <div style={styles.progressItem}>\r\n              <CircularProgressbar\r\n                value={progress.geocode}\r\n                text={`${Math.round(progress.geocode)}%`}\r\n                styles={{\r\n                  root: { width: '80px' },\r\n                  text: { fontSize: '10px' },\r\n                }}\r\n              />\r\n              <div style={styles.progressMessage}>{progressMessages.geocode}</div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Upload Data Section */}\r\n          <div style={styles.section}>\r\n            <h3 style={styles.sectionTitle}>Upload Data</h3>\r\n            <input\r\n              type=\"file\"\r\n              accept=\".json, .csv\"\r\n              onChange={handleFileUpload}\r\n              style={styles.fileInput}\r\n            />\r\n          </div>\r\n\r\n          {/* Mark Locations Button */}\r\n          {geoData.length > 0 && !markersAdded && dataNeedsGeocoding && (\r\n            <div style={styles.section}>\r\n              <button\r\n                onClick={renderMarkers}\r\n                style={{\r\n                  ...styles.chartButton,\r\n                  backgroundColor: '#17a2b8',\r\n                  width: '100%',\r\n                }}\r\n              >\r\n                Mark Locations on Map\r\n              </button>\r\n            </div>\r\n          )}\r\n\r\n          {/* Dataset Details Section */}\r\n          <div style={styles.section}>\r\n            <h3 style={styles.sectionTitle}>Dataset Details</h3>\r\n            {geoData.length > 0 ? (\r\n              <div style={styles.datasetDetails}>\r\n                <p>\r\n                  <strong>Rows:</strong> {totalRows}\r\n                </p>\r\n                <p>\r\n                  <strong>Columns:</strong> {totalColumns}\r\n                </p>\r\n                <p>\r\n                  <strong>Numeric Columns:</strong> {numericHeaders.join(', ')}\r\n                </p>\r\n                <p>\r\n                  <strong>String Columns:</strong> {stringHeaders.join(', ')}\r\n                </p>\r\n              </div>\r\n            ) : (\r\n              <p>No dataset uploaded yet.</p>\r\n            )}\r\n          </div>\r\n\r\n          {/* Location Comparison Section */}\r\n          <div style={styles.section}>\r\n            <h3 style={styles.sectionTitle}>Compare Two Locations</h3>\r\n            <div style={styles.inputGroup}>\r\n              <label style={styles.inputLabel}>Location 1:</label>\r\n              <select\r\n                value={selectedCity1}\r\n                onChange={(e) => setSelectedCity1(e.target.value)}\r\n                style={styles.selectDropdown}\r\n                disabled={cityList.length === 0}\r\n              >\r\n                <option value=\"\">Select Location</option>\r\n                {cityList.map((city) => (\r\n                  <option key={city} value={city}>\r\n                    {city}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div style={styles.inputGroup}>\r\n              <label style={styles.inputLabel}>Location 2:</label>\r\n              <select\r\n                value={selectedCity2}\r\n                onChange={(e) => setSelectedCity2(e.target.value)}\r\n                style={styles.selectDropdown}\r\n                disabled={cityList.length === 0}\r\n              >\r\n                <option value=\"\">Select Location</option>\r\n                {cityList.map((city) => (\r\n                  <option key={city} value={city}>\r\n                    {city}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <button\r\n              onClick={handleCitySelection}\r\n              disabled={!selectedCity1 || !selectedCity2}\r\n              style={{\r\n                ...styles.chartButton,\r\n                backgroundColor:\r\n                  selectedCity1 && selectedCity2 ? '#28a745' : '#6c757d',\r\n              }}\r\n            >\r\n              Compare\r\n            </button>\r\n\r\n            {/* New Mark on Map Button */}\r\n            {compareMarkersEnabled && (\r\n              <div style={{ marginTop: '10px' }}>\r\n                <button\r\n                  onClick={renderSelectedMarkers}\r\n                  style={{\r\n                    ...styles.chartButton,\r\n                    backgroundColor: '#17a2b8',\r\n                    width: '100%',\r\n                  }}\r\n                >\r\n                  Mark on Map\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Chart Type Selection Section */}\r\n          <div style={styles.section}>\r\n            <h3 style={styles.sectionTitle}>Select Chart Type</h3>\r\n            <div style={styles.chartOptions}>\r\n              <button\r\n                onClick={() => setChartType('Bar')}\r\n                style={{\r\n                  ...styles.chartButton,\r\n                  ...(chartType === 'Bar' ? styles.chartButtonActive : {}),\r\n                }}\r\n              >\r\n                Bar Chart\r\n              </button>\r\n              <button\r\n                onClick={() => setChartType('Pie')}\r\n                style={{\r\n                  ...styles.chartButton,\r\n                  ...(chartType === 'Pie' ? styles.chartButtonActive : {}),\r\n                }}\r\n              >\r\n                Pie Chart\r\n              </button>\r\n              <button\r\n                onClick={() => setChartType('Doughnut')}\r\n                style={{\r\n                  ...styles.chartButton,\r\n                  ...(chartType === 'Doughnut' ? styles.chartButtonActive : {}),\r\n                }}\r\n              >\r\n                Doughnut Chart\r\n              </button>\r\n              <button\r\n                onClick={() => setChartType('PolarArea')}\r\n                style={{\r\n                  ...styles.chartButton,\r\n                  ...(chartType === 'PolarArea' ? styles.chartButtonActive : {}),\r\n                }}\r\n              >\r\n                PolarArea Chart\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Chart Display Section */}\r\n        {chartData && (\r\n          <div style={styles.chartContainer}>\r\n            <div style={styles.chartWrapper}>\r\n              <div style={styles.chartContent}>\r\n                <h3>{chartType} Chart</h3>\r\n                {chartType === 'Bar' && <Bar data={chartData} options={chartOptions} />}\r\n                {chartType === 'Pie' && <Pie data={chartData} options={chartOptions} />}\r\n                {chartType === 'Doughnut' && (\r\n                  <Doughnut data={chartData} options={chartOptions} />\r\n                )}\r\n                {chartType === 'PolarArea' && (\r\n                  <PolarArea data={chartData} options={chartOptions} />\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}