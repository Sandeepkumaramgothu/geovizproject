{"ast":null,"code":"var _jsxFileName = \"/Users/girishkumarpatchikoru/Desktop/projecthci/geovizproject/frontend/src/components/MapView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback, useRef } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport Papa from 'papaparse';\nimport { Bar, Pie, Doughnut, PolarArea } from 'react-chartjs-2';\nimport { Chart as ChartJS, RadialLinearScale, CategoryScale, LinearScale, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\nimport 'react-circular-progressbar/dist/styles.css';\nimport preprocessData from './preprocessData'; // Ensure this file exists and is properly configured\nimport { MAPBOX_TOKEN } from './constants'; // Ensure this file contains your Mapbox token\nimport blueMarkerIcon from '../assets/images/custom-marker-blue.png'; // Ensure these assets exist\nimport redMarkerIcon from '../assets/images/custom-marker-red.png';\nimport yellowMarkerIcon from '../assets/images/custom-marker-yellow.png'; // Add this icon for comparison markers\nimport './marker.css'; // Ensure this CSS file exists for marker styling\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(RadialLinearScale, CategoryScale, LinearScale, BarElement, ArcElement, Title, Tooltip, Legend, ChartDataLabels);\nmapboxgl.accessToken = MAPBOX_TOKEN;\nconst LoadingBar = ({\n  progress\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"w-full bg-gray-300 h-2 rounded\",\n  children: /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-full bg-green-500 rounded transition-all duration-300 ease-out\",\n    style: {\n      width: `${progress}%`\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 42,\n  columnNumber: 3\n}, this);\n_c = LoadingBar;\nconst MapView = () => {\n  _s();\n  // State Variables\n  const [map, setMap] = useState(null);\n  const [geoData, setGeoData] = useState([]);\n  const [numericHeaders, setNumericHeaders] = useState([]);\n  const [stringHeaders, setStringHeaders] = useState([]);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [chartType, setChartType] = useState('Bar');\n  const [chartData, setChartData] = useState(null);\n  const [totalRows, setTotalRows] = useState(0);\n  const [totalColumns, setTotalColumns] = useState(0);\n  const [markers, setMarkers] = useState([]);\n  const [progress, setProgress] = useState({\n    upload: 0,\n    preprocess: 0,\n    geocode: 0\n  });\n  const [progressMessages, setProgressMessages] = useState({\n    upload: '',\n    preprocess: '',\n    geocode: ''\n  });\n  const [stateList, setStateList] = useState([]);\n  const [selectedState1, setSelectedState1] = useState('');\n  const [selectedState2, setSelectedState2] = useState('');\n  const [locationColumn, setLocationColumn] = useState('');\n  const [markersAdded, setMarkersAdded] = useState(false);\n  const [dataNeedsGeocoding, setDataNeedsGeocoding] = useState(false);\n  const [compareMarkersEnabled, setCompareMarkersEnabled] = useState(false);\n  const [stateCoordinates, setStateCoordinates] = useState({});\n  const [globalMinMax, setGlobalMinMax] = useState({});\n  const mapContainerRef = useRef(null);\n\n  // Initialize Map on component mount\n  useEffect(() => {\n    const initializeMap = new mapboxgl.Map({\n      container: mapContainerRef.current,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [-98.5795, 39.8283],\n      zoom: 3\n    });\n    const nav = new mapboxgl.NavigationControl();\n    initializeMap.addControl(nav, 'top-right');\n    setMap(initializeMap);\n    return () => initializeMap.remove();\n  }, []);\n  // Reverse Geocode Function to get State Name\n  const reverseGeocodeState = useCallback(async (latitude, longitude) => {\n    try {\n      const response = await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${longitude},${latitude}.json?types=region&access_token=${MAPBOX_TOKEN}`);\n      const data = await response.json();\n      if (data.features && data.features.length > 0) {\n        return data.features[0].text.trim().toUpperCase();\n      } else {\n        return null;\n      }\n    } catch (error) {\n      console.error('Reverse geocoding error:', error);\n      return null;\n    }\n  }, []);\n\n  // Geocode Function to get coordinates from location name\n  const geocodeLocation = useCallback(async locationName => {\n    if (!locationName) return {\n      latitude: null,\n      longitude: null\n    };\n    try {\n      const response = await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(locationName)}.json?access_token=${MAPBOX_TOKEN}&limit=1`);\n      const data = await response.json();\n      if (data.features && data.features.length > 0) {\n        const [longitude, latitude] = data.features[0].center;\n        return {\n          latitude,\n          longitude\n        };\n      }\n      return {\n        latitude: null,\n        longitude: null\n      };\n    } catch (error) {\n      console.error('Geocoding error:', error);\n      return {\n        latitude: null,\n        longitude: null\n      };\n    }\n  }, []);\n\n  // Generate Chart Data for Selected Location\n  const generateChartData = useCallback(locationData => {\n    if (locationData) {\n      const locationValues = numericHeaders.map(header => ({\n        label: header,\n        value: parseFloat(locationData[header]) || 0\n      }));\n      const normalizedValues = locationValues.map(item => {\n        const {\n          min,\n          max\n        } = globalMinMax[item.label] || {\n          min: 0,\n          max: 1\n        };\n        const normalizedValue = max !== min ? (item.value - min) / (max - min) * 9.5 + 0.5 : 5;\n        return {\n          label: item.label,\n          normalizedValue: isFinite(normalizedValue) ? normalizedValue : 0.5,\n          actualValue: item.value\n        };\n      });\n      setChartData({\n        labels: normalizedValues.map(item => item.label),\n        datasets: [{\n          label: locationData.state,\n          data: normalizedValues.map(item => item.normalizedValue),\n          actualValues: normalizedValues.map(item => item.actualValue),\n          backgroundColor: ['rgba(255, 99, 132, 0.5)', 'rgba(54, 162, 235, 0.5)', 'rgba(255, 206, 86, 0.5)', 'rgba(75, 192, 192, 0.5)', 'rgba(153, 102, 255, 0.5)', 'rgba(255, 159, 64, 0.5)', 'rgba(255, 99, 132, 0.5)', 'rgba(54, 162, 235, 0.5)', 'rgba(255, 206, 86, 0.5)'],\n          borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)', 'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)'],\n          borderWidth: 1\n        }]\n      });\n    }\n  }, [numericHeaders, globalMinMax]);\n\n  // Handle Location Selection from Map\n  const handleLocationSelect = useCallback(locationData => {\n    console.log('Marker clicked:', locationData);\n    setSelectedState1('');\n    setSelectedState2('');\n    setCompareMarkersEnabled(false);\n\n    // If the clicked state is already selected, deselect it\n    if (selectedLocation && selectedLocation.state === locationData.state) {\n      setSelectedLocation(null);\n      setChartData(null);\n    } else {\n      // Select the clicked state and generate chart data for it\n      setSelectedLocation(locationData);\n      generateChartData(locationData);\n    }\n  }, [selectedLocation, generateChartData]);\n\n  // Data Generation\n  useEffect(() => {\n    if (selectedLocation) {\n      generateChartData(selectedLocation);\n    } else {\n      setChartData(null);\n    }\n    // We can safely omit generateChartData from dependencies because it doesn't change\n  }, [selectedLocation]);\n\n  // Preprocess Data Function\n  const handlePreprocess = useCallback(async rawData => {\n    setProgress(prev => ({\n      ...prev,\n      preprocess: 0\n    }));\n\n    // Remove null, undefined, and inconsistent data rows\n    const cleanRawData = rawData.filter(item => item !== null && item !== undefined && Object.keys(item).length > 0);\n\n    // Determine if data contains latitude and longitude\n    const dataContainsLatLng = cleanRawData.some(item => item.latitude && item.longitude);\n    setDataNeedsGeocoding(!dataContainsLatLng);\n\n    // Determine the location column dynamically (case-insensitive)\n    const possibleLocationColumns = ['state', 'province', 'city'];\n    let detectedLocationColumn = possibleLocationColumns.find(col => cleanRawData[0] && Object.keys(cleanRawData[0]).some(key => key.toLowerCase() === col.toLowerCase()));\n    setLocationColumn(detectedLocationColumn || '');\n    console.log('Detected Location Column:', detectedLocationColumn);\n    if (!detectedLocationColumn && !dataContainsLatLng) {\n      alert('No valid location column found in the dataset.');\n      return;\n    }\n\n    // Preprocess data\n    const processedData = await preprocessData(cleanRawData, setProgress);\n    console.log('Number of Data Points After Preprocessing:', processedData.length);\n    if (!processedData || processedData.length === 0) {\n      alert('No data available after filtering.');\n      return;\n    }\n    setProgress(prev => ({\n      ...prev,\n      preprocess: 50\n    }));\n\n    // Initialize state data aggregation\n    const stateDataMap = {};\n    const stateCoordsMap = {};\n    const numericFields = new Set();\n    if (detectedLocationColumn || dataContainsLatLng) {\n      for (const item of processedData) {\n        let stateName = '';\n        if (detectedLocationColumn) {\n          stateName = item[detectedLocationColumn];\n          if (detectedLocationColumn.toLowerCase().includes('city')) {\n            // If the location column is a city, we need to get the state name\n            const coords = await geocodeLocation(stateName);\n            if (coords.latitude && coords.longitude) {\n              stateName = await reverseGeocodeState(coords.latitude, coords.longitude);\n              if (!stateName) continue;\n            } else {\n              continue;\n            }\n          } else {\n            stateName = stateName.trim().toUpperCase();\n          }\n        } else if (dataContainsLatLng) {\n          const latitude = parseFloat(item.latitude);\n          const longitude = parseFloat(item.longitude);\n          if (!isNaN(latitude) && !isNaN(longitude)) {\n            stateName = await reverseGeocodeState(latitude, longitude);\n            if (stateName) {\n              stateName = stateName.trim().toUpperCase();\n            } else {\n              continue;\n            }\n          } else {\n            continue;\n          }\n        }\n        if (!stateName) continue;\n\n        // Aggregate data per state\n        if (!stateDataMap[stateName]) {\n          stateDataMap[stateName] = {\n            ...item\n          };\n          stateDataMap[stateName].state = stateName;\n          stateDataMap[stateName].count = 1;\n\n          // Store coordinates for the first occurrence\n          const latitude = parseFloat(item.latitude);\n          const longitude = parseFloat(item.longitude);\n          if (!isNaN(latitude) && !isNaN(longitude)) {\n            stateCoordsMap[stateName] = {\n              latitude,\n              longitude\n            };\n          }\n        } else {\n          // Sum numeric fields\n          Object.keys(item).forEach(key => {\n            if (key.toLowerCase() === 'state') return;\n            const value = parseFloat(item[key]);\n            if (!isNaN(value)) {\n              numericFields.add(key);\n              stateDataMap[stateName][key] = (stateDataMap[stateName][key] || 0) + value;\n            }\n          });\n          stateDataMap[stateName].count += 1;\n        }\n      }\n    }\n    setProgress(prev => ({\n      ...prev,\n      preprocess: 80\n    }));\n\n    // Calculate averages for numeric fields\n    const aggregatedData = Object.values(stateDataMap).map(item => {\n      const count = item.count || 1;\n      numericFields.forEach(key => {\n        const parsedValue = parseFloat(item[key]);\n        if (!isNaN(parsedValue)) {\n          item[key] = parsedValue / count;\n        } else {\n          item[key] = 0;\n        }\n      });\n      return item;\n    });\n    setGeoData(aggregatedData);\n    setStateCoordinates(stateCoordsMap);\n\n    // Identify numeric and string headers\n    if (aggregatedData.length > 0) {\n      const headers = Object.keys(aggregatedData[0]);\n      const numeric = [];\n      const strings = [];\n      headers.forEach(header => {\n        if (['latitude', 'longitude', 'GeoLocation', 'locationID', 'count', 'state'].includes(header)) return;\n        const isNumeric = aggregatedData.every(item => {\n          const value = parseFloat(item[header]);\n          return !isNaN(value);\n        });\n        if (isNumeric) {\n          numeric.push(header);\n        } else {\n          strings.push(header);\n        }\n      });\n\n      // Calculate global min and max for each numeric field BEFORE setting state\n      const globalMinMaxCalc = {};\n      numeric.forEach(header => {\n        const values = aggregatedData.map(item => parseFloat(item[header]));\n        globalMinMaxCalc[header] = {\n          min: Math.min(...values),\n          max: Math.max(...values)\n        };\n      });\n      setGlobalMinMax(globalMinMaxCalc);\n      setNumericHeaders(numeric);\n      setStringHeaders(strings);\n      setTotalRows(aggregatedData.length);\n      setTotalColumns(headers.length);\n\n      // Extract unique states for comparison\n      const uniqueStates = Object.keys(stateDataMap);\n      setStateList(uniqueStates);\n    } else {\n      alert('No data available after filtering.');\n    }\n    setProgress(prev => ({\n      ...prev,\n      preprocess: 100\n    }));\n\n    // Reset markersAdded state when new data is uploaded\n    setMarkersAdded(false);\n  }, [reverseGeocodeState, geocodeLocation, preprocessData]);\n\n  // Handle File Upload\n  const handleFileUpload = event => {\n    setProgress({\n      upload: 0,\n      preprocess: 0,\n      geocode: 0\n    });\n    setProgressMessages({\n      upload: '',\n      preprocess: '',\n      geocode: ''\n    });\n    const file = event.target.files[0];\n    if (file) {\n      const fileExtension = file.name.split('.').pop().toLowerCase();\n      if (fileExtension === 'json') {\n        const reader = new FileReader();\n        reader.onload = async e => {\n          try {\n            const data = JSON.parse(e.target.result);\n            setProgress(prev => ({\n              ...prev,\n              upload: 100\n            }));\n            setProgressMessages(prev => ({\n              ...prev,\n              upload: 'Dataset uploaded successfully.'\n            }));\n            await handlePreprocess(data);\n          } catch (error) {\n            console.error('Invalid JSON format:', error);\n            alert('Error: Uploaded file is not valid JSON.');\n          }\n        };\n        reader.readAsText(file);\n      } else if (fileExtension === 'csv') {\n        Papa.parse(file, {\n          header: true,\n          skipEmptyLines: true,\n          beforeFirstChunk: chunk => {\n            // Handle datasets with metadata rows\n            const lines = chunk.trim().split('\\n');\n            const dataStartIndex = lines.findIndex(line => line.toLowerCase().startsWith('country name') || line.toLowerCase().startsWith('state') || line.toLowerCase().startsWith('rowid') || line.toLowerCase().startsWith('longitude') || line.toLowerCase().startsWith('latitude'));\n            if (dataStartIndex > 0) {\n              return lines.slice(dataStartIndex).join('\\n');\n            }\n            return chunk;\n          },\n          complete: async results => {\n            setProgress(prev => ({\n              ...prev,\n              upload: 100\n            }));\n            setProgressMessages(prev => ({\n              ...prev,\n              upload: 'Dataset uploaded successfully.'\n            }));\n            await handlePreprocess(results.data);\n          },\n          error: error => {\n            console.error('CSV parsing error:', error);\n            alert('Error: Failed to parse CSV file.');\n          }\n        });\n      } else {\n        alert('Please upload a valid JSON or CSV file.');\n      }\n    }\n  };\n\n  // Monitor Progress Updates\n  useEffect(() => {\n    if (progress.preprocess === 100) {\n      setProgressMessages(prev => ({\n        ...prev,\n        preprocess: 'Preprocessing completed.'\n      }));\n    }\n  }, [progress.preprocess]);\n  useEffect(() => {\n    if (progress.geocode === 100) {\n      setProgressMessages(prev => ({\n        ...prev,\n        geocode: 'Locations marked on the map.'\n      }));\n    }\n  }, [progress.geocode]);\n\n  // Markers on Map\n  const renderMarkers = useCallback(() => {\n    if (map && geoData.length > 0) {\n      if (stateList.length === 0) {\n        alert('Data is not aggregated by state. Cannot mark locations on the map.');\n        return;\n      }\n\n      // Remove existing markers\n      markers.forEach(marker => marker.remove());\n      const newMarkers = [];\n      geoData.forEach(data => {\n        const stateName = data.state;\n        const coords = stateCoordinates[stateName];\n        if (!coords) return;\n        const latitude = parseFloat(coords.latitude);\n        const longitude = parseFloat(coords.longitude);\n        if (!isNaN(latitude) && !isNaN(longitude)) {\n          const el = document.createElement('div');\n          el.className = 'marker';\n          const isSelected = selectedLocation ? selectedLocation.state === data.state : false;\n          const isCompared = compareMarkersEnabled ? [selectedState1, selectedState2].includes(stateName) : false;\n          const icon = isSelected ? redMarkerIcon : isCompared ? yellowMarkerIcon : blueMarkerIcon;\n          el.style.backgroundImage = `url(${icon})`;\n          el.style.width = '30px';\n          el.style.height = '30px';\n          el.style.backgroundSize = 'contain';\n          el.style.cursor = 'pointer';\n          const marker = new mapboxgl.Marker(el).setLngLat([longitude, latitude]).addTo(map);\n\n          // Add popup with state name\n          const popup = new mapboxgl.Popup({\n            offset: 25\n          }).setText(stateName);\n          marker.setPopup(popup);\n          marker.getElement().addEventListener('click', () => {\n            handleLocationSelect(data);\n          });\n          newMarkers.push(marker);\n        }\n      });\n      setMarkers(newMarkers);\n      setMarkersAdded(true);\n      setProgress(prev => ({\n        ...prev,\n        geocode: 100\n      }));\n      setProgressMessages(prev => ({\n        ...prev,\n        geocode: 'Locations marked on the map.'\n      }));\n    }\n  }, [map, geoData, selectedLocation, stateCoordinates, markers, stateList, compareMarkersEnabled, selectedState1, selectedState2, handleLocationSelect]);\n\n  // Re-render markers when selectedLocation or comparison changes\n  useEffect(() => {\n    if (markersAdded) {\n      renderMarkers();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedLocation, compareMarkersEnabled]);\n\n  // Handle State Comparison Selection\n  const handleStateSelection = () => {\n    if (selectedState1 && selectedState2) {\n      const data1 = geoData.find(item => item.state === selectedState1);\n      const data2 = geoData.find(item => item.state === selectedState2);\n      if (!data1 || !data2) {\n        alert('One or both selected states have no data.');\n        return;\n      }\n      const labels = numericHeaders;\n      const dataset = {\n        labels,\n        datasets: [{\n          label: selectedState1,\n          data: numericHeaders.map(header => {\n            const value = data1[header] || 0;\n            const {\n              min,\n              max\n            } = globalMinMax[header] || {\n              min: 0,\n              max: 1\n            };\n            const normalizedValue = max !== min ? (value - min) / (max - min) * 9.5 + 0.5 : 5;\n            return isFinite(normalizedValue) ? normalizedValue : 0.5;\n          }),\n          actualValues: numericHeaders.map(header => data1[header] || 0),\n          backgroundColor: 'rgba(255, 99, 132, 0.5)',\n          borderColor: 'rgba(255, 99, 132, 1)',\n          borderWidth: 1\n        }, {\n          label: selectedState2,\n          data: numericHeaders.map(header => {\n            const value = data2[header] || 0;\n            const {\n              min,\n              max\n            } = globalMinMax[header] || {\n              min: 0,\n              max: 1\n            };\n            const normalizedValue = max !== min ? (value - min) / (max - min) * 9.5 + 0.5 : 5;\n            return isFinite(normalizedValue) ? normalizedValue : 0.5;\n          }),\n          actualValues: numericHeaders.map(header => data2[header] || 0),\n          backgroundColor: 'rgba(54, 162, 235, 0.5)',\n          borderColor: 'rgba(54, 162, 235, 1)',\n          borderWidth: 1\n        }]\n      };\n      setChartData(dataset);\n      setSelectedLocation(null);\n      setCompareMarkersEnabled(true);\n\n      // Render the markers for the selected states\n      renderMarkers();\n    }\n  };\n\n  // Chart Options\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: chartType === 'Bar' ? {\n      y: {\n        beginAtZero: true,\n        min: 0.5,\n        max: 10\n      }\n    } : {},\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      datalabels: {\n        display: true,\n        color: '#000',\n        align: 'center',\n        anchor: 'center',\n        formatter: function (value, context) {\n          const dataset = context.chart.data.datasets[context.datasetIndex];\n          if (dataset.actualValues) {\n            const actualValue = dataset.actualValues[context.dataIndex];\n            return isFinite(actualValue) ? actualValue.toFixed(2) : '';\n          } else {\n            return isFinite(value) ? value.toFixed(2) : '';\n          }\n        }\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            const dataset = context.dataset;\n            const actualValue = dataset.actualValues ? dataset.actualValues[context.dataIndex] : context.parsed.y;\n            return `${context.label}: ${actualValue.toFixed(2)}`;\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainerRef,\n      className: \"w-2/3 h-full\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 706,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-1/3 p-5 overflow-y-auto bg-gray-100 border-l border-gray-300\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4 p-3 bg-white rounded shadow\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-sm font-semibold mb-2 text-gray-800\",\n          children: \"Upload Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 712,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".json, .csv\",\n          onChange: handleFileUpload,\n          className: \"w-full p-2 border border-gray-300 rounded\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 713,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 711,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col gap-2 mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-2\",\n          children: [/*#__PURE__*/_jsxDEV(LoadingBar, {\n            progress: progress.upload\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 724,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center text-sm text-gray-600\",\n            children: progressMessages.upload\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 725,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 723,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-2\",\n          children: [/*#__PURE__*/_jsxDEV(LoadingBar, {\n            progress: progress.preprocess\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 728,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center text-sm text-gray-600\",\n            children: progressMessages.preprocess\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 729,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 727,\n          columnNumber: 11\n        }, this), dataNeedsGeocoding && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-2\",\n          children: [/*#__PURE__*/_jsxDEV(LoadingBar, {\n            progress: progress.geocode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 733,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center text-sm text-gray-600\",\n            children: progressMessages.geocode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 734,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 732,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 722,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4 p-3 bg-white rounded shadow\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-sm font-semibold mb-2 text-gray-800\",\n          children: \"Dataset Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 741,\n          columnNumber: 11\n        }, this), geoData.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm text-gray-700\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Rows:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 744,\n              columnNumber: 18\n            }, this), \" \", totalRows]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 744,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Columns:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 745,\n              columnNumber: 18\n            }, this), \" \", totalColumns]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 745,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Numeric Columns:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 746,\n              columnNumber: 18\n            }, this), \" \", numericHeaders.join(', ')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 746,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"String Columns:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 747,\n              columnNumber: 18\n            }, this), \" \", stringHeaders.join(', ')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 747,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 743,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-600\",\n          children: \"No dataset uploaded yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 750,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 740,\n        columnNumber: 9\n      }, this), stateList.length >= 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4 p-3 bg-white rounded shadow\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-sm font-semibold mb-2 text-gray-800\",\n          children: \"Compare Two States\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 757,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm text-gray-600 mb-1\",\n            children: \"State 1:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 759,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedState1,\n            onChange: e => setSelectedState1(e.target.value),\n            className: \"w-full p-2 border border-gray-300 rounded\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select State\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 765,\n              columnNumber: 17\n            }, this), stateList.map(state => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: state,\n              children: state\n            }, state, false, {\n              fileName: _jsxFileName,\n              lineNumber: 767,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 760,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 758,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm text-gray-600 mb-1\",\n            children: \"State 2:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 772,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedState2,\n            onChange: e => setSelectedState2(e.target.value),\n            className: \"w-full p-2 border border-gray-300 rounded\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select State\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 778,\n              columnNumber: 17\n            }, this), stateList.map(state => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: state,\n              children: state\n            }, state, false, {\n              fileName: _jsxFileName,\n              lineNumber: 780,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 773,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 771,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleStateSelection,\n          disabled: !selectedState1 || !selectedState2,\n          className: `w-full p-2 rounded text-white ${selectedState1 && selectedState2 ? 'bg-green-600' : 'bg-gray-500 cursor-not-allowed'}`,\n          children: \"Compare\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 784,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 756,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4 p-3 bg-white rounded shadow\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-sm font-semibold mb-2 text-gray-800\",\n          children: \"Select Chart Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 798,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-wrap gap-2\",\n          children: ['Bar', 'Pie', 'Doughnut', 'PolarArea'].map(type => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setChartType(type),\n            className: `flex-1 p-2 text-white rounded ${chartType === type ? 'bg-blue-600' : 'bg-gray-500'}`,\n            children: [type, \" Chart\"]\n          }, type, true, {\n            fileName: _jsxFileName,\n            lineNumber: 801,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 799,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 797,\n        columnNumber: 9\n      }, this), chartData && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-6\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative w-full h-80\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-center text-lg mb-2\",\n            children: [chartType, \" Chart\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 818,\n            columnNumber: 15\n          }, this), chartType === 'Bar' && /*#__PURE__*/_jsxDEV(Bar, {\n            data: chartData,\n            options: chartOptions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 819,\n            columnNumber: 39\n          }, this), chartType === 'Pie' && /*#__PURE__*/_jsxDEV(Pie, {\n            data: chartData,\n            options: chartOptions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 820,\n            columnNumber: 39\n          }, this), chartType === 'Doughnut' && /*#__PURE__*/_jsxDEV(Doughnut, {\n            data: chartData,\n            options: chartOptions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 821,\n            columnNumber: 44\n          }, this), chartType === 'PolarArea' && /*#__PURE__*/_jsxDEV(PolarArea, {\n            data: chartData,\n            options: chartOptions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 822,\n            columnNumber: 45\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 817,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 816,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 709,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 704,\n    columnNumber: 5\n  }, this);\n};\n_s(MapView, \"5Mtg+u9FqPgy2ZTs521xOLAKY7M=\");\n_c2 = MapView;\nexport default MapView;\nvar _c, _c2;\n$RefreshReg$(_c, \"LoadingBar\");\n$RefreshReg$(_c2, \"MapView\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","mapboxgl","Papa","Bar","Pie","Doughnut","PolarArea","Chart","ChartJS","RadialLinearScale","CategoryScale","LinearScale","BarElement","ArcElement","Title","Tooltip","Legend","ChartDataLabels","preprocessData","MAPBOX_TOKEN","blueMarkerIcon","redMarkerIcon","yellowMarkerIcon","jsxDEV","_jsxDEV","register","accessToken","LoadingBar","progress","className","children","style","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","MapView","_s","map","setMap","geoData","setGeoData","numericHeaders","setNumericHeaders","stringHeaders","setStringHeaders","selectedLocation","setSelectedLocation","chartType","setChartType","chartData","setChartData","totalRows","setTotalRows","totalColumns","setTotalColumns","markers","setMarkers","setProgress","upload","preprocess","geocode","progressMessages","setProgressMessages","stateList","setStateList","selectedState1","setSelectedState1","selectedState2","setSelectedState2","locationColumn","setLocationColumn","markersAdded","setMarkersAdded","dataNeedsGeocoding","setDataNeedsGeocoding","compareMarkersEnabled","setCompareMarkersEnabled","stateCoordinates","setStateCoordinates","globalMinMax","setGlobalMinMax","mapContainerRef","initializeMap","Map","container","current","center","zoom","nav","NavigationControl","addControl","remove","reverseGeocodeState","latitude","longitude","response","fetch","data","json","features","length","text","trim","toUpperCase","error","console","geocodeLocation","locationName","encodeURIComponent","generateChartData","locationData","locationValues","header","label","value","parseFloat","normalizedValues","item","min","max","normalizedValue","isFinite","actualValue","labels","datasets","state","actualValues","backgroundColor","borderColor","borderWidth","handleLocationSelect","log","handlePreprocess","rawData","prev","cleanRawData","filter","undefined","Object","keys","dataContainsLatLng","some","possibleLocationColumns","detectedLocationColumn","find","col","key","toLowerCase","alert","processedData","stateDataMap","stateCoordsMap","numericFields","Set","stateName","includes","coords","isNaN","count","forEach","add","aggregatedData","values","parsedValue","headers","numeric","strings","isNumeric","every","push","globalMinMaxCalc","Math","uniqueStates","handleFileUpload","event","file","target","files","fileExtension","name","split","pop","reader","FileReader","onload","e","JSON","parse","result","readAsText","skipEmptyLines","beforeFirstChunk","chunk","lines","dataStartIndex","findIndex","line","startsWith","slice","join","complete","results","renderMarkers","marker","newMarkers","el","document","createElement","isSelected","isCompared","icon","backgroundImage","height","backgroundSize","cursor","Marker","setLngLat","addTo","popup","Popup","offset","setText","setPopup","getElement","addEventListener","handleStateSelection","data1","data2","dataset","chartOptions","responsive","maintainAspectRatio","scales","y","beginAtZero","plugins","legend","position","datalabels","display","color","align","anchor","formatter","context","chart","datasetIndex","dataIndex","toFixed","tooltip","callbacks","parsed","ref","type","accept","onChange","onClick","disabled","options","_c2","$RefreshReg$"],"sources":["/Users/girishkumarpatchikoru/Desktop/projecthci/geovizproject/frontend/src/components/MapView.js"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef } from 'react';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport Papa from 'papaparse';\r\nimport { Bar, Pie, Doughnut, PolarArea } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  RadialLinearScale,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\n\r\nimport preprocessData from './preprocessData'; // Ensure this file exists and is properly configured\r\nimport { MAPBOX_TOKEN } from './constants'; // Ensure this file contains your Mapbox token\r\nimport blueMarkerIcon from '../assets/images/custom-marker-blue.png'; // Ensure these assets exist\r\nimport redMarkerIcon from '../assets/images/custom-marker-red.png';\r\nimport yellowMarkerIcon from '../assets/images/custom-marker-yellow.png'; // Add this icon for comparison markers\r\nimport './marker.css'; // Ensure this CSS file exists for marker styling\r\n\r\n// Register Chart.js components\r\nChartJS.register(\r\n  RadialLinearScale,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  ChartDataLabels\r\n);\r\n\r\nmapboxgl.accessToken = MAPBOX_TOKEN;\r\n\r\nconst LoadingBar = ({ progress }) => (\r\n  <div className=\"w-full bg-gray-300 h-2 rounded\">\r\n    <div\r\n      className=\"h-full bg-green-500 rounded transition-all duration-300 ease-out\"\r\n      style={{ width: `${progress}%` }}\r\n    ></div>\r\n  </div>\r\n);\r\n\r\nconst MapView = () => {\r\n  // State Variables\r\n  const [map, setMap] = useState(null);\r\n  const [geoData, setGeoData] = useState([]);\r\n  const [numericHeaders, setNumericHeaders] = useState([]);\r\n  const [stringHeaders, setStringHeaders] = useState([]);\r\n  const [selectedLocation, setSelectedLocation] = useState(null);\r\n  const [chartType, setChartType] = useState('Bar');\r\n  const [chartData, setChartData] = useState(null);\r\n  const [totalRows, setTotalRows] = useState(0);\r\n  const [totalColumns, setTotalColumns] = useState(0);\r\n  const [markers, setMarkers] = useState([]);\r\n  const [progress, setProgress] = useState({\r\n    upload: 0,\r\n    preprocess: 0,\r\n    geocode: 0,\r\n  });\r\n  const [progressMessages, setProgressMessages] = useState({\r\n    upload: '',\r\n    preprocess: '',\r\n    geocode: '',\r\n  });\r\n  const [stateList, setStateList] = useState([]);\r\n  const [selectedState1, setSelectedState1] = useState('');\r\n  const [selectedState2, setSelectedState2] = useState('');\r\n  const [locationColumn, setLocationColumn] = useState('');\r\n  const [markersAdded, setMarkersAdded] = useState(false);\r\n  const [dataNeedsGeocoding, setDataNeedsGeocoding] = useState(false);\r\n  const [compareMarkersEnabled, setCompareMarkersEnabled] = useState(false);\r\n  const [stateCoordinates, setStateCoordinates] = useState({});\r\n  const [globalMinMax, setGlobalMinMax] = useState({});\r\n  const mapContainerRef = useRef(null);\r\n\r\n  // Initialize Map on component mount\r\n  useEffect(() => {\r\n    const initializeMap = new mapboxgl.Map({\r\n      container: mapContainerRef.current,\r\n      style: 'mapbox://styles/mapbox/streets-v11',\r\n      center: [-98.5795, 39.8283],\r\n      zoom: 3,\r\n    });\r\n\r\n    const nav = new mapboxgl.NavigationControl();\r\n    initializeMap.addControl(nav, 'top-right');\r\n\r\n    setMap(initializeMap);\r\n\r\n    return () => initializeMap.remove();\r\n  }, []);\r\n  // Reverse Geocode Function to get State Name\r\n  const reverseGeocodeState = useCallback(async (latitude, longitude) => {\r\n    try {\r\n      const response = await fetch(\r\n        `https://api.mapbox.com/geocoding/v5/mapbox.places/${longitude},${latitude}.json?types=region&access_token=${MAPBOX_TOKEN}`\r\n      );\r\n      const data = await response.json();\r\n      if (data.features && data.features.length > 0) {\r\n        return data.features[0].text.trim().toUpperCase();\r\n      } else {\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Reverse geocoding error:', error);\r\n      return null;\r\n    }\r\n  }, []);\r\n\r\n  // Geocode Function to get coordinates from location name\r\n  const geocodeLocation = useCallback(async (locationName) => {\r\n    if (!locationName) return { latitude: null, longitude: null };\r\n    try {\r\n      const response = await fetch(\r\n        `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(\r\n          locationName\r\n        )}.json?access_token=${MAPBOX_TOKEN}&limit=1`\r\n      );\r\n      const data = await response.json();\r\n      if (data.features && data.features.length > 0) {\r\n        const [longitude, latitude] = data.features[0].center;\r\n        return { latitude, longitude };\r\n      }\r\n      return { latitude: null, longitude: null };\r\n    } catch (error) {\r\n      console.error('Geocoding error:', error);\r\n      return { latitude: null, longitude: null };\r\n    }\r\n  }, []);\r\n\r\n  // Generate Chart Data for Selected Location\r\n  const generateChartData = useCallback(\r\n    (locationData) => {\r\n      if (locationData) {\r\n        const locationValues = numericHeaders.map((header) => ({\r\n          label: header,\r\n          value: parseFloat(locationData[header]) || 0,\r\n        }));\r\n\r\n        const normalizedValues = locationValues.map((item) => {\r\n          const { min, max } = globalMinMax[item.label] || { min: 0, max: 1 };\r\n          const normalizedValue =\r\n            max !== min ? ((item.value - min) / (max - min)) * 9.5 + 0.5 : 5;\r\n          return {\r\n            label: item.label,\r\n            normalizedValue: isFinite(normalizedValue) ? normalizedValue : 0.5,\r\n            actualValue: item.value,\r\n          };\r\n        });\r\n\r\n        setChartData({\r\n          labels: normalizedValues.map((item) => item.label),\r\n          datasets: [\r\n            {\r\n              label: locationData.state,\r\n              data: normalizedValues.map((item) => item.normalizedValue),\r\n              actualValues: normalizedValues.map((item) => item.actualValue),\r\n              backgroundColor: [\r\n                'rgba(255, 99, 132, 0.5)',\r\n                'rgba(54, 162, 235, 0.5)',\r\n                'rgba(255, 206, 86, 0.5)',\r\n                'rgba(75, 192, 192, 0.5)',\r\n                'rgba(153, 102, 255, 0.5)',\r\n                'rgba(255, 159, 64, 0.5)',\r\n                'rgba(255, 99, 132, 0.5)',\r\n                'rgba(54, 162, 235, 0.5)',\r\n                'rgba(255, 206, 86, 0.5)',\r\n              ],\r\n              borderColor: [\r\n                'rgba(255, 99, 132, 1)',\r\n                'rgba(54, 162, 235, 1)',\r\n                'rgba(255, 206, 86, 1)',\r\n                'rgba(75, 192, 192, 1)',\r\n                'rgba(153, 102, 255, 1)',\r\n                'rgba(255, 159, 64, 1)',\r\n                'rgba(255, 99, 132, 1)',\r\n                'rgba(54, 162, 235, 1)',\r\n                'rgba(255, 206, 86, 1)',\r\n              ],\r\n              borderWidth: 1,\r\n            },\r\n          ],\r\n        });\r\n      }\r\n    },\r\n    [numericHeaders, globalMinMax]\r\n  );\r\n\r\n  // Handle Location Selection from Map\r\n  const handleLocationSelect = useCallback(\r\n    (locationData) => {\r\n      console.log('Marker clicked:', locationData);\r\n\r\n      setSelectedState1('');\r\n      setSelectedState2('');\r\n      setCompareMarkersEnabled(false);\r\n\r\n      // If the clicked state is already selected, deselect it\r\n      if (selectedLocation && selectedLocation.state === locationData.state) {\r\n        setSelectedLocation(null);\r\n        setChartData(null);\r\n      } else {\r\n        // Select the clicked state and generate chart data for it\r\n        setSelectedLocation(locationData);\r\n        generateChartData(locationData);\r\n      }\r\n    },\r\n    [selectedLocation, generateChartData]\r\n  );\r\n\r\n  // Data Generation\r\n  useEffect(() => {\r\n    if (selectedLocation) {\r\n      generateChartData(selectedLocation);\r\n    } else {\r\n      setChartData(null);\r\n    }\r\n    // We can safely omit generateChartData from dependencies because it doesn't change\r\n  }, [selectedLocation]);\r\n\r\n  // Preprocess Data Function\r\n  const handlePreprocess = useCallback(\r\n    async (rawData) => {\r\n      setProgress((prev) => ({ ...prev, preprocess: 0 }));\r\n\r\n      // Remove null, undefined, and inconsistent data rows\r\n      const cleanRawData = rawData.filter(\r\n        (item) => item !== null && item !== undefined && Object.keys(item).length > 0\r\n      );\r\n\r\n      // Determine if data contains latitude and longitude\r\n      const dataContainsLatLng = cleanRawData.some(\r\n        (item) => item.latitude && item.longitude\r\n      );\r\n\r\n      setDataNeedsGeocoding(!dataContainsLatLng);\r\n\r\n      // Determine the location column dynamically (case-insensitive)\r\n      const possibleLocationColumns = ['state', 'province', 'city'];\r\n      let detectedLocationColumn = possibleLocationColumns.find((col) =>\r\n        cleanRawData[0] &&\r\n        Object.keys(cleanRawData[0]).some((key) => key.toLowerCase() === col.toLowerCase())\r\n      );\r\n\r\n      setLocationColumn(detectedLocationColumn || '');\r\n\r\n      console.log('Detected Location Column:', detectedLocationColumn);\r\n\r\n      if (!detectedLocationColumn && !dataContainsLatLng) {\r\n        alert('No valid location column found in the dataset.');\r\n        return;\r\n      }\r\n\r\n      // Preprocess data\r\n      const processedData = await preprocessData(\r\n        cleanRawData,\r\n        setProgress\r\n      );\r\n\r\n      console.log('Number of Data Points After Preprocessing:', processedData.length);\r\n\r\n      if (!processedData || processedData.length === 0) {\r\n        alert('No data available after filtering.');\r\n        return;\r\n      }\r\n\r\n      setProgress((prev) => ({ ...prev, preprocess: 50 }));\r\n\r\n      // Initialize state data aggregation\r\n      const stateDataMap = {};\r\n      const stateCoordsMap = {};\r\n      const numericFields = new Set();\r\n\r\n      if (detectedLocationColumn || dataContainsLatLng) {\r\n        for (const item of processedData) {\r\n          let stateName = '';\r\n\r\n          if (detectedLocationColumn) {\r\n            stateName = item[detectedLocationColumn];\r\n            if (detectedLocationColumn.toLowerCase().includes('city')) {\r\n              // If the location column is a city, we need to get the state name\r\n              const coords = await geocodeLocation(stateName);\r\n              if (coords.latitude && coords.longitude) {\r\n                stateName = await reverseGeocodeState(coords.latitude, coords.longitude);\r\n                if (!stateName) continue;\r\n              } else {\r\n                continue;\r\n              }\r\n            } else {\r\n              stateName = stateName.trim().toUpperCase();\r\n            }\r\n          } else if (dataContainsLatLng) {\r\n            const latitude = parseFloat(item.latitude);\r\n            const longitude = parseFloat(item.longitude);\r\n            if (!isNaN(latitude) && !isNaN(longitude)) {\r\n              stateName = await reverseGeocodeState(latitude, longitude);\r\n              if (stateName) {\r\n                stateName = stateName.trim().toUpperCase();\r\n              } else {\r\n                continue;\r\n              }\r\n            } else {\r\n              continue;\r\n            }\r\n          }\r\n\r\n          if (!stateName) continue;\r\n\r\n          // Aggregate data per state\r\n          if (!stateDataMap[stateName]) {\r\n            stateDataMap[stateName] = { ...item };\r\n            stateDataMap[stateName].state = stateName;\r\n            stateDataMap[stateName].count = 1;\r\n\r\n            // Store coordinates for the first occurrence\r\n            const latitude = parseFloat(item.latitude);\r\n            const longitude = parseFloat(item.longitude);\r\n            if (!isNaN(latitude) && !isNaN(longitude)) {\r\n              stateCoordsMap[stateName] = { latitude, longitude };\r\n            }\r\n          } else {\r\n            // Sum numeric fields\r\n            Object.keys(item).forEach((key) => {\r\n              if (key.toLowerCase() === 'state') return;\r\n              const value = parseFloat(item[key]);\r\n              if (!isNaN(value)) {\r\n                numericFields.add(key);\r\n                stateDataMap[stateName][key] =\r\n                  (stateDataMap[stateName][key] || 0) + value;\r\n              }\r\n            });\r\n            stateDataMap[stateName].count += 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      setProgress((prev) => ({ ...prev, preprocess: 80 }));\r\n\r\n      // Calculate averages for numeric fields\r\n      const aggregatedData = Object.values(stateDataMap).map((item) => {\r\n        const count = item.count || 1;\r\n        numericFields.forEach((key) => {\r\n          const parsedValue = parseFloat(item[key]);\r\n          if (!isNaN(parsedValue)) {\r\n            item[key] = parsedValue / count;\r\n          } else {\r\n            item[key] = 0;\r\n          }\r\n        });\r\n        return item;\r\n      });\r\n\r\n      setGeoData(aggregatedData);\r\n      setStateCoordinates(stateCoordsMap);\r\n\r\n      // Identify numeric and string headers\r\n      if (aggregatedData.length > 0) {\r\n        const headers = Object.keys(aggregatedData[0]);\r\n        const numeric = [];\r\n        const strings = [];\r\n\r\n        headers.forEach((header) => {\r\n          if (\r\n            [\r\n              'latitude',\r\n              'longitude',\r\n              'GeoLocation',\r\n              'locationID',\r\n              'count',\r\n              'state',\r\n            ].includes(header)\r\n          )\r\n            return;\r\n\r\n          const isNumeric = aggregatedData.every((item) => {\r\n            const value = parseFloat(item[header]);\r\n            return !isNaN(value);\r\n          });\r\n          if (isNumeric) {\r\n            numeric.push(header);\r\n          } else {\r\n            strings.push(header);\r\n          }\r\n        });\r\n\r\n        // Calculate global min and max for each numeric field BEFORE setting state\r\n        const globalMinMaxCalc = {};\r\n        numeric.forEach((header) => {\r\n          const values = aggregatedData.map((item) => parseFloat(item[header]));\r\n          globalMinMaxCalc[header] = {\r\n            min: Math.min(...values),\r\n            max: Math.max(...values),\r\n          };\r\n        });\r\n        setGlobalMinMax(globalMinMaxCalc);\r\n\r\n        setNumericHeaders(numeric);\r\n        setStringHeaders(strings);\r\n\r\n        setTotalRows(aggregatedData.length);\r\n        setTotalColumns(headers.length);\r\n\r\n        // Extract unique states for comparison\r\n        const uniqueStates = Object.keys(stateDataMap);\r\n        setStateList(uniqueStates);\r\n      } else {\r\n        alert('No data available after filtering.');\r\n      }\r\n\r\n      setProgress((prev) => ({ ...prev, preprocess: 100 }));\r\n\r\n      // Reset markersAdded state when new data is uploaded\r\n      setMarkersAdded(false);\r\n    },\r\n    [reverseGeocodeState, geocodeLocation, preprocessData]\r\n  );\r\n\r\n  // Handle File Upload\r\n  const handleFileUpload = (event) => {\r\n    setProgress({\r\n      upload: 0,\r\n      preprocess: 0,\r\n      geocode: 0,\r\n    });\r\n    setProgressMessages({\r\n      upload: '',\r\n      preprocess: '',\r\n      geocode: '',\r\n    });\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      const fileExtension = file.name.split('.').pop().toLowerCase();\r\n\r\n      if (fileExtension === 'json') {\r\n        const reader = new FileReader();\r\n        reader.onload = async (e) => {\r\n          try {\r\n            const data = JSON.parse(e.target.result);\r\n            setProgress((prev) => ({ ...prev, upload: 100 }));\r\n            setProgressMessages((prev) => ({\r\n              ...prev,\r\n              upload: 'Dataset uploaded successfully.',\r\n            }));\r\n            await handlePreprocess(data);\r\n          } catch (error) {\r\n            console.error('Invalid JSON format:', error);\r\n            alert('Error: Uploaded file is not valid JSON.');\r\n          }\r\n        };\r\n        reader.readAsText(file);\r\n      } else if (fileExtension === 'csv') {\r\n        Papa.parse(file, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          beforeFirstChunk: (chunk) => {\r\n            // Handle datasets with metadata rows\r\n            const lines = chunk.trim().split('\\n');\r\n            const dataStartIndex = lines.findIndex(\r\n              (line) =>\r\n                line.toLowerCase().startsWith('country name') ||\r\n                line.toLowerCase().startsWith('state') ||\r\n                line.toLowerCase().startsWith('rowid') ||\r\n                line.toLowerCase().startsWith('longitude') ||\r\n                line.toLowerCase().startsWith('latitude')\r\n            );\r\n            if (dataStartIndex > 0) {\r\n              return lines.slice(dataStartIndex).join('\\n');\r\n            }\r\n            return chunk;\r\n          },\r\n          complete: async (results) => {\r\n            setProgress((prev) => ({ ...prev, upload: 100 }));\r\n            setProgressMessages((prev) => ({\r\n              ...prev,\r\n              upload: 'Dataset uploaded successfully.',\r\n            }));\r\n            await handlePreprocess(results.data);\r\n          },\r\n          error: (error) => {\r\n            console.error('CSV parsing error:', error);\r\n            alert('Error: Failed to parse CSV file.');\r\n          },\r\n        });\r\n      } else {\r\n        alert('Please upload a valid JSON or CSV file.');\r\n      }\r\n    }\r\n  };\r\n\r\n  // Monitor Progress Updates\r\n  useEffect(() => {\r\n    if (progress.preprocess === 100) {\r\n      setProgressMessages((prev) => ({\r\n        ...prev,\r\n        preprocess: 'Preprocessing completed.',\r\n      }));\r\n    }\r\n  }, [progress.preprocess]);\r\n\r\n  useEffect(() => {\r\n    if (progress.geocode === 100) {\r\n      setProgressMessages((prev) => ({\r\n        ...prev,\r\n        geocode: 'Locations marked on the map.',\r\n      }));\r\n    }\r\n  }, [progress.geocode]);\r\n\r\n  // Markers on Map\r\n  const renderMarkers = useCallback(() => {\r\n    if (map && geoData.length > 0) {\r\n      if (stateList.length === 0) {\r\n        alert('Data is not aggregated by state. Cannot mark locations on the map.');\r\n        return;\r\n      }\r\n\r\n      // Remove existing markers\r\n      markers.forEach((marker) => marker.remove());\r\n      const newMarkers = [];\r\n\r\n      geoData.forEach((data) => {\r\n        const stateName = data.state;\r\n        const coords = stateCoordinates[stateName];\r\n        if (!coords) return;\r\n\r\n        const latitude = parseFloat(coords.latitude);\r\n        const longitude = parseFloat(coords.longitude);\r\n\r\n        if (!isNaN(latitude) && !isNaN(longitude)) {\r\n          const el = document.createElement('div');\r\n          el.className = 'marker';\r\n          const isSelected = selectedLocation\r\n            ? selectedLocation.state === data.state\r\n            : false;\r\n          const isCompared = compareMarkersEnabled\r\n            ? [selectedState1, selectedState2].includes(stateName)\r\n            : false;\r\n          const icon = isSelected\r\n            ? redMarkerIcon\r\n            : isCompared\r\n            ? yellowMarkerIcon\r\n            : blueMarkerIcon;\r\n          el.style.backgroundImage = `url(${icon})`;\r\n          el.style.width = '30px';\r\n          el.style.height = '30px';\r\n          el.style.backgroundSize = 'contain';\r\n          el.style.cursor = 'pointer';\r\n\r\n          const marker = new mapboxgl.Marker(el)\r\n            .setLngLat([longitude, latitude])\r\n            .addTo(map);\r\n\r\n          // Add popup with state name\r\n          const popup = new mapboxgl.Popup({ offset: 25 }).setText(stateName);\r\n          marker.setPopup(popup);\r\n\r\n          marker.getElement().addEventListener('click', () => {\r\n            handleLocationSelect(data);\r\n          });\r\n\r\n          newMarkers.push(marker);\r\n        }\r\n      });\r\n      setMarkers(newMarkers);\r\n      setMarkersAdded(true);\r\n\r\n      setProgress((prev) => ({ ...prev, geocode: 100 }));\r\n      setProgressMessages((prev) => ({\r\n        ...prev,\r\n        geocode: 'Locations marked on the map.',\r\n      }));\r\n    }\r\n  }, [\r\n    map,\r\n    geoData,\r\n    selectedLocation,\r\n    stateCoordinates,\r\n    markers,\r\n    stateList,\r\n    compareMarkersEnabled,\r\n    selectedState1,\r\n    selectedState2,\r\n    handleLocationSelect,\r\n  ]);\r\n\r\n  // Re-render markers when selectedLocation or comparison changes\r\n  useEffect(() => {\r\n    if (markersAdded) {\r\n      renderMarkers();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [selectedLocation, compareMarkersEnabled]);\r\n\r\n  // Handle State Comparison Selection\r\n  const handleStateSelection = () => {\r\n    if (selectedState1 && selectedState2) {\r\n      const data1 = geoData.find((item) => item.state === selectedState1);\r\n      const data2 = geoData.find((item) => item.state === selectedState2);\r\n\r\n      if (!data1 || !data2) {\r\n        alert('One or both selected states have no data.');\r\n        return;\r\n      }\r\n\r\n      const labels = numericHeaders;\r\n      const dataset = {\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: selectedState1,\r\n            data: numericHeaders.map((header) => {\r\n              const value = data1[header] || 0;\r\n              const { min, max } = globalMinMax[header] || { min: 0, max: 1 };\r\n              const normalizedValue =\r\n                max !== min ? ((value - min) / (max - min)) * 9.5 + 0.5 : 5;\r\n              return isFinite(normalizedValue) ? normalizedValue : 0.5;\r\n            }),\r\n            actualValues: numericHeaders.map((header) => data1[header] || 0),\r\n            backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n            borderColor: 'rgba(255, 99, 132, 1)',\r\n            borderWidth: 1,\r\n          },\r\n          {\r\n            label: selectedState2,\r\n            data: numericHeaders.map((header) => {\r\n              const value = data2[header] || 0;\r\n              const { min, max } = globalMinMax[header] || { min: 0, max: 1 };\r\n              const normalizedValue =\r\n                max !== min ? ((value - min) / (max - min)) * 9.5 + 0.5 : 5;\r\n              return isFinite(normalizedValue) ? normalizedValue : 0.5;\r\n            }),\r\n            actualValues: numericHeaders.map((header) => data2[header] || 0),\r\n            backgroundColor: 'rgba(54, 162, 235, 0.5)',\r\n            borderColor: 'rgba(54, 162, 235, 1)',\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      };\r\n\r\n      setChartData(dataset);\r\n      setSelectedLocation(null);\r\n      setCompareMarkersEnabled(true);\r\n\r\n      // Render the markers for the selected states\r\n      renderMarkers();\r\n    }\r\n  };\r\n\r\n  // Chart Options\r\n  const chartOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    scales:\r\n      chartType === 'Bar'\r\n        ? {\r\n            y: {\r\n              beginAtZero: true,\r\n              min: 0.5,\r\n              max: 10,\r\n            },\r\n          }\r\n        : {},\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n      },\r\n      datalabels: {\r\n        display: true,\r\n        color: '#000',\r\n        align: 'center',\r\n        anchor: 'center',\r\n        formatter: function (value, context) {\r\n          const dataset = context.chart.data.datasets[context.datasetIndex];\r\n          if (dataset.actualValues) {\r\n            const actualValue = dataset.actualValues[context.dataIndex];\r\n            return isFinite(actualValue) ? actualValue.toFixed(2) : '';\r\n          } else {\r\n            return isFinite(value) ? value.toFixed(2) : '';\r\n          }\r\n        },\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function (context) {\r\n            const dataset = context.dataset;\r\n            const actualValue = dataset.actualValues\r\n              ? dataset.actualValues[context.dataIndex]\r\n              : context.parsed.y;\r\n            return `${context.label}: ${actualValue.toFixed(2)}`;\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex h-screen\">\r\n      {/* Map Container */}\r\n      <div ref={mapContainerRef} className=\"w-2/3 h-full\"></div>\r\n\r\n      {/* Sidebar */}\r\n      <div className=\"w-1/3 p-5 overflow-y-auto bg-gray-100 border-l border-gray-300\">\r\n        {/* Upload Data Section */}\r\n        <div className=\"mb-4 p-3 bg-white rounded shadow\">\r\n          <h3 className=\"text-sm font-semibold mb-2 text-gray-800\">Upload Data</h3>\r\n          <input\r\n            type=\"file\"\r\n            accept=\".json, .csv\"\r\n            onChange={handleFileUpload}\r\n            className=\"w-full p-2 border border-gray-300 rounded\"\r\n          />\r\n        </div>\r\n\r\n        {/* Progress Indicators */}\r\n        <div className=\"flex flex-col gap-2 mb-4\">\r\n          <div className=\"mb-2\">\r\n            <LoadingBar progress={progress.upload} />\r\n            <div className=\"text-center text-sm text-gray-600\">{progressMessages.upload}</div>\r\n          </div>\r\n          <div className=\"mb-2\">\r\n            <LoadingBar progress={progress.preprocess} />\r\n            <div className=\"text-center text-sm text-gray-600\">{progressMessages.preprocess}</div>\r\n          </div>\r\n          {dataNeedsGeocoding && (\r\n            <div className=\"mb-2\">\r\n              <LoadingBar progress={progress.geocode} />\r\n              <div className=\"text-center text-sm text-gray-600\">{progressMessages.geocode}</div>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Dataset Details Section */}\r\n        <div className=\"mb-4 p-3 bg-white rounded shadow\">\r\n          <h3 className=\"text-sm font-semibold mb-2 text-gray-800\">Dataset Details</h3>\r\n          {geoData.length > 0 ? (\r\n            <div className=\"text-sm text-gray-700\">\r\n              <p><strong>Rows:</strong> {totalRows}</p>\r\n              <p><strong>Columns:</strong> {totalColumns}</p>\r\n              <p><strong>Numeric Columns:</strong> {numericHeaders.join(', ')}</p>\r\n              <p><strong>String Columns:</strong> {stringHeaders.join(', ')}</p>\r\n            </div>\r\n          ) : (\r\n            <p className=\"text-sm text-gray-600\">No dataset uploaded yet.</p>\r\n          )}\r\n        </div>\r\n\r\n        {/* Location Comparison Section */}\r\n        {stateList.length >= 2 && (\r\n          <div className=\"mb-4 p-3 bg-white rounded shadow\">\r\n            <h3 className=\"text-sm font-semibold mb-2 text-gray-800\">Compare Two States</h3>\r\n            <div className=\"mb-2\">\r\n              <label className=\"block text-sm text-gray-600 mb-1\">State 1:</label>\r\n              <select\r\n                value={selectedState1}\r\n                onChange={(e) => setSelectedState1(e.target.value)}\r\n                className=\"w-full p-2 border border-gray-300 rounded\"\r\n              >\r\n                <option value=\"\">Select State</option>\r\n                {stateList.map((state) => (\r\n                  <option key={state} value={state}>{state}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"mb-2\">\r\n              <label className=\"block text-sm text-gray-600 mb-1\">State 2:</label>\r\n              <select\r\n                value={selectedState2}\r\n                onChange={(e) => setSelectedState2(e.target.value)}\r\n                className=\"w-full p-2 border border-gray-300 rounded\"\r\n              >\r\n                <option value=\"\">Select State</option>\r\n                {stateList.map((state) => (\r\n                  <option key={state} value={state}>{state}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <button\r\n              onClick={handleStateSelection}\r\n              disabled={!selectedState1 || !selectedState2}\r\n              className={`w-full p-2 rounded text-white ${\r\n                selectedState1 && selectedState2 ? 'bg-green-600' : 'bg-gray-500 cursor-not-allowed'\r\n              }`}\r\n            >\r\n              Compare\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        {/* Chart Type Selection Section */}\r\n        <div className=\"mb-4 p-3 bg-white rounded shadow\">\r\n          <h3 className=\"text-sm font-semibold mb-2 text-gray-800\">Select Chart Type</h3>\r\n          <div className=\"flex flex-wrap gap-2\">\r\n            {['Bar', 'Pie', 'Doughnut', 'PolarArea'].map((type) => (\r\n              <button\r\n                key={type}\r\n                onClick={() => setChartType(type)}\r\n                className={`flex-1 p-2 text-white rounded ${\r\n                  chartType === type ? 'bg-blue-600' : 'bg-gray-500'\r\n                }`}\r\n              >\r\n                {type} Chart\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Chart Display Section */}\r\n        {chartData && (\r\n          <div className=\"mt-6\">\r\n            <div className=\"relative w-full h-80\">\r\n              <h3 className=\"text-center text-lg mb-2\">{chartType} Chart</h3>\r\n              {chartType === 'Bar' && <Bar data={chartData} options={chartOptions} />}\r\n              {chartType === 'Pie' && <Pie data={chartData} options={chartOptions} />}\r\n              {chartType === 'Doughnut' && <Doughnut data={chartData} options={chartOptions} />}\r\n              {chartType === 'PolarArea' && <PolarArea data={chartData} options={chartOptions} />}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapView;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,MAAM,QAAQ,OAAO;AACvE,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAOC,IAAI,MAAM,WAAW;AAC5B,SAASC,GAAG,EAAEC,GAAG,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,iBAAiB;AAC/D,SACEC,KAAK,IAAIC,OAAO,EAChBC,iBAAiB,EACjBC,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,MAAM,QACD,UAAU;AACjB,OAAOC,eAAe,MAAM,2BAA2B;AACvD,OAAO,4CAA4C;AAEnD,OAAOC,cAAc,MAAM,kBAAkB,CAAC,CAAC;AAC/C,SAASC,YAAY,QAAQ,aAAa,CAAC,CAAC;AAC5C,OAAOC,cAAc,MAAM,yCAAyC,CAAC,CAAC;AACtE,OAAOC,aAAa,MAAM,wCAAwC;AAClE,OAAOC,gBAAgB,MAAM,2CAA2C,CAAC,CAAC;AAC1E,OAAO,cAAc,CAAC,CAAC;;AAEvB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAhB,OAAO,CAACiB,QAAQ,CACdhB,iBAAiB,EACjBC,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,MAAM,EACNC,eACF,CAAC;AAEDhB,QAAQ,CAACyB,WAAW,GAAGP,YAAY;AAEnC,MAAMQ,UAAU,GAAGA,CAAC;EAAEC;AAAS,CAAC,kBAC9BJ,OAAA;EAAKK,SAAS,EAAC,gCAAgC;EAAAC,QAAA,eAC7CN,OAAA;IACEK,SAAS,EAAC,kEAAkE;IAC5EE,KAAK,EAAE;MAAEC,KAAK,EAAE,GAAGJ,QAAQ;IAAI;EAAE;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7B;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACJ,CACN;AAACC,EAAA,GAPIV,UAAU;AAShB,MAAMW,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB;EACA,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAG3C,QAAQ,CAAC,IAAI,CAAC;EACpC,MAAM,CAAC4C,OAAO,EAAEC,UAAU,CAAC,GAAG7C,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC8C,cAAc,EAAEC,iBAAiB,CAAC,GAAG/C,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACgD,aAAa,EAAEC,gBAAgB,CAAC,GAAGjD,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACkD,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGnD,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAACoD,SAAS,EAAEC,YAAY,CAAC,GAAGrD,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACsD,SAAS,EAAEC,YAAY,CAAC,GAAGvD,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACwD,SAAS,EAAEC,YAAY,CAAC,GAAGzD,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAAC0D,YAAY,EAAEC,eAAe,CAAC,GAAG3D,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAAC4D,OAAO,EAAEC,UAAU,CAAC,GAAG7D,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC8B,QAAQ,EAAEgC,WAAW,CAAC,GAAG9D,QAAQ,CAAC;IACvC+D,MAAM,EAAE,CAAC;IACTC,UAAU,EAAE,CAAC;IACbC,OAAO,EAAE;EACX,CAAC,CAAC;EACF,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGnE,QAAQ,CAAC;IACvD+D,MAAM,EAAE,EAAE;IACVC,UAAU,EAAE,EAAE;IACdC,OAAO,EAAE;EACX,CAAC,CAAC;EACF,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGrE,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACsE,cAAc,EAAEC,iBAAiB,CAAC,GAAGvE,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACwE,cAAc,EAAEC,iBAAiB,CAAC,GAAGzE,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAAC0E,cAAc,EAAEC,iBAAiB,CAAC,GAAG3E,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAAC4E,YAAY,EAAEC,eAAe,CAAC,GAAG7E,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAAC8E,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG/E,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAACgF,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGjF,QAAQ,CAAC,KAAK,CAAC;EACzE,MAAM,CAACkF,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGnF,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5D,MAAM,CAACoF,YAAY,EAAEC,eAAe,CAAC,GAAGrF,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpD,MAAMsF,eAAe,GAAGpF,MAAM,CAAC,IAAI,CAAC;;EAEpC;EACAH,SAAS,CAAC,MAAM;IACd,MAAMwF,aAAa,GAAG,IAAIpF,QAAQ,CAACqF,GAAG,CAAC;MACrCC,SAAS,EAAEH,eAAe,CAACI,OAAO;MAClCzD,KAAK,EAAE,oCAAoC;MAC3C0D,MAAM,EAAE,CAAC,CAAC,OAAO,EAAE,OAAO,CAAC;MAC3BC,IAAI,EAAE;IACR,CAAC,CAAC;IAEF,MAAMC,GAAG,GAAG,IAAI1F,QAAQ,CAAC2F,iBAAiB,CAAC,CAAC;IAC5CP,aAAa,CAACQ,UAAU,CAACF,GAAG,EAAE,WAAW,CAAC;IAE1ClD,MAAM,CAAC4C,aAAa,CAAC;IAErB,OAAO,MAAMA,aAAa,CAACS,MAAM,CAAC,CAAC;EACrC,CAAC,EAAE,EAAE,CAAC;EACN;EACA,MAAMC,mBAAmB,GAAGhG,WAAW,CAAC,OAAOiG,QAAQ,EAAEC,SAAS,KAAK;IACrE,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,qDAAqDF,SAAS,IAAID,QAAQ,mCAAmC7E,YAAY,EAC3H,CAAC;MACD,MAAMiF,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,CAACE,QAAQ,IAAIF,IAAI,CAACE,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;QAC7C,OAAOH,IAAI,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACE,IAAI,CAACC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACnD,CAAC,MAAM;QACL,OAAO,IAAI;MACb;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,OAAO,IAAI;IACb;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,eAAe,GAAG9G,WAAW,CAAC,MAAO+G,YAAY,IAAK;IAC1D,IAAI,CAACA,YAAY,EAAE,OAAO;MAAEd,QAAQ,EAAE,IAAI;MAAEC,SAAS,EAAE;IAAK,CAAC;IAC7D,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,qDAAqDY,kBAAkB,CACrED,YACF,CAAC,sBAAsB3F,YAAY,UACrC,CAAC;MACD,MAAMiF,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,CAACE,QAAQ,IAAIF,IAAI,CAACE,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;QAC7C,MAAM,CAACN,SAAS,EAAED,QAAQ,CAAC,GAAGI,IAAI,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACb,MAAM;QACrD,OAAO;UAAEO,QAAQ;UAAEC;QAAU,CAAC;MAChC;MACA,OAAO;QAAED,QAAQ,EAAE,IAAI;QAAEC,SAAS,EAAE;MAAK,CAAC;IAC5C,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MACxC,OAAO;QAAEX,QAAQ,EAAE,IAAI;QAAEC,SAAS,EAAE;MAAK,CAAC;IAC5C;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMe,iBAAiB,GAAGjH,WAAW,CAClCkH,YAAY,IAAK;IAChB,IAAIA,YAAY,EAAE;MAChB,MAAMC,cAAc,GAAGtE,cAAc,CAACJ,GAAG,CAAE2E,MAAM,KAAM;QACrDC,KAAK,EAAED,MAAM;QACbE,KAAK,EAAEC,UAAU,CAACL,YAAY,CAACE,MAAM,CAAC,CAAC,IAAI;MAC7C,CAAC,CAAC,CAAC;MAEH,MAAMI,gBAAgB,GAAGL,cAAc,CAAC1E,GAAG,CAAEgF,IAAI,IAAK;QACpD,MAAM;UAAEC,GAAG;UAAEC;QAAI,CAAC,GAAGxC,YAAY,CAACsC,IAAI,CAACJ,KAAK,CAAC,IAAI;UAAEK,GAAG,EAAE,CAAC;UAAEC,GAAG,EAAE;QAAE,CAAC;QACnE,MAAMC,eAAe,GACnBD,GAAG,KAAKD,GAAG,GAAI,CAACD,IAAI,CAACH,KAAK,GAAGI,GAAG,KAAKC,GAAG,GAAGD,GAAG,CAAC,GAAI,GAAG,GAAG,GAAG,GAAG,CAAC;QAClE,OAAO;UACLL,KAAK,EAAEI,IAAI,CAACJ,KAAK;UACjBO,eAAe,EAAEC,QAAQ,CAACD,eAAe,CAAC,GAAGA,eAAe,GAAG,GAAG;UAClEE,WAAW,EAAEL,IAAI,CAACH;QACpB,CAAC;MACH,CAAC,CAAC;MAEFhE,YAAY,CAAC;QACXyE,MAAM,EAAEP,gBAAgB,CAAC/E,GAAG,CAAEgF,IAAI,IAAKA,IAAI,CAACJ,KAAK,CAAC;QAClDW,QAAQ,EAAE,CACR;UACEX,KAAK,EAAEH,YAAY,CAACe,KAAK;UACzB5B,IAAI,EAAEmB,gBAAgB,CAAC/E,GAAG,CAAEgF,IAAI,IAAKA,IAAI,CAACG,eAAe,CAAC;UAC1DM,YAAY,EAAEV,gBAAgB,CAAC/E,GAAG,CAAEgF,IAAI,IAAKA,IAAI,CAACK,WAAW,CAAC;UAC9DK,eAAe,EAAE,CACf,yBAAyB,EACzB,yBAAyB,EACzB,yBAAyB,EACzB,yBAAyB,EACzB,0BAA0B,EAC1B,yBAAyB,EACzB,yBAAyB,EACzB,yBAAyB,EACzB,yBAAyB,CAC1B;UACDC,WAAW,EAAE,CACX,uBAAuB,EACvB,uBAAuB,EACvB,uBAAuB,EACvB,uBAAuB,EACvB,wBAAwB,EACxB,uBAAuB,EACvB,uBAAuB,EACvB,uBAAuB,EACvB,uBAAuB,CACxB;UACDC,WAAW,EAAE;QACf,CAAC;MAEL,CAAC,CAAC;IACJ;EACF,CAAC,EACD,CAACxF,cAAc,EAAEsC,YAAY,CAC/B,CAAC;;EAED;EACA,MAAMmD,oBAAoB,GAAGtI,WAAW,CACrCkH,YAAY,IAAK;IAChBL,OAAO,CAAC0B,GAAG,CAAC,iBAAiB,EAAErB,YAAY,CAAC;IAE5C5C,iBAAiB,CAAC,EAAE,CAAC;IACrBE,iBAAiB,CAAC,EAAE,CAAC;IACrBQ,wBAAwB,CAAC,KAAK,CAAC;;IAE/B;IACA,IAAI/B,gBAAgB,IAAIA,gBAAgB,CAACgF,KAAK,KAAKf,YAAY,CAACe,KAAK,EAAE;MACrE/E,mBAAmB,CAAC,IAAI,CAAC;MACzBI,YAAY,CAAC,IAAI,CAAC;IACpB,CAAC,MAAM;MACL;MACAJ,mBAAmB,CAACgE,YAAY,CAAC;MACjCD,iBAAiB,CAACC,YAAY,CAAC;IACjC;EACF,CAAC,EACD,CAACjE,gBAAgB,EAAEgE,iBAAiB,CACtC,CAAC;;EAED;EACAnH,SAAS,CAAC,MAAM;IACd,IAAImD,gBAAgB,EAAE;MACpBgE,iBAAiB,CAAChE,gBAAgB,CAAC;IACrC,CAAC,MAAM;MACLK,YAAY,CAAC,IAAI,CAAC;IACpB;IACA;EACF,CAAC,EAAE,CAACL,gBAAgB,CAAC,CAAC;;EAEtB;EACA,MAAMuF,gBAAgB,GAAGxI,WAAW,CAClC,MAAOyI,OAAO,IAAK;IACjB5E,WAAW,CAAE6E,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAE3E,UAAU,EAAE;IAAE,CAAC,CAAC,CAAC;;IAEnD;IACA,MAAM4E,YAAY,GAAGF,OAAO,CAACG,MAAM,CAChCnB,IAAI,IAAKA,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAKoB,SAAS,IAAIC,MAAM,CAACC,IAAI,CAACtB,IAAI,CAAC,CAACjB,MAAM,GAAG,CAC9E,CAAC;;IAED;IACA,MAAMwC,kBAAkB,GAAGL,YAAY,CAACM,IAAI,CACzCxB,IAAI,IAAKA,IAAI,CAACxB,QAAQ,IAAIwB,IAAI,CAACvB,SAClC,CAAC;IAEDpB,qBAAqB,CAAC,CAACkE,kBAAkB,CAAC;;IAE1C;IACA,MAAME,uBAAuB,GAAG,CAAC,OAAO,EAAE,UAAU,EAAE,MAAM,CAAC;IAC7D,IAAIC,sBAAsB,GAAGD,uBAAuB,CAACE,IAAI,CAAEC,GAAG,IAC5DV,YAAY,CAAC,CAAC,CAAC,IACfG,MAAM,CAACC,IAAI,CAACJ,YAAY,CAAC,CAAC,CAAC,CAAC,CAACM,IAAI,CAAEK,GAAG,IAAKA,GAAG,CAACC,WAAW,CAAC,CAAC,KAAKF,GAAG,CAACE,WAAW,CAAC,CAAC,CACpF,CAAC;IAED7E,iBAAiB,CAACyE,sBAAsB,IAAI,EAAE,CAAC;IAE/CtC,OAAO,CAAC0B,GAAG,CAAC,2BAA2B,EAAEY,sBAAsB,CAAC;IAEhE,IAAI,CAACA,sBAAsB,IAAI,CAACH,kBAAkB,EAAE;MAClDQ,KAAK,CAAC,gDAAgD,CAAC;MACvD;IACF;;IAEA;IACA,MAAMC,aAAa,GAAG,MAAMtI,cAAc,CACxCwH,YAAY,EACZ9E,WACF,CAAC;IAEDgD,OAAO,CAAC0B,GAAG,CAAC,4CAA4C,EAAEkB,aAAa,CAACjD,MAAM,CAAC;IAE/E,IAAI,CAACiD,aAAa,IAAIA,aAAa,CAACjD,MAAM,KAAK,CAAC,EAAE;MAChDgD,KAAK,CAAC,oCAAoC,CAAC;MAC3C;IACF;IAEA3F,WAAW,CAAE6E,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAE3E,UAAU,EAAE;IAAG,CAAC,CAAC,CAAC;;IAEpD;IACA,MAAM2F,YAAY,GAAG,CAAC,CAAC;IACvB,MAAMC,cAAc,GAAG,CAAC,CAAC;IACzB,MAAMC,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;IAE/B,IAAIV,sBAAsB,IAAIH,kBAAkB,EAAE;MAChD,KAAK,MAAMvB,IAAI,IAAIgC,aAAa,EAAE;QAChC,IAAIK,SAAS,GAAG,EAAE;QAElB,IAAIX,sBAAsB,EAAE;UAC1BW,SAAS,GAAGrC,IAAI,CAAC0B,sBAAsB,CAAC;UACxC,IAAIA,sBAAsB,CAACI,WAAW,CAAC,CAAC,CAACQ,QAAQ,CAAC,MAAM,CAAC,EAAE;YACzD;YACA,MAAMC,MAAM,GAAG,MAAMlD,eAAe,CAACgD,SAAS,CAAC;YAC/C,IAAIE,MAAM,CAAC/D,QAAQ,IAAI+D,MAAM,CAAC9D,SAAS,EAAE;cACvC4D,SAAS,GAAG,MAAM9D,mBAAmB,CAACgE,MAAM,CAAC/D,QAAQ,EAAE+D,MAAM,CAAC9D,SAAS,CAAC;cACxE,IAAI,CAAC4D,SAAS,EAAE;YAClB,CAAC,MAAM;cACL;YACF;UACF,CAAC,MAAM;YACLA,SAAS,GAAGA,SAAS,CAACpD,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;UAC5C;QACF,CAAC,MAAM,IAAIqC,kBAAkB,EAAE;UAC7B,MAAM/C,QAAQ,GAAGsB,UAAU,CAACE,IAAI,CAACxB,QAAQ,CAAC;UAC1C,MAAMC,SAAS,GAAGqB,UAAU,CAACE,IAAI,CAACvB,SAAS,CAAC;UAC5C,IAAI,CAAC+D,KAAK,CAAChE,QAAQ,CAAC,IAAI,CAACgE,KAAK,CAAC/D,SAAS,CAAC,EAAE;YACzC4D,SAAS,GAAG,MAAM9D,mBAAmB,CAACC,QAAQ,EAAEC,SAAS,CAAC;YAC1D,IAAI4D,SAAS,EAAE;cACbA,SAAS,GAAGA,SAAS,CAACpD,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;YAC5C,CAAC,MAAM;cACL;YACF;UACF,CAAC,MAAM;YACL;UACF;QACF;QAEA,IAAI,CAACmD,SAAS,EAAE;;QAEhB;QACA,IAAI,CAACJ,YAAY,CAACI,SAAS,CAAC,EAAE;UAC5BJ,YAAY,CAACI,SAAS,CAAC,GAAG;YAAE,GAAGrC;UAAK,CAAC;UACrCiC,YAAY,CAACI,SAAS,CAAC,CAAC7B,KAAK,GAAG6B,SAAS;UACzCJ,YAAY,CAACI,SAAS,CAAC,CAACI,KAAK,GAAG,CAAC;;UAEjC;UACA,MAAMjE,QAAQ,GAAGsB,UAAU,CAACE,IAAI,CAACxB,QAAQ,CAAC;UAC1C,MAAMC,SAAS,GAAGqB,UAAU,CAACE,IAAI,CAACvB,SAAS,CAAC;UAC5C,IAAI,CAAC+D,KAAK,CAAChE,QAAQ,CAAC,IAAI,CAACgE,KAAK,CAAC/D,SAAS,CAAC,EAAE;YACzCyD,cAAc,CAACG,SAAS,CAAC,GAAG;cAAE7D,QAAQ;cAAEC;YAAU,CAAC;UACrD;QACF,CAAC,MAAM;UACL;UACA4C,MAAM,CAACC,IAAI,CAACtB,IAAI,CAAC,CAAC0C,OAAO,CAAEb,GAAG,IAAK;YACjC,IAAIA,GAAG,CAACC,WAAW,CAAC,CAAC,KAAK,OAAO,EAAE;YACnC,MAAMjC,KAAK,GAAGC,UAAU,CAACE,IAAI,CAAC6B,GAAG,CAAC,CAAC;YACnC,IAAI,CAACW,KAAK,CAAC3C,KAAK,CAAC,EAAE;cACjBsC,aAAa,CAACQ,GAAG,CAACd,GAAG,CAAC;cACtBI,YAAY,CAACI,SAAS,CAAC,CAACR,GAAG,CAAC,GAC1B,CAACI,YAAY,CAACI,SAAS,CAAC,CAACR,GAAG,CAAC,IAAI,CAAC,IAAIhC,KAAK;YAC/C;UACF,CAAC,CAAC;UACFoC,YAAY,CAACI,SAAS,CAAC,CAACI,KAAK,IAAI,CAAC;QACpC;MACF;IACF;IAEArG,WAAW,CAAE6E,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAE3E,UAAU,EAAE;IAAG,CAAC,CAAC,CAAC;;IAEpD;IACA,MAAMsG,cAAc,GAAGvB,MAAM,CAACwB,MAAM,CAACZ,YAAY,CAAC,CAACjH,GAAG,CAAEgF,IAAI,IAAK;MAC/D,MAAMyC,KAAK,GAAGzC,IAAI,CAACyC,KAAK,IAAI,CAAC;MAC7BN,aAAa,CAACO,OAAO,CAAEb,GAAG,IAAK;QAC7B,MAAMiB,WAAW,GAAGhD,UAAU,CAACE,IAAI,CAAC6B,GAAG,CAAC,CAAC;QACzC,IAAI,CAACW,KAAK,CAACM,WAAW,CAAC,EAAE;UACvB9C,IAAI,CAAC6B,GAAG,CAAC,GAAGiB,WAAW,GAAGL,KAAK;QACjC,CAAC,MAAM;UACLzC,IAAI,CAAC6B,GAAG,CAAC,GAAG,CAAC;QACf;MACF,CAAC,CAAC;MACF,OAAO7B,IAAI;IACb,CAAC,CAAC;IAEF7E,UAAU,CAACyH,cAAc,CAAC;IAC1BnF,mBAAmB,CAACyE,cAAc,CAAC;;IAEnC;IACA,IAAIU,cAAc,CAAC7D,MAAM,GAAG,CAAC,EAAE;MAC7B,MAAMgE,OAAO,GAAG1B,MAAM,CAACC,IAAI,CAACsB,cAAc,CAAC,CAAC,CAAC,CAAC;MAC9C,MAAMI,OAAO,GAAG,EAAE;MAClB,MAAMC,OAAO,GAAG,EAAE;MAElBF,OAAO,CAACL,OAAO,CAAE/C,MAAM,IAAK;QAC1B,IACE,CACE,UAAU,EACV,WAAW,EACX,aAAa,EACb,YAAY,EACZ,OAAO,EACP,OAAO,CACR,CAAC2C,QAAQ,CAAC3C,MAAM,CAAC,EAElB;QAEF,MAAMuD,SAAS,GAAGN,cAAc,CAACO,KAAK,CAAEnD,IAAI,IAAK;UAC/C,MAAMH,KAAK,GAAGC,UAAU,CAACE,IAAI,CAACL,MAAM,CAAC,CAAC;UACtC,OAAO,CAAC6C,KAAK,CAAC3C,KAAK,CAAC;QACtB,CAAC,CAAC;QACF,IAAIqD,SAAS,EAAE;UACbF,OAAO,CAACI,IAAI,CAACzD,MAAM,CAAC;QACtB,CAAC,MAAM;UACLsD,OAAO,CAACG,IAAI,CAACzD,MAAM,CAAC;QACtB;MACF,CAAC,CAAC;;MAEF;MACA,MAAM0D,gBAAgB,GAAG,CAAC,CAAC;MAC3BL,OAAO,CAACN,OAAO,CAAE/C,MAAM,IAAK;QAC1B,MAAMkD,MAAM,GAAGD,cAAc,CAAC5H,GAAG,CAAEgF,IAAI,IAAKF,UAAU,CAACE,IAAI,CAACL,MAAM,CAAC,CAAC,CAAC;QACrE0D,gBAAgB,CAAC1D,MAAM,CAAC,GAAG;UACzBM,GAAG,EAAEqD,IAAI,CAACrD,GAAG,CAAC,GAAG4C,MAAM,CAAC;UACxB3C,GAAG,EAAEoD,IAAI,CAACpD,GAAG,CAAC,GAAG2C,MAAM;QACzB,CAAC;MACH,CAAC,CAAC;MACFlF,eAAe,CAAC0F,gBAAgB,CAAC;MAEjChI,iBAAiB,CAAC2H,OAAO,CAAC;MAC1BzH,gBAAgB,CAAC0H,OAAO,CAAC;MAEzBlH,YAAY,CAAC6G,cAAc,CAAC7D,MAAM,CAAC;MACnC9C,eAAe,CAAC8G,OAAO,CAAChE,MAAM,CAAC;;MAE/B;MACA,MAAMwE,YAAY,GAAGlC,MAAM,CAACC,IAAI,CAACW,YAAY,CAAC;MAC9CtF,YAAY,CAAC4G,YAAY,CAAC;IAC5B,CAAC,MAAM;MACLxB,KAAK,CAAC,oCAAoC,CAAC;IAC7C;IAEA3F,WAAW,CAAE6E,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAE3E,UAAU,EAAE;IAAI,CAAC,CAAC,CAAC;;IAErD;IACAa,eAAe,CAAC,KAAK,CAAC;EACxB,CAAC,EACD,CAACoB,mBAAmB,EAAEc,eAAe,EAAE3F,cAAc,CACvD,CAAC;;EAED;EACA,MAAM8J,gBAAgB,GAAIC,KAAK,IAAK;IAClCrH,WAAW,CAAC;MACVC,MAAM,EAAE,CAAC;MACTC,UAAU,EAAE,CAAC;MACbC,OAAO,EAAE;IACX,CAAC,CAAC;IACFE,mBAAmB,CAAC;MAClBJ,MAAM,EAAE,EAAE;MACVC,UAAU,EAAE,EAAE;MACdC,OAAO,EAAE;IACX,CAAC,CAAC;IACF,MAAMmH,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClC,IAAIF,IAAI,EAAE;MACR,MAAMG,aAAa,GAAGH,IAAI,CAACI,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,CAAClC,WAAW,CAAC,CAAC;MAE9D,IAAI+B,aAAa,KAAK,MAAM,EAAE;QAC5B,MAAMI,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;QAC/BD,MAAM,CAACE,MAAM,GAAG,MAAOC,CAAC,IAAK;UAC3B,IAAI;YACF,MAAMxF,IAAI,GAAGyF,IAAI,CAACC,KAAK,CAACF,CAAC,CAACT,MAAM,CAACY,MAAM,CAAC;YACxCnI,WAAW,CAAE6E,IAAI,KAAM;cAAE,GAAGA,IAAI;cAAE5E,MAAM,EAAE;YAAI,CAAC,CAAC,CAAC;YACjDI,mBAAmB,CAAEwE,IAAI,KAAM;cAC7B,GAAGA,IAAI;cACP5E,MAAM,EAAE;YACV,CAAC,CAAC,CAAC;YACH,MAAM0E,gBAAgB,CAACnC,IAAI,CAAC;UAC9B,CAAC,CAAC,OAAOO,KAAK,EAAE;YACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;YAC5C4C,KAAK,CAAC,yCAAyC,CAAC;UAClD;QACF,CAAC;QACDkC,MAAM,CAACO,UAAU,CAACd,IAAI,CAAC;MACzB,CAAC,MAAM,IAAIG,aAAa,KAAK,KAAK,EAAE;QAClCnL,IAAI,CAAC4L,KAAK,CAACZ,IAAI,EAAE;UACf/D,MAAM,EAAE,IAAI;UACZ8E,cAAc,EAAE,IAAI;UACpBC,gBAAgB,EAAGC,KAAK,IAAK;YAC3B;YACA,MAAMC,KAAK,GAAGD,KAAK,CAAC1F,IAAI,CAAC,CAAC,CAAC8E,KAAK,CAAC,IAAI,CAAC;YACtC,MAAMc,cAAc,GAAGD,KAAK,CAACE,SAAS,CACnCC,IAAI,IACHA,IAAI,CAACjD,WAAW,CAAC,CAAC,CAACkD,UAAU,CAAC,cAAc,CAAC,IAC7CD,IAAI,CAACjD,WAAW,CAAC,CAAC,CAACkD,UAAU,CAAC,OAAO,CAAC,IACtCD,IAAI,CAACjD,WAAW,CAAC,CAAC,CAACkD,UAAU,CAAC,OAAO,CAAC,IACtCD,IAAI,CAACjD,WAAW,CAAC,CAAC,CAACkD,UAAU,CAAC,WAAW,CAAC,IAC1CD,IAAI,CAACjD,WAAW,CAAC,CAAC,CAACkD,UAAU,CAAC,UAAU,CAC5C,CAAC;YACD,IAAIH,cAAc,GAAG,CAAC,EAAE;cACtB,OAAOD,KAAK,CAACK,KAAK,CAACJ,cAAc,CAAC,CAACK,IAAI,CAAC,IAAI,CAAC;YAC/C;YACA,OAAOP,KAAK;UACd,CAAC;UACDQ,QAAQ,EAAE,MAAOC,OAAO,IAAK;YAC3BhJ,WAAW,CAAE6E,IAAI,KAAM;cAAE,GAAGA,IAAI;cAAE5E,MAAM,EAAE;YAAI,CAAC,CAAC,CAAC;YACjDI,mBAAmB,CAAEwE,IAAI,KAAM;cAC7B,GAAGA,IAAI;cACP5E,MAAM,EAAE;YACV,CAAC,CAAC,CAAC;YACH,MAAM0E,gBAAgB,CAACqE,OAAO,CAACxG,IAAI,CAAC;UACtC,CAAC;UACDO,KAAK,EAAGA,KAAK,IAAK;YAChBC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;YAC1C4C,KAAK,CAAC,kCAAkC,CAAC;UAC3C;QACF,CAAC,CAAC;MACJ,CAAC,MAAM;QACLA,KAAK,CAAC,yCAAyC,CAAC;MAClD;IACF;EACF,CAAC;;EAED;EACA1J,SAAS,CAAC,MAAM;IACd,IAAI+B,QAAQ,CAACkC,UAAU,KAAK,GAAG,EAAE;MAC/BG,mBAAmB,CAAEwE,IAAI,KAAM;QAC7B,GAAGA,IAAI;QACP3E,UAAU,EAAE;MACd,CAAC,CAAC,CAAC;IACL;EACF,CAAC,EAAE,CAAClC,QAAQ,CAACkC,UAAU,CAAC,CAAC;EAEzBjE,SAAS,CAAC,MAAM;IACd,IAAI+B,QAAQ,CAACmC,OAAO,KAAK,GAAG,EAAE;MAC5BE,mBAAmB,CAAEwE,IAAI,KAAM;QAC7B,GAAGA,IAAI;QACP1E,OAAO,EAAE;MACX,CAAC,CAAC,CAAC;IACL;EACF,CAAC,EAAE,CAACnC,QAAQ,CAACmC,OAAO,CAAC,CAAC;;EAEtB;EACA,MAAM8I,aAAa,GAAG9M,WAAW,CAAC,MAAM;IACtC,IAAIyC,GAAG,IAAIE,OAAO,CAAC6D,MAAM,GAAG,CAAC,EAAE;MAC7B,IAAIrC,SAAS,CAACqC,MAAM,KAAK,CAAC,EAAE;QAC1BgD,KAAK,CAAC,oEAAoE,CAAC;QAC3E;MACF;;MAEA;MACA7F,OAAO,CAACwG,OAAO,CAAE4C,MAAM,IAAKA,MAAM,CAAChH,MAAM,CAAC,CAAC,CAAC;MAC5C,MAAMiH,UAAU,GAAG,EAAE;MAErBrK,OAAO,CAACwH,OAAO,CAAE9D,IAAI,IAAK;QACxB,MAAMyD,SAAS,GAAGzD,IAAI,CAAC4B,KAAK;QAC5B,MAAM+B,MAAM,GAAG/E,gBAAgB,CAAC6E,SAAS,CAAC;QAC1C,IAAI,CAACE,MAAM,EAAE;QAEb,MAAM/D,QAAQ,GAAGsB,UAAU,CAACyC,MAAM,CAAC/D,QAAQ,CAAC;QAC5C,MAAMC,SAAS,GAAGqB,UAAU,CAACyC,MAAM,CAAC9D,SAAS,CAAC;QAE9C,IAAI,CAAC+D,KAAK,CAAChE,QAAQ,CAAC,IAAI,CAACgE,KAAK,CAAC/D,SAAS,CAAC,EAAE;UACzC,MAAM+G,EAAE,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;UACxCF,EAAE,CAACnL,SAAS,GAAG,QAAQ;UACvB,MAAMsL,UAAU,GAAGnK,gBAAgB,GAC/BA,gBAAgB,CAACgF,KAAK,KAAK5B,IAAI,CAAC4B,KAAK,GACrC,KAAK;UACT,MAAMoF,UAAU,GAAGtI,qBAAqB,GACpC,CAACV,cAAc,EAAEE,cAAc,CAAC,CAACwF,QAAQ,CAACD,SAAS,CAAC,GACpD,KAAK;UACT,MAAMwD,IAAI,GAAGF,UAAU,GACnB9L,aAAa,GACb+L,UAAU,GACV9L,gBAAgB,GAChBF,cAAc;UAClB4L,EAAE,CAACjL,KAAK,CAACuL,eAAe,GAAG,OAAOD,IAAI,GAAG;UACzCL,EAAE,CAACjL,KAAK,CAACC,KAAK,GAAG,MAAM;UACvBgL,EAAE,CAACjL,KAAK,CAACwL,MAAM,GAAG,MAAM;UACxBP,EAAE,CAACjL,KAAK,CAACyL,cAAc,GAAG,SAAS;UACnCR,EAAE,CAACjL,KAAK,CAAC0L,MAAM,GAAG,SAAS;UAE3B,MAAMX,MAAM,GAAG,IAAI7M,QAAQ,CAACyN,MAAM,CAACV,EAAE,CAAC,CACnCW,SAAS,CAAC,CAAC1H,SAAS,EAAED,QAAQ,CAAC,CAAC,CAChC4H,KAAK,CAACpL,GAAG,CAAC;;UAEb;UACA,MAAMqL,KAAK,GAAG,IAAI5N,QAAQ,CAAC6N,KAAK,CAAC;YAAEC,MAAM,EAAE;UAAG,CAAC,CAAC,CAACC,OAAO,CAACnE,SAAS,CAAC;UACnEiD,MAAM,CAACmB,QAAQ,CAACJ,KAAK,CAAC;UAEtBf,MAAM,CAACoB,UAAU,CAAC,CAAC,CAACC,gBAAgB,CAAC,OAAO,EAAE,MAAM;YAClD9F,oBAAoB,CAACjC,IAAI,CAAC;UAC5B,CAAC,CAAC;UAEF2G,UAAU,CAACnC,IAAI,CAACkC,MAAM,CAAC;QACzB;MACF,CAAC,CAAC;MACFnJ,UAAU,CAACoJ,UAAU,CAAC;MACtBpI,eAAe,CAAC,IAAI,CAAC;MAErBf,WAAW,CAAE6E,IAAI,KAAM;QAAE,GAAGA,IAAI;QAAE1E,OAAO,EAAE;MAAI,CAAC,CAAC,CAAC;MAClDE,mBAAmB,CAAEwE,IAAI,KAAM;QAC7B,GAAGA,IAAI;QACP1E,OAAO,EAAE;MACX,CAAC,CAAC,CAAC;IACL;EACF,CAAC,EAAE,CACDvB,GAAG,EACHE,OAAO,EACPM,gBAAgB,EAChBgC,gBAAgB,EAChBtB,OAAO,EACPQ,SAAS,EACTY,qBAAqB,EACrBV,cAAc,EACdE,cAAc,EACd+D,oBAAoB,CACrB,CAAC;;EAEF;EACAxI,SAAS,CAAC,MAAM;IACd,IAAI6E,YAAY,EAAE;MAChBmI,aAAa,CAAC,CAAC;IACjB;IACA;EACF,CAAC,EAAE,CAAC7J,gBAAgB,EAAE8B,qBAAqB,CAAC,CAAC;;EAE7C;EACA,MAAMsJ,oBAAoB,GAAGA,CAAA,KAAM;IACjC,IAAIhK,cAAc,IAAIE,cAAc,EAAE;MACpC,MAAM+J,KAAK,GAAG3L,OAAO,CAACyG,IAAI,CAAE3B,IAAI,IAAKA,IAAI,CAACQ,KAAK,KAAK5D,cAAc,CAAC;MACnE,MAAMkK,KAAK,GAAG5L,OAAO,CAACyG,IAAI,CAAE3B,IAAI,IAAKA,IAAI,CAACQ,KAAK,KAAK1D,cAAc,CAAC;MAEnE,IAAI,CAAC+J,KAAK,IAAI,CAACC,KAAK,EAAE;QACpB/E,KAAK,CAAC,2CAA2C,CAAC;QAClD;MACF;MAEA,MAAMzB,MAAM,GAAGlF,cAAc;MAC7B,MAAM2L,OAAO,GAAG;QACdzG,MAAM;QACNC,QAAQ,EAAE,CACR;UACEX,KAAK,EAAEhD,cAAc;UACrBgC,IAAI,EAAExD,cAAc,CAACJ,GAAG,CAAE2E,MAAM,IAAK;YACnC,MAAME,KAAK,GAAGgH,KAAK,CAAClH,MAAM,CAAC,IAAI,CAAC;YAChC,MAAM;cAAEM,GAAG;cAAEC;YAAI,CAAC,GAAGxC,YAAY,CAACiC,MAAM,CAAC,IAAI;cAAEM,GAAG,EAAE,CAAC;cAAEC,GAAG,EAAE;YAAE,CAAC;YAC/D,MAAMC,eAAe,GACnBD,GAAG,KAAKD,GAAG,GAAI,CAACJ,KAAK,GAAGI,GAAG,KAAKC,GAAG,GAAGD,GAAG,CAAC,GAAI,GAAG,GAAG,GAAG,GAAG,CAAC;YAC7D,OAAOG,QAAQ,CAACD,eAAe,CAAC,GAAGA,eAAe,GAAG,GAAG;UAC1D,CAAC,CAAC;UACFM,YAAY,EAAErF,cAAc,CAACJ,GAAG,CAAE2E,MAAM,IAAKkH,KAAK,CAAClH,MAAM,CAAC,IAAI,CAAC,CAAC;UAChEe,eAAe,EAAE,yBAAyB;UAC1CC,WAAW,EAAE,uBAAuB;UACpCC,WAAW,EAAE;QACf,CAAC,EACD;UACEhB,KAAK,EAAE9C,cAAc;UACrB8B,IAAI,EAAExD,cAAc,CAACJ,GAAG,CAAE2E,MAAM,IAAK;YACnC,MAAME,KAAK,GAAGiH,KAAK,CAACnH,MAAM,CAAC,IAAI,CAAC;YAChC,MAAM;cAAEM,GAAG;cAAEC;YAAI,CAAC,GAAGxC,YAAY,CAACiC,MAAM,CAAC,IAAI;cAAEM,GAAG,EAAE,CAAC;cAAEC,GAAG,EAAE;YAAE,CAAC;YAC/D,MAAMC,eAAe,GACnBD,GAAG,KAAKD,GAAG,GAAI,CAACJ,KAAK,GAAGI,GAAG,KAAKC,GAAG,GAAGD,GAAG,CAAC,GAAI,GAAG,GAAG,GAAG,GAAG,CAAC;YAC7D,OAAOG,QAAQ,CAACD,eAAe,CAAC,GAAGA,eAAe,GAAG,GAAG;UAC1D,CAAC,CAAC;UACFM,YAAY,EAAErF,cAAc,CAACJ,GAAG,CAAE2E,MAAM,IAAKmH,KAAK,CAACnH,MAAM,CAAC,IAAI,CAAC,CAAC;UAChEe,eAAe,EAAE,yBAAyB;UAC1CC,WAAW,EAAE,uBAAuB;UACpCC,WAAW,EAAE;QACf,CAAC;MAEL,CAAC;MAED/E,YAAY,CAACkL,OAAO,CAAC;MACrBtL,mBAAmB,CAAC,IAAI,CAAC;MACzB8B,wBAAwB,CAAC,IAAI,CAAC;;MAE9B;MACA8H,aAAa,CAAC,CAAC;IACjB;EACF,CAAC;;EAED;EACA,MAAM2B,YAAY,GAAG;IACnBC,UAAU,EAAE,IAAI;IAChBC,mBAAmB,EAAE,KAAK;IAC1BC,MAAM,EACJzL,SAAS,KAAK,KAAK,GACf;MACE0L,CAAC,EAAE;QACDC,WAAW,EAAE,IAAI;QACjBpH,GAAG,EAAE,GAAG;QACRC,GAAG,EAAE;MACP;IACF,CAAC,GACD,CAAC,CAAC;IACRoH,OAAO,EAAE;MACPC,MAAM,EAAE;QACNC,QAAQ,EAAE;MACZ,CAAC;MACDC,UAAU,EAAE;QACVC,OAAO,EAAE,IAAI;QACbC,KAAK,EAAE,MAAM;QACbC,KAAK,EAAE,QAAQ;QACfC,MAAM,EAAE,QAAQ;QAChBC,SAAS,EAAE,SAAAA,CAAUjI,KAAK,EAAEkI,OAAO,EAAE;UACnC,MAAMhB,OAAO,GAAGgB,OAAO,CAACC,KAAK,CAACpJ,IAAI,CAAC2B,QAAQ,CAACwH,OAAO,CAACE,YAAY,CAAC;UACjE,IAAIlB,OAAO,CAACtG,YAAY,EAAE;YACxB,MAAMJ,WAAW,GAAG0G,OAAO,CAACtG,YAAY,CAACsH,OAAO,CAACG,SAAS,CAAC;YAC3D,OAAO9H,QAAQ,CAACC,WAAW,CAAC,GAAGA,WAAW,CAAC8H,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE;UAC5D,CAAC,MAAM;YACL,OAAO/H,QAAQ,CAACP,KAAK,CAAC,GAAGA,KAAK,CAACsI,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE;UAChD;QACF;MACF,CAAC;MACDC,OAAO,EAAE;QACPC,SAAS,EAAE;UACTzI,KAAK,EAAE,SAAAA,CAAUmI,OAAO,EAAE;YACxB,MAAMhB,OAAO,GAAGgB,OAAO,CAAChB,OAAO;YAC/B,MAAM1G,WAAW,GAAG0G,OAAO,CAACtG,YAAY,GACpCsG,OAAO,CAACtG,YAAY,CAACsH,OAAO,CAACG,SAAS,CAAC,GACvCH,OAAO,CAACO,MAAM,CAAClB,CAAC;YACpB,OAAO,GAAGW,OAAO,CAACnI,KAAK,KAAKS,WAAW,CAAC8H,OAAO,CAAC,CAAC,CAAC,EAAE;UACtD;QACF;MACF;IACF;EACF,CAAC;EAED,oBACEnO,OAAA;IAAKK,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAE5BN,OAAA;MAAKuO,GAAG,EAAE3K,eAAgB;MAACvD,SAAS,EAAC;IAAc;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAG1DZ,OAAA;MAAKK,SAAS,EAAC,gEAAgE;MAAAC,QAAA,gBAE7EN,OAAA;QAAKK,SAAS,EAAC,kCAAkC;QAAAC,QAAA,gBAC/CN,OAAA;UAAIK,SAAS,EAAC,0CAA0C;UAAAC,QAAA,EAAC;QAAW;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACzEZ,OAAA;UACEwO,IAAI,EAAC,MAAM;UACXC,MAAM,EAAC,aAAa;UACpBC,QAAQ,EAAElF,gBAAiB;UAC3BnJ,SAAS,EAAC;QAA2C;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAGNZ,OAAA;QAAKK,SAAS,EAAC,0BAA0B;QAAAC,QAAA,gBACvCN,OAAA;UAAKK,SAAS,EAAC,MAAM;UAAAC,QAAA,gBACnBN,OAAA,CAACG,UAAU;YAACC,QAAQ,EAAEA,QAAQ,CAACiC;UAAO;YAAA5B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACzCZ,OAAA;YAAKK,SAAS,EAAC,mCAAmC;YAAAC,QAAA,EAAEkC,gBAAgB,CAACH;UAAM;YAAA5B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/E,CAAC,eACNZ,OAAA;UAAKK,SAAS,EAAC,MAAM;UAAAC,QAAA,gBACnBN,OAAA,CAACG,UAAU;YAACC,QAAQ,EAAEA,QAAQ,CAACkC;UAAW;YAAA7B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAC7CZ,OAAA;YAAKK,SAAS,EAAC,mCAAmC;YAAAC,QAAA,EAAEkC,gBAAgB,CAACF;UAAU;YAAA7B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnF,CAAC,EACLwC,kBAAkB,iBACjBpD,OAAA;UAAKK,SAAS,EAAC,MAAM;UAAAC,QAAA,gBACnBN,OAAA,CAACG,UAAU;YAACC,QAAQ,EAAEA,QAAQ,CAACmC;UAAQ;YAAA9B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAC1CZ,OAAA;YAAKK,SAAS,EAAC,mCAAmC;YAAAC,QAAA,EAAEkC,gBAAgB,CAACD;UAAO;YAAA9B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChF,CACN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eAGNZ,OAAA;QAAKK,SAAS,EAAC,kCAAkC;QAAAC,QAAA,gBAC/CN,OAAA;UAAIK,SAAS,EAAC,0CAA0C;UAAAC,QAAA,EAAC;QAAe;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EAC5EM,OAAO,CAAC6D,MAAM,GAAG,CAAC,gBACjB/E,OAAA;UAAKK,SAAS,EAAC,uBAAuB;UAAAC,QAAA,gBACpCN,OAAA;YAAAM,QAAA,gBAAGN,OAAA;cAAAM,QAAA,EAAQ;YAAK;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACkB,SAAS;UAAA;YAAArB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACzCZ,OAAA;YAAAM,QAAA,gBAAGN,OAAA;cAAAM,QAAA,EAAQ;YAAQ;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACoB,YAAY;UAAA;YAAAvB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC/CZ,OAAA;YAAAM,QAAA,gBAAGN,OAAA;cAAAM,QAAA,EAAQ;YAAgB;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACQ,cAAc,CAAC8J,IAAI,CAAC,IAAI,CAAC;UAAA;YAAAzK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpEZ,OAAA;YAAAM,QAAA,gBAAGN,OAAA;cAAAM,QAAA,EAAQ;YAAe;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACU,aAAa,CAAC4J,IAAI,CAAC,IAAI,CAAC;UAAA;YAAAzK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/D,CAAC,gBAENZ,OAAA;UAAGK,SAAS,EAAC,uBAAuB;UAAAC,QAAA,EAAC;QAAwB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CACjE;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,EAGL8B,SAAS,CAACqC,MAAM,IAAI,CAAC,iBACpB/E,OAAA;QAAKK,SAAS,EAAC,kCAAkC;QAAAC,QAAA,gBAC/CN,OAAA;UAAIK,SAAS,EAAC,0CAA0C;UAAAC,QAAA,EAAC;QAAkB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAChFZ,OAAA;UAAKK,SAAS,EAAC,MAAM;UAAAC,QAAA,gBACnBN,OAAA;YAAOK,SAAS,EAAC,kCAAkC;YAAAC,QAAA,EAAC;UAAQ;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACpEZ,OAAA;YACE6F,KAAK,EAAEjD,cAAe;YACtB8L,QAAQ,EAAGtE,CAAC,IAAKvH,iBAAiB,CAACuH,CAAC,CAACT,MAAM,CAAC9D,KAAK,CAAE;YACnDxF,SAAS,EAAC,2CAA2C;YAAAC,QAAA,gBAErDN,OAAA;cAAQ6F,KAAK,EAAC,EAAE;cAAAvF,QAAA,EAAC;YAAY;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EACrC8B,SAAS,CAAC1B,GAAG,CAAEwF,KAAK,iBACnBxG,OAAA;cAAoB6F,KAAK,EAAEW,KAAM;cAAAlG,QAAA,EAAEkG;YAAK,GAA3BA,KAAK;cAAA/F,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAA+B,CAClD,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eACNZ,OAAA;UAAKK,SAAS,EAAC,MAAM;UAAAC,QAAA,gBACnBN,OAAA;YAAOK,SAAS,EAAC,kCAAkC;YAAAC,QAAA,EAAC;UAAQ;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACpEZ,OAAA;YACE6F,KAAK,EAAE/C,cAAe;YACtB4L,QAAQ,EAAGtE,CAAC,IAAKrH,iBAAiB,CAACqH,CAAC,CAACT,MAAM,CAAC9D,KAAK,CAAE;YACnDxF,SAAS,EAAC,2CAA2C;YAAAC,QAAA,gBAErDN,OAAA;cAAQ6F,KAAK,EAAC,EAAE;cAAAvF,QAAA,EAAC;YAAY;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EACrC8B,SAAS,CAAC1B,GAAG,CAAEwF,KAAK,iBACnBxG,OAAA;cAAoB6F,KAAK,EAAEW,KAAM;cAAAlG,QAAA,EAAEkG;YAAK,GAA3BA,KAAK;cAAA/F,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAA+B,CAClD,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eACNZ,OAAA;UACE2O,OAAO,EAAE/B,oBAAqB;UAC9BgC,QAAQ,EAAE,CAAChM,cAAc,IAAI,CAACE,cAAe;UAC7CzC,SAAS,EAAE,iCACTuC,cAAc,IAAIE,cAAc,GAAG,cAAc,GAAG,gCAAgC,EACnF;UAAAxC,QAAA,EACJ;QAED;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CACN,eAGDZ,OAAA;QAAKK,SAAS,EAAC,kCAAkC;QAAAC,QAAA,gBAC/CN,OAAA;UAAIK,SAAS,EAAC,0CAA0C;UAAAC,QAAA,EAAC;QAAiB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC/EZ,OAAA;UAAKK,SAAS,EAAC,sBAAsB;UAAAC,QAAA,EAClC,CAAC,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,WAAW,CAAC,CAACU,GAAG,CAAEwN,IAAI,iBAChDxO,OAAA;YAEE2O,OAAO,EAAEA,CAAA,KAAMhN,YAAY,CAAC6M,IAAI,CAAE;YAClCnO,SAAS,EAAE,iCACTqB,SAAS,KAAK8M,IAAI,GAAG,aAAa,GAAG,aAAa,EACjD;YAAAlO,QAAA,GAEFkO,IAAI,EAAC,QACR;UAAA,GAPOA,IAAI;YAAA/N,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAOH,CACT;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,EAGLgB,SAAS,iBACR5B,OAAA;QAAKK,SAAS,EAAC,MAAM;QAAAC,QAAA,eACnBN,OAAA;UAAKK,SAAS,EAAC,sBAAsB;UAAAC,QAAA,gBACnCN,OAAA;YAAIK,SAAS,EAAC,0BAA0B;YAAAC,QAAA,GAAEoB,SAAS,EAAC,QAAM;UAAA;YAAAjB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,EAC9Dc,SAAS,KAAK,KAAK,iBAAI1B,OAAA,CAACrB,GAAG;YAACiG,IAAI,EAAEhD,SAAU;YAACiN,OAAO,EAAE7B;UAAa;YAAAvM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,EACtEc,SAAS,KAAK,KAAK,iBAAI1B,OAAA,CAACpB,GAAG;YAACgG,IAAI,EAAEhD,SAAU;YAACiN,OAAO,EAAE7B;UAAa;YAAAvM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,EACtEc,SAAS,KAAK,UAAU,iBAAI1B,OAAA,CAACnB,QAAQ;YAAC+F,IAAI,EAAEhD,SAAU;YAACiN,OAAO,EAAE7B;UAAa;YAAAvM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,EAChFc,SAAS,KAAK,WAAW,iBAAI1B,OAAA,CAAClB,SAAS;YAAC8F,IAAI,EAAEhD,SAAU;YAACiN,OAAO,EAAE7B;UAAa;YAAAvM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChF;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACG,EAAA,CA3wBID,OAAO;AAAAgO,GAAA,GAAPhO,OAAO;AA6wBb,eAAeA,OAAO;AAAC,IAAAD,EAAA,EAAAiO,GAAA;AAAAC,YAAA,CAAAlO,EAAA;AAAAkO,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}