{"ast":null,"code":"var _jsxFileName = \"/Users/girishkumarpatchikoru/Desktop/projecthci/geovizproject/frontend/src/components/MapView.js\",\n  _s = $RefreshSig$();\n// src/components/MapView.js\n\nimport React, { useEffect, useState, useCallback, useRef, forwardRef, useImperativeHandle } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css'; // Import Mapbox GL CSS locally\nimport Papa from 'papaparse';\nimport { Bar, Pie, Doughnut, PolarArea } from 'react-chartjs-2';\nimport { Chart as ChartJS, RadialLinearScale, CategoryScale, LinearScale, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\nimport 'react-circular-progressbar/dist/styles.css';\nimport domtoimage from 'dom-to-image-more';\nimport styles from './styles';\nimport preprocessData from './preprocessData';\nimport { MAPBOX_TOKEN } from './constants'; // Make sure to include your Mapbox access token\nimport blueMarkerIcon from '../assets/images/custom-marker-blue.png';\nimport redMarkerIcon from '../assets/images/custom-marker-red.png';\nimport yellowMarkerIcon from '../assets/images/custom-marker-yellow.png'; // Comparison markers\nimport './marker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(RadialLinearScale, CategoryScale, LinearScale, BarElement, ArcElement, Title, Tooltip, Legend, ChartDataLabels);\n\n// Set Mapbox access token\nmapboxgl.accessToken = MAPBOX_TOKEN;\n\n// Loading Bar\nconst LoadingBar = ({\n  progress\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  style: {\n    width: '100%',\n    backgroundColor: '#ddd',\n    height: '10px',\n    borderRadius: '5px'\n  },\n  children: /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: `${progress}%`,\n      height: '100%',\n      backgroundColor: '#28a745',\n      borderRadius: '5px',\n      transition: 'width 0.3s ease'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 55,\n  columnNumber: 3\n}, this);\n\n// Use forwardRef to pass ref to the MapView component\n_c = LoadingBar;\nconst MapView = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c2 = _s((props, ref) => {\n  _s();\n  const [map, setMap] = useState(null);\n  const [geoData, setGeoData] = useState([]);\n  const [numericHeaders, setNumericHeaders] = useState([]);\n  const [stringHeaders, setStringHeaders] = useState([]);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [chartType, setChartType] = useState('Bar');\n  const [chartData, setChartData] = useState(null);\n  const [totalRows, setTotalRows] = useState(0);\n  const [totalColumns, setTotalColumns] = useState(0);\n  const [markers, setMarkers] = useState([]);\n  const [progress, setProgress] = useState({\n    upload: 0,\n    preprocess: 0,\n    geocode: 0\n  });\n  const [progressMessages, setProgressMessages] = useState({\n    upload: '',\n    preprocess: '',\n    geocode: ''\n  });\n  const [stateList, setStateList] = useState([]);\n  const [selectedState1, setSelectedState1] = useState('');\n  const [selectedState2, setSelectedState2] = useState('');\n  const [locationColumn, setLocationColumn] = useState('');\n  const [markersAdded, setMarkersAdded] = useState(false);\n  const [dataNeedsGeocoding, setDataNeedsGeocoding] = useState(false);\n  const [compareMarkersEnabled, setCompareMarkersEnabled] = useState(false);\n  const [stateCoordinates, setStateCoordinates] = useState({});\n  const [globalMinMax, setGlobalMinMax] = useState({});\n\n  // Refs\n  const mapContainerRef = useRef(null); // Map container ref\n  const containerRef = useRef(null); // Main container ref\n  const sidebarRef = useRef(null); // Sidebar ref\n  const uploadRef = useRef(null); // Upload and dataset details container ref\n  const progressRef = useRef(null); // Progress container ref\n\n  useEffect(() => {\n    const initializeMap = new mapboxgl.Map({\n      container: mapContainerRef.current,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [-98.5795, 39.8283],\n      // Centered on USA\n      zoom: 3,\n      preserveDrawingBuffer: true // Important for capturing the canvas\n    });\n    const nav = new mapboxgl.NavigationControl();\n    initializeMap.addControl(nav, 'top-right');\n\n    // Add error handling for WebGL context loss\n    initializeMap.getCanvas().addEventListener('webglcontextlost', event => {\n      event.preventDefault();\n      console.error('WebGL context lost');\n    });\n    initializeMap.getCanvas().addEventListener('webglcontextrestored', () => {\n      console.log('WebGL context restored');\n    });\n    setMap(initializeMap);\n\n    // Clean up on unmount\n    return () => initializeMap.remove();\n  }, []);\n\n  // Reverse Geocode Function to get State Name\n  const reverseGeocodeState = useCallback(async (latitude, longitude) => {\n    try {\n      const response = await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${longitude},${latitude}.json?types=region&access_token=${MAPBOX_TOKEN}`);\n      const data = await response.json();\n      if (data.features && data.features.length > 0) {\n        return data.features[0].text.trim().toUpperCase();\n      } else {\n        return null;\n      }\n    } catch (error) {\n      console.error('Reverse geocoding error:', error);\n      return null;\n    }\n  }, []);\n\n  // Geocode Function to get coordinates from location name\n  const geocodeLocation = useCallback(async locationName => {\n    if (!locationName) return {\n      latitude: null,\n      longitude: null\n    };\n    try {\n      const response = await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(locationName)}.json?access_token=${MAPBOX_TOKEN}&limit=1`);\n      const data = await response.json();\n      if (data.features && data.features.length > 0) {\n        const [longitude, latitude] = data.features[0].center;\n        return {\n          latitude,\n          longitude\n        };\n      }\n      return {\n        latitude: null,\n        longitude: null\n      };\n    } catch (error) {\n      console.error('Geocoding error:', error);\n      return {\n        latitude: null,\n        longitude: null\n      };\n    }\n  }, []);\n  const generateChartData = useCallback(locationData => {\n    if (locationData) {\n      const locationValues = numericHeaders.map(header => ({\n        label: header,\n        value: parseFloat(locationData[header]) || 0\n      }));\n      const normalizedValues = locationValues.map(item => {\n        const {\n          min,\n          max\n        } = globalMinMax[item.label] || {\n          min: 0,\n          max: 1\n        };\n        const normalizedValue = max !== min ? (item.value - min) / (max - min) * 9.5 + 0.5 : 5;\n        return {\n          label: item.label,\n          normalizedValue: isFinite(normalizedValue) ? normalizedValue : 0.5,\n          actualValue: item.value\n        };\n      });\n      setChartData({\n        labels: normalizedValues.map(item => item.label),\n        datasets: [{\n          label: locationData.state,\n          data: normalizedValues.map(item => item.normalizedValue),\n          actualValues: normalizedValues.map(item => item.actualValue),\n          backgroundColor: ['rgba(255, 99, 132, 0.5)', 'rgba(54, 162, 235, 0.5)', 'rgba(255, 206, 86, 0.5)', 'rgba(75, 192, 192, 0.5)', 'rgba(153, 102, 255, 0.5)', 'rgba(255, 159, 64, 0.5)', 'rgba(255, 99, 132, 0.5)', 'rgba(54, 162, 235, 0.5)', 'rgba(255, 206, 86, 0.5)'],\n          borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)', 'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)'],\n          borderWidth: 1\n        }]\n      });\n    }\n  }, [numericHeaders, globalMinMax]);\n\n  // Handle Location Selection from Map\n  const handleLocationSelect = useCallback(locationData => {\n    console.log('Marker clicked:', locationData);\n    setSelectedState1('');\n    setSelectedState2('');\n    setCompareMarkersEnabled(false);\n\n    // Clicked state is already selected, deselect it\n    if (selectedLocation && selectedLocation.state === locationData.state) {\n      setSelectedLocation(null);\n      setChartData(null);\n    } else {\n      setSelectedLocation(locationData);\n      generateChartData(locationData);\n    }\n  }, [selectedLocation, generateChartData]);\n\n  // Data Generation\n  useEffect(() => {\n    if (selectedLocation) {\n      generateChartData(selectedLocation);\n    } else {\n      setChartData(null);\n    }\n  }, [selectedLocation]);\n\n  // Preprocess Data Function\n  const handlePreprocess = useCallback(async rawData => {\n    setProgress(prev => ({\n      ...prev,\n      preprocess: 0\n    }));\n\n    // Remove null, undefined, and inconsistent data rows\n    const cleanRawData = rawData.filter(item => item !== null && item !== undefined && Object.keys(item).length > 0);\n    const dataContainsLatLng = cleanRawData.some(item => item.latitude && item.longitude);\n    setDataNeedsGeocoding(!dataContainsLatLng);\n    const possibleLocationColumns = ['state', 'province', 'city'];\n    let detectedLocationColumn = possibleLocationColumns.find(col => cleanRawData[0] && Object.keys(cleanRawData[0]).some(key => key.toLowerCase() === col.toLowerCase()));\n    setLocationColumn(detectedLocationColumn || '');\n    console.log('Detected Location Column:', detectedLocationColumn);\n    if (!detectedLocationColumn && !dataContainsLatLng) {\n      alert('No valid location column found in the dataset.');\n      return;\n    }\n\n    // Preprocess data\n    const processedData = await preprocessData(cleanRawData, setProgress);\n    console.log('Number of Data Points After Preprocessing:', processedData.length);\n    if (!processedData || processedData.length === 0) {\n      alert('No data available after filtering.');\n      return;\n    }\n    setProgress(prev => ({\n      ...prev,\n      preprocess: 50\n    }));\n    const stateDataMap = {};\n    const stateCoordsMap = {};\n    const numericFields = new Set();\n    if (detectedLocationColumn || dataContainsLatLng) {\n      for (const item of processedData) {\n        let stateName = '';\n        if (detectedLocationColumn) {\n          stateName = item[detectedLocationColumn];\n          if (detectedLocationColumn.toLowerCase().includes('city')) {\n            // If the location column is a city, we need to get the state name\n            const coords = await geocodeLocation(stateName);\n            if (coords.latitude && coords.longitude) {\n              stateName = await reverseGeocodeState(coords.latitude, coords.longitude);\n              if (!stateName) continue;\n            } else {\n              continue;\n            }\n          } else {\n            stateName = stateName.trim().toUpperCase();\n          }\n        } else if (dataContainsLatLng) {\n          const latitude = parseFloat(item.latitude);\n          const longitude = parseFloat(item.longitude);\n          if (!isNaN(latitude) && !isNaN(longitude)) {\n            stateName = await reverseGeocodeState(latitude, longitude);\n            if (stateName) {\n              stateName = stateName.trim().toUpperCase();\n            } else {\n              continue;\n            }\n          } else {\n            continue;\n          }\n        }\n        if (!stateName) continue;\n\n        // Aggregate data per state\n        if (!stateDataMap[stateName]) {\n          stateDataMap[stateName] = {\n            ...item\n          };\n          stateDataMap[stateName].state = stateName;\n          stateDataMap[stateName].count = 1;\n\n          // Store coordinates for the first occurrence\n          const latitude = parseFloat(item.latitude);\n          const longitude = parseFloat(item.longitude);\n          if (!isNaN(latitude) && !isNaN(longitude)) {\n            stateCoordsMap[stateName] = {\n              latitude,\n              longitude\n            };\n          }\n        } else {\n          // Sum numeric fields\n          Object.keys(item).forEach(key => {\n            if (key.toLowerCase() === 'state') return;\n            const value = parseFloat(item[key]);\n            if (!isNaN(value)) {\n              numericFields.add(key);\n              stateDataMap[stateName][key] = (stateDataMap[stateName][key] || 0) + value;\n            }\n          });\n          stateDataMap[stateName].count += 1;\n        }\n      }\n    }\n    setProgress(prev => ({\n      ...prev,\n      preprocess: 80\n    }));\n    const aggregatedData = Object.values(stateDataMap).map(item => {\n      const count = item.count || 1;\n      numericFields.forEach(key => {\n        const parsedValue = parseFloat(item[key]);\n        if (!isNaN(parsedValue)) {\n          item[key] = parsedValue / count;\n        } else {\n          item[key] = 0;\n        }\n      });\n      return item;\n    });\n    setGeoData(aggregatedData);\n    setStateCoordinates(stateCoordsMap);\n\n    // Checking numeric and string headers\n    if (aggregatedData.length > 0) {\n      const headers = Object.keys(aggregatedData[0]);\n      const numeric = [];\n      const strings = [];\n      headers.forEach(header => {\n        if (['latitude', 'longitude', 'GeoLocation', 'locationID', 'count', 'state'].includes(header)) return;\n        const isNumeric = aggregatedData.every(item => {\n          const value = parseFloat(item[header]);\n          return !isNaN(value);\n        });\n        if (isNumeric) {\n          numeric.push(header);\n        } else {\n          strings.push(header);\n        }\n      });\n      const globalMinMaxCalc = {};\n      numeric.forEach(header => {\n        const values = aggregatedData.map(item => parseFloat(item[header]));\n        globalMinMaxCalc[header] = {\n          min: Math.min(...values),\n          max: Math.max(...values)\n        };\n      });\n      setGlobalMinMax(globalMinMaxCalc);\n      setNumericHeaders(numeric);\n      setStringHeaders(strings);\n      setTotalRows(aggregatedData.length);\n      setTotalColumns(headers.length);\n      const uniqueStates = Object.keys(stateDataMap);\n      setStateList(uniqueStates);\n    } else {\n      alert('No data available after filtering.');\n    }\n    setProgress(prev => ({\n      ...prev,\n      preprocess: 100\n    }));\n\n    // Reset markersAdded state when new data is uploaded\n    setMarkersAdded(false);\n  }, [reverseGeocodeState, geocodeLocation]);\n  const handleFileUpload = event => {\n    setProgress({\n      upload: 0,\n      preprocess: 0,\n      geocode: 0\n    });\n    setProgressMessages({\n      upload: '',\n      preprocess: '',\n      geocode: ''\n    });\n    const file = event.target.files[0];\n    if (file) {\n      const fileExtension = file.name.split('.').pop().toLowerCase();\n      if (fileExtension === 'json') {\n        const reader = new FileReader();\n        reader.onload = async e => {\n          try {\n            const data = JSON.parse(e.target.result);\n            setProgress(prev => ({\n              ...prev,\n              upload: 100\n            }));\n            setProgressMessages(prev => ({\n              ...prev,\n              upload: 'Dataset uploaded successfully.'\n            }));\n            await handlePreprocess(data);\n          } catch (error) {\n            console.error('Invalid JSON format:', error);\n            alert('Error: Uploaded file is not valid JSON.');\n          }\n        };\n        reader.readAsText(file);\n      } else if (fileExtension === 'csv') {\n        Papa.parse(file, {\n          header: true,\n          skipEmptyLines: true,\n          beforeFirstChunk: chunk => {\n            // Datasets with metadata rows\n            const lines = chunk.trim().split('\\n');\n            const dataStartIndex = lines.findIndex(line => line.toLowerCase().startsWith('country name') || line.toLowerCase().startsWith('state') || line.toLowerCase().startsWith('rowid') || line.toLowerCase().startsWith('longitude') || line.toLowerCase().startsWith('latitude'));\n            if (dataStartIndex > 0) {\n              return lines.slice(dataStartIndex).join('\\n');\n            }\n            return chunk;\n          },\n          complete: async results => {\n            setProgress(prev => ({\n              ...prev,\n              upload: 100\n            }));\n            setProgressMessages(prev => ({\n              ...prev,\n              upload: 'Dataset uploaded successfully.'\n            }));\n            await handlePreprocess(results.data);\n          },\n          error: error => {\n            console.error('CSV parsing error:', error);\n            alert('Error: Failed to parse CSV file.');\n          }\n        });\n      } else {\n        alert('Please upload a valid JSON or CSV file.');\n      }\n    }\n  };\n\n  // Progress indicators\n  useEffect(() => {\n    if (progress.preprocess === 100) {\n      setProgressMessages(prev => ({\n        ...prev,\n        preprocess: 'Preprocessing completed.'\n      }));\n    }\n  }, [progress.preprocess]);\n  useEffect(() => {\n    if (progress.geocode === 100) {\n      setProgressMessages(prev => ({\n        ...prev,\n        geocode: 'Locations marked on the map.'\n      }));\n    }\n  }, [progress.geocode]);\n\n  // Markers on Map\n  const renderMarkers = useCallback(() => {\n    if (map && geoData.length > 0) {\n      if (stateList.length === 0) {\n        alert('Data is not aggregated by state. Cannot mark locations on the map.');\n        return;\n      }\n\n      // Remove existing markers\n      markers.forEach(marker => marker.remove());\n      const newMarkers = [];\n      geoData.forEach(data => {\n        const stateName = data.state;\n        const coords = stateCoordinates[stateName];\n        if (!coords) return;\n        const latitude = parseFloat(coords.latitude);\n        const longitude = parseFloat(coords.longitude);\n        if (!isNaN(latitude) && !isNaN(longitude)) {\n          // Create Marker Element with crossOrigin\n          const el = document.createElement('div');\n          el.className = 'marker';\n          const img = new Image();\n          img.crossOrigin = 'anonymous'; // Ensure cross-origin is set\n          const isSelected = selectedLocation ? selectedLocation.state === data.state : false;\n          const isCompared = compareMarkersEnabled ? [selectedState1, selectedState2].includes(stateName) : false;\n          const icon = isSelected ? redMarkerIcon : isCompared ? yellowMarkerIcon : blueMarkerIcon;\n          img.src = icon;\n          img.style.width = '30px';\n          img.style.height = '30px';\n          img.style.cursor = 'pointer';\n          el.appendChild(img);\n          const marker = new mapboxgl.Marker(el).setLngLat([longitude, latitude]).addTo(map);\n          const popup = new mapboxgl.Popup({\n            offset: 25\n          }).setText(stateName);\n          marker.setPopup(popup);\n          marker.getElement().addEventListener('click', () => {\n            handleLocationSelect(data);\n          });\n          newMarkers.push(marker);\n        }\n      });\n      setMarkers(newMarkers);\n      setMarkersAdded(true);\n      setProgress(prev => ({\n        ...prev,\n        geocode: 100\n      }));\n      setProgressMessages(prev => ({\n        ...prev,\n        geocode: 'Locations marked on the map.'\n      }));\n    }\n  }, [map, geoData, selectedLocation, stateCoordinates, markers, stateList, compareMarkersEnabled, selectedState1, selectedState2, handleLocationSelect]);\n\n  // Re-render markers when selectedLocation or comparison changes\n  useEffect(() => {\n    if (markersAdded) {\n      renderMarkers();\n    }\n  }, [selectedLocation, compareMarkersEnabled]);\n\n  // Comparison Selected state\n  const handleStateSelection = () => {\n    if (selectedState1 && selectedState2) {\n      const data1 = geoData.find(item => item.state === selectedState1);\n      const data2 = geoData.find(item => item.state === selectedState2);\n      if (!data1 || !data2) {\n        alert('One or both selected states have no data.');\n        return;\n      }\n      const labels = numericHeaders;\n      const dataset = {\n        labels,\n        datasets: [{\n          label: selectedState1,\n          data: numericHeaders.map(header => {\n            const value = data1[header] || 0;\n            const {\n              min,\n              max\n            } = globalMinMax[header] || {\n              min: 0,\n              max: 1\n            };\n            const normalizedValue = max !== min ? (value - min) / (max - min) * 9.5 + 0.5 : 5;\n            return isFinite(normalizedValue) ? normalizedValue : 0.5;\n          }),\n          actualValues: numericHeaders.map(header => data1[header] || 0),\n          backgroundColor: 'rgba(255, 99, 132, 0.5)',\n          borderColor: 'rgba(255, 99, 132, 1)',\n          borderWidth: 1\n        }, {\n          label: selectedState2,\n          data: numericHeaders.map(header => {\n            const value = data2[header] || 0;\n            const {\n              min,\n              max\n            } = globalMinMax[header] || {\n              min: 0,\n              max: 1\n            };\n            const normalizedValue = max !== min ? (value - min) / (max - min) * 9.5 + 0.5 : 5;\n            return isFinite(normalizedValue) ? normalizedValue : 0.5;\n          }),\n          actualValues: numericHeaders.map(header => data2[header] || 0),\n          backgroundColor: 'rgba(54, 162, 235, 0.5)',\n          borderColor: 'rgba(54, 162, 235, 1)',\n          borderWidth: 1\n        }]\n      };\n      setChartData(dataset);\n      setSelectedLocation(null);\n      setCompareMarkersEnabled(true);\n\n      // Selected states\n      renderMarkers();\n    }\n  };\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: chartType === 'Bar' ? {\n      y: {\n        beginAtZero: true,\n        min: 0.5,\n        max: 10\n      }\n    } : {},\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      datalabels: {\n        display: true,\n        color: '#000',\n        align: 'center',\n        anchor: 'center',\n        formatter: function (value, context) {\n          const dataset = context.chart.data.datasets[context.datasetIndex];\n          if (dataset.actualValues) {\n            const actualValue = dataset.actualValues[context.dataIndex];\n            if (typeof actualValue === 'number' && isFinite(actualValue)) {\n              return actualValue.toFixed(2);\n            } else {\n              return '';\n            }\n          } else {\n            if (typeof value === 'number' && isFinite(value)) {\n              return value.toFixed(2);\n            } else {\n              return '';\n            }\n          }\n        }\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            const dataset = context.dataset;\n            const actualValue = dataset.actualValues ? dataset.actualValues[context.dataIndex] : context.parsed.y;\n            if (typeof actualValue === 'number' && isFinite(actualValue)) {\n              return `${context.label}: ${actualValue.toFixed(2)}`;\n            } else {\n              return `${context.label}: ${actualValue || ''}`;\n            }\n          }\n        }\n      }\n    }\n  };\n\n  // Expose methods via ref\n  useImperativeHandle(ref, () => ({\n    exportMapAsImage: () => {\n      handleExportAsImage();\n    }\n  }));\n\n  // Adjust the handleExportAsImage function to include the progress bar\n  const handleExportAsImage = async () => {\n    try {\n      // Capture the upload and dataset details section\n      const uploadDataUrl = await domtoimage.toPng(uploadRef.current, {\n        cacheBust: true,\n        style: {\n          transform: 'scale(1)'\n        }\n      });\n\n      // Capture the progress bars\n      const progressDataUrl = await domtoimage.toPng(progressRef.current, {\n        cacheBust: true,\n        style: {\n          transform: 'scale(1)'\n        }\n      });\n\n      // Capture the map canvas\n      const mapCanvas = map.getCanvas();\n      const mapDataUrl = mapCanvas.toDataURL('image/png');\n\n      // Capture the sidebar\n      const sidebarDataUrl = await domtoimage.toPng(sidebarRef.current, {\n        cacheBust: true,\n        style: {\n          transform: 'scale(1)'\n        }\n      });\n\n      // Combine and export\n      combineImages(uploadDataUrl, progressDataUrl, mapDataUrl, sidebarDataUrl);\n    } catch (error) {\n      console.error('Export failed:', error);\n      alert('Export failed. Please try again.');\n    }\n  };\n\n  // Adjust the combineImages function\n  const combineImages = (uploadDataUrl, progressDataUrl, mapDataUrl, sidebarDataUrl) => {\n    const uploadImage = new Image();\n    uploadImage.src = uploadDataUrl;\n    uploadImage.crossOrigin = 'anonymous';\n    const progressImage = new Image();\n    progressImage.src = progressDataUrl;\n    progressImage.crossOrigin = 'anonymous';\n    const mapImage = new Image();\n    mapImage.src = mapDataUrl;\n    mapImage.crossOrigin = 'anonymous';\n    const sidebarImage = new Image();\n    sidebarImage.src = sidebarDataUrl;\n    sidebarImage.crossOrigin = 'anonymous';\n    Promise.all([new Promise(resolve => uploadImage.onload = resolve), new Promise(resolve => progressImage.onload = resolve), new Promise(resolve => mapImage.onload = resolve), new Promise(resolve => sidebarImage.onload = resolve)]).then(() => {\n      const leftWidth = Math.max(uploadImage.width, mapImage.width);\n      const totalHeight = uploadImage.height + progressImage.height + mapImage.height;\n      const totalWidth = leftWidth + sidebarImage.width;\n      const canvas = document.createElement('canvas');\n      canvas.width = totalWidth;\n      canvas.height = Math.max(totalHeight, sidebarImage.height);\n      const ctx = canvas.getContext('2d');\n\n      // Draw upload and dataset details at the top left\n      ctx.drawImage(uploadImage, 0, 0);\n\n      // Draw progress bars below the upload section\n      ctx.drawImage(progressImage, 0, uploadImage.height);\n\n      // Draw map below the progress bars\n      ctx.drawImage(mapImage, 0, uploadImage.height + progressImage.height);\n\n      // Draw sidebar on the right\n      ctx.drawImage(sidebarImage, leftWidth, 0);\n      canvas.toBlob(blob => {\n        const link = document.createElement('a');\n        link.download = 'map_view.jpg';\n        link.href = URL.createObjectURL(blob);\n        link.click();\n      }, 'image/jpeg', 0.95);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.leftContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.topLeftContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          ref: uploadRef,\n          style: styles.uploadContainer,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.section,\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              style: styles.sectionTitle,\n              children: \"Upload Data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 852,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              accept: \".json, .csv\",\n              onChange: handleFileUpload,\n              style: styles.fileInput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 853,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 851,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 849,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.datasetContainer,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.section,\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              style: styles.sectionTitle,\n              children: \"Dataset Details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 865,\n              columnNumber: 15\n            }, this), geoData.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n              style: styles.datasetDetails,\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Rows:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 869,\n                  columnNumber: 21\n                }, this), \" \", totalRows]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 868,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Columns:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 872,\n                  columnNumber: 21\n                }, this), \" \", totalColumns]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 871,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Numeric Columns:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 875,\n                  columnNumber: 21\n                }, this), \" \", numericHeaders.join(', ')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 874,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"String Columns:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 878,\n                  columnNumber: 21\n                }, this), \" \", stringHeaders.join(', ')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 877,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 867,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No dataset uploaded yet.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 882,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 864,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 863,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 848,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: progressRef,\n        style: styles.progressContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.progressItem,\n          children: [/*#__PURE__*/_jsxDEV(LoadingBar, {\n            progress: progress.upload\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 891,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.progressMessage,\n            children: progressMessages.upload\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 892,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 890,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.progressItem,\n          children: [/*#__PURE__*/_jsxDEV(LoadingBar, {\n            progress: progress.preprocess\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 895,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.progressMessage,\n            children: progressMessages.preprocess\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 896,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 894,\n          columnNumber: 11\n        }, this), dataNeedsGeocoding && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.progressItem,\n          children: [/*#__PURE__*/_jsxDEV(LoadingBar, {\n            progress: progress.geocode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 900,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.progressMessage,\n            children: progressMessages.geocode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 901,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 899,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 889,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.mapContainer,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: mapContainerRef,\n          style: styles.map\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 908,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 907,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 847,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: sidebarRef,\n      style: styles.sidebar,\n      children: [stateList.length >= 2 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.section,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          style: styles.sectionTitle,\n          children: \"Compare Two States\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 917,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.inputGroup,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            style: styles.inputLabel,\n            children: \"State 1:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 919,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedState1,\n            onChange: e => setSelectedState1(e.target.value),\n            style: styles.selectDropdown,\n            disabled: stateList.length === 0,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select State\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 926,\n              columnNumber: 17\n            }, this), stateList.map(state => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: state,\n              children: state\n            }, state, false, {\n              fileName: _jsxFileName,\n              lineNumber: 928,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 920,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 918,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.inputGroup,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            style: styles.inputLabel,\n            children: \"State 2:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 935,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedState2,\n            onChange: e => setSelectedState2(e.target.value),\n            style: styles.selectDropdown,\n            disabled: stateList.length === 0,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select State\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 942,\n              columnNumber: 17\n            }, this), stateList.map(state => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: state,\n              children: state\n            }, state, false, {\n              fileName: _jsxFileName,\n              lineNumber: 944,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 936,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 934,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleStateSelection,\n          disabled: !selectedState1 || !selectedState2,\n          style: {\n            ...styles.chartButton,\n            backgroundColor: selectedState1 && selectedState2 ? '#28a745' : '#6c757d'\n          },\n          children: \"Compare\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 950,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 916,\n        columnNumber: 11\n      }, this) : geoData.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.section,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          style: styles.sectionTitle,\n          children: \"Compare Two States\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 964,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: '#6c757d'\n          },\n          children: \"Comparison is enabled when the dataset contains at least two unique states.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 965,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 963,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.section,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          style: styles.sectionTitle,\n          children: \"Select Chart Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 973,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.chartOptions,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setChartType('Bar'),\n            style: {\n              ...styles.chartButton,\n              ...(chartType === 'Bar' ? styles.chartButtonActive : {})\n            },\n            children: \"Bar Chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 975,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setChartType('Pie'),\n            style: {\n              ...styles.chartButton,\n              ...(chartType === 'Pie' ? styles.chartButtonActive : {})\n            },\n            children: \"Pie Chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 984,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setChartType('Doughnut'),\n            style: {\n              ...styles.chartButton,\n              ...(chartType === 'Doughnut' ? styles.chartButtonActive : {})\n            },\n            children: \"Doughnut Chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 993,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setChartType('PolarArea'),\n            style: {\n              ...styles.chartButton,\n              ...(chartType === 'PolarArea' ? styles.chartButtonActive : {})\n            },\n            children: \"PolarArea Chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1002,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 974,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 972,\n        columnNumber: 9\n      }, this), chartData && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.chartContainer,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.chartWrapper,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.chartContent,\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [chartType, \" Chart\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1019,\n              columnNumber: 17\n            }, this), chartType === 'Bar' && /*#__PURE__*/_jsxDEV(Bar, {\n              data: chartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1021,\n              columnNumber: 19\n            }, this), chartType === 'Pie' && /*#__PURE__*/_jsxDEV(Pie, {\n              data: chartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1024,\n              columnNumber: 19\n            }, this), chartType === 'Doughnut' && /*#__PURE__*/_jsxDEV(Doughnut, {\n              data: chartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1027,\n              columnNumber: 19\n            }, this), chartType === 'PolarArea' && /*#__PURE__*/_jsxDEV(PolarArea, {\n              data: chartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1030,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1018,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1017,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1016,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 913,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 846,\n    columnNumber: 5\n  }, this);\n}, \"3d0sa6OHZwQOUsJ+O/K/dXvERrU=\")), \"3d0sa6OHZwQOUsJ+O/K/dXvERrU=\");\n_c3 = MapView;\nexport default MapView;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"LoadingBar\");\n$RefreshReg$(_c2, \"MapView$forwardRef\");\n$RefreshReg$(_c3, \"MapView\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","forwardRef","useImperativeHandle","mapboxgl","Papa","Bar","Pie","Doughnut","PolarArea","Chart","ChartJS","RadialLinearScale","CategoryScale","LinearScale","BarElement","ArcElement","Title","Tooltip","Legend","ChartDataLabels","domtoimage","styles","preprocessData","MAPBOX_TOKEN","blueMarkerIcon","redMarkerIcon","yellowMarkerIcon","jsxDEV","_jsxDEV","register","accessToken","LoadingBar","progress","style","width","backgroundColor","height","borderRadius","children","transition","fileName","_jsxFileName","lineNumber","columnNumber","_c","MapView","_s","_c2","props","ref","map","setMap","geoData","setGeoData","numericHeaders","setNumericHeaders","stringHeaders","setStringHeaders","selectedLocation","setSelectedLocation","chartType","setChartType","chartData","setChartData","totalRows","setTotalRows","totalColumns","setTotalColumns","markers","setMarkers","setProgress","upload","preprocess","geocode","progressMessages","setProgressMessages","stateList","setStateList","selectedState1","setSelectedState1","selectedState2","setSelectedState2","locationColumn","setLocationColumn","markersAdded","setMarkersAdded","dataNeedsGeocoding","setDataNeedsGeocoding","compareMarkersEnabled","setCompareMarkersEnabled","stateCoordinates","setStateCoordinates","globalMinMax","setGlobalMinMax","mapContainerRef","containerRef","sidebarRef","uploadRef","progressRef","initializeMap","Map","container","current","center","zoom","preserveDrawingBuffer","nav","NavigationControl","addControl","getCanvas","addEventListener","event","preventDefault","console","error","log","remove","reverseGeocodeState","latitude","longitude","response","fetch","data","json","features","length","text","trim","toUpperCase","geocodeLocation","locationName","encodeURIComponent","generateChartData","locationData","locationValues","header","label","value","parseFloat","normalizedValues","item","min","max","normalizedValue","isFinite","actualValue","labels","datasets","state","actualValues","borderColor","borderWidth","handleLocationSelect","handlePreprocess","rawData","prev","cleanRawData","filter","undefined","Object","keys","dataContainsLatLng","some","possibleLocationColumns","detectedLocationColumn","find","col","key","toLowerCase","alert","processedData","stateDataMap","stateCoordsMap","numericFields","Set","stateName","includes","coords","isNaN","count","forEach","add","aggregatedData","values","parsedValue","headers","numeric","strings","isNumeric","every","push","globalMinMaxCalc","Math","uniqueStates","handleFileUpload","file","target","files","fileExtension","name","split","pop","reader","FileReader","onload","e","JSON","parse","result","readAsText","skipEmptyLines","beforeFirstChunk","chunk","lines","dataStartIndex","findIndex","line","startsWith","slice","join","complete","results","renderMarkers","marker","newMarkers","el","document","createElement","className","img","Image","crossOrigin","isSelected","isCompared","icon","src","cursor","appendChild","Marker","setLngLat","addTo","popup","Popup","offset","setText","setPopup","getElement","handleStateSelection","data1","data2","dataset","chartOptions","responsive","maintainAspectRatio","scales","y","beginAtZero","plugins","legend","position","datalabels","display","color","align","anchor","formatter","context","chart","datasetIndex","dataIndex","toFixed","tooltip","callbacks","parsed","exportMapAsImage","handleExportAsImage","uploadDataUrl","toPng","cacheBust","transform","progressDataUrl","mapCanvas","mapDataUrl","toDataURL","sidebarDataUrl","combineImages","uploadImage","progressImage","mapImage","sidebarImage","Promise","all","resolve","then","leftWidth","totalHeight","totalWidth","canvas","ctx","getContext","drawImage","toBlob","blob","link","download","href","URL","createObjectURL","click","leftContainer","topLeftContainer","uploadContainer","section","sectionTitle","type","accept","onChange","fileInput","datasetContainer","datasetDetails","progressContainer","progressItem","progressMessage","mapContainer","sidebar","inputGroup","inputLabel","selectDropdown","disabled","onClick","chartButton","chartButtonActive","chartContainer","chartWrapper","chartContent","options","_c3","$RefreshReg$"],"sources":["/Users/girishkumarpatchikoru/Desktop/projecthci/geovizproject/frontend/src/components/MapView.js"],"sourcesContent":["// src/components/MapView.js\r\n\r\nimport React, {\r\n  useEffect,\r\n  useState,\r\n  useCallback,\r\n  useRef,\r\n  forwardRef,\r\n  useImperativeHandle,\r\n} from 'react';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport 'mapbox-gl/dist/mapbox-gl.css'; // Import Mapbox GL CSS locally\r\nimport Papa from 'papaparse';\r\nimport { Bar, Pie, Doughnut, PolarArea } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  RadialLinearScale,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\nimport domtoimage from 'dom-to-image-more';\r\n\r\nimport styles from './styles';\r\nimport preprocessData from './preprocessData';\r\nimport { MAPBOX_TOKEN } from './constants'; // Make sure to include your Mapbox access token\r\nimport blueMarkerIcon from '../assets/images/custom-marker-blue.png';\r\nimport redMarkerIcon from '../assets/images/custom-marker-red.png';\r\nimport yellowMarkerIcon from '../assets/images/custom-marker-yellow.png'; // Comparison markers\r\nimport './marker.css';\r\n\r\nChartJS.register(\r\n  RadialLinearScale,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  ChartDataLabels\r\n);\r\n\r\n// Set Mapbox access token\r\nmapboxgl.accessToken = MAPBOX_TOKEN;\r\n\r\n// Loading Bar\r\nconst LoadingBar = ({ progress }) => (\r\n  <div\r\n    style={{\r\n      width: '100%',\r\n      backgroundColor: '#ddd',\r\n      height: '10px',\r\n      borderRadius: '5px',\r\n    }}\r\n  >\r\n    <div\r\n      style={{\r\n        width: `${progress}%`,\r\n        height: '100%',\r\n        backgroundColor: '#28a745',\r\n        borderRadius: '5px',\r\n        transition: 'width 0.3s ease',\r\n      }}\r\n    ></div>\r\n  </div>\r\n);\r\n\r\n// Use forwardRef to pass ref to the MapView component\r\nconst MapView = forwardRef((props, ref) => {\r\n  const [map, setMap] = useState(null);\r\n  const [geoData, setGeoData] = useState([]);\r\n  const [numericHeaders, setNumericHeaders] = useState([]);\r\n  const [stringHeaders, setStringHeaders] = useState([]);\r\n  const [selectedLocation, setSelectedLocation] = useState(null);\r\n  const [chartType, setChartType] = useState('Bar');\r\n  const [chartData, setChartData] = useState(null);\r\n  const [totalRows, setTotalRows] = useState(0);\r\n  const [totalColumns, setTotalColumns] = useState(0);\r\n  const [markers, setMarkers] = useState([]);\r\n  const [progress, setProgress] = useState({\r\n    upload: 0,\r\n    preprocess: 0,\r\n    geocode: 0,\r\n  });\r\n  const [progressMessages, setProgressMessages] = useState({\r\n    upload: '',\r\n    preprocess: '',\r\n    geocode: '',\r\n  });\r\n  const [stateList, setStateList] = useState([]);\r\n  const [selectedState1, setSelectedState1] = useState('');\r\n  const [selectedState2, setSelectedState2] = useState('');\r\n  const [locationColumn, setLocationColumn] = useState('');\r\n  const [markersAdded, setMarkersAdded] = useState(false);\r\n  const [dataNeedsGeocoding, setDataNeedsGeocoding] = useState(false);\r\n  const [compareMarkersEnabled, setCompareMarkersEnabled] = useState(false);\r\n  const [stateCoordinates, setStateCoordinates] = useState({});\r\n  const [globalMinMax, setGlobalMinMax] = useState({});\r\n\r\n  // Refs\r\n  const mapContainerRef = useRef(null); // Map container ref\r\n  const containerRef = useRef(null); // Main container ref\r\n  const sidebarRef = useRef(null); // Sidebar ref\r\n  const uploadRef = useRef(null); // Upload and dataset details container ref\r\n  const progressRef = useRef(null); // Progress container ref\r\n\r\n  useEffect(() => {\r\n    const initializeMap = new mapboxgl.Map({\r\n      container: mapContainerRef.current,\r\n      style: 'mapbox://styles/mapbox/streets-v11',\r\n      center: [-98.5795, 39.8283], // Centered on USA\r\n      zoom: 3,\r\n      preserveDrawingBuffer: true, // Important for capturing the canvas\r\n    });\r\n    const nav = new mapboxgl.NavigationControl();\r\n    initializeMap.addControl(nav, 'top-right');\r\n\r\n    // Add error handling for WebGL context loss\r\n    initializeMap.getCanvas().addEventListener('webglcontextlost', (event) => {\r\n      event.preventDefault();\r\n      console.error('WebGL context lost');\r\n    });\r\n\r\n    initializeMap.getCanvas().addEventListener('webglcontextrestored', () => {\r\n      console.log('WebGL context restored');\r\n    });\r\n\r\n    setMap(initializeMap);\r\n\r\n    // Clean up on unmount\r\n    return () => initializeMap.remove();\r\n  }, []);\r\n\r\n  // Reverse Geocode Function to get State Name\r\n  const reverseGeocodeState = useCallback(async (latitude, longitude) => {\r\n    try {\r\n      const response = await fetch(\r\n        `https://api.mapbox.com/geocoding/v5/mapbox.places/${longitude},${latitude}.json?types=region&access_token=${MAPBOX_TOKEN}`\r\n      );\r\n      const data = await response.json();\r\n      if (data.features && data.features.length > 0) {\r\n        return data.features[0].text.trim().toUpperCase();\r\n      } else {\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Reverse geocoding error:', error);\r\n      return null;\r\n    }\r\n  }, []);\r\n\r\n  // Geocode Function to get coordinates from location name\r\n  const geocodeLocation = useCallback(async (locationName) => {\r\n    if (!locationName) return { latitude: null, longitude: null };\r\n    try {\r\n      const response = await fetch(\r\n        `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(\r\n          locationName\r\n        )}.json?access_token=${MAPBOX_TOKEN}&limit=1`\r\n      );\r\n      const data = await response.json();\r\n      if (data.features && data.features.length > 0) {\r\n        const [longitude, latitude] = data.features[0].center;\r\n        return { latitude, longitude };\r\n      }\r\n      return { latitude: null, longitude: null };\r\n    } catch (error) {\r\n      console.error('Geocoding error:', error);\r\n      return { latitude: null, longitude: null };\r\n    }\r\n  }, []);\r\n\r\n  const generateChartData = useCallback(\r\n    (locationData) => {\r\n      if (locationData) {\r\n        const locationValues = numericHeaders.map((header) => ({\r\n          label: header,\r\n          value: parseFloat(locationData[header]) || 0,\r\n        }));\r\n\r\n        const normalizedValues = locationValues.map((item) => {\r\n          const { min, max } = globalMinMax[item.label] || { min: 0, max: 1 };\r\n          const normalizedValue =\r\n            max !== min ? ((item.value - min) / (max - min)) * 9.5 + 0.5 : 5;\r\n          return {\r\n            label: item.label,\r\n            normalizedValue: isFinite(normalizedValue) ? normalizedValue : 0.5,\r\n            actualValue: item.value,\r\n          };\r\n        });\r\n\r\n        setChartData({\r\n          labels: normalizedValues.map((item) => item.label),\r\n          datasets: [\r\n            {\r\n              label: locationData.state,\r\n              data: normalizedValues.map((item) => item.normalizedValue),\r\n              actualValues: normalizedValues.map((item) => item.actualValue),\r\n              backgroundColor: [\r\n                'rgba(255, 99, 132, 0.5)',\r\n                'rgba(54, 162, 235, 0.5)',\r\n                'rgba(255, 206, 86, 0.5)',\r\n                'rgba(75, 192, 192, 0.5)',\r\n                'rgba(153, 102, 255, 0.5)',\r\n                'rgba(255, 159, 64, 0.5)',\r\n                'rgba(255, 99, 132, 0.5)',\r\n                'rgba(54, 162, 235, 0.5)',\r\n                'rgba(255, 206, 86, 0.5)',\r\n              ],\r\n              borderColor: [\r\n                'rgba(255, 99, 132, 1)',\r\n                'rgba(54, 162, 235, 1)',\r\n                'rgba(255, 206, 86, 1)',\r\n                'rgba(75, 192, 192, 1)',\r\n                'rgba(153, 102, 255, 1)',\r\n                'rgba(255, 159, 64, 1)',\r\n                'rgba(255, 99, 132, 1)',\r\n                'rgba(54, 162, 235, 1)',\r\n                'rgba(255, 206, 86, 1)',\r\n              ],\r\n              borderWidth: 1,\r\n            },\r\n          ],\r\n        });\r\n      }\r\n    },\r\n    [numericHeaders, globalMinMax]\r\n  );\r\n\r\n  // Handle Location Selection from Map\r\n  const handleLocationSelect = useCallback(\r\n    (locationData) => {\r\n      console.log('Marker clicked:', locationData);\r\n\r\n      setSelectedState1('');\r\n      setSelectedState2('');\r\n      setCompareMarkersEnabled(false);\r\n\r\n      // Clicked state is already selected, deselect it\r\n      if (selectedLocation && selectedLocation.state === locationData.state) {\r\n        setSelectedLocation(null);\r\n        setChartData(null);\r\n      } else {\r\n        setSelectedLocation(locationData);\r\n        generateChartData(locationData);\r\n      }\r\n    },\r\n    [selectedLocation, generateChartData]\r\n  );\r\n\r\n  // Data Generation\r\n  useEffect(() => {\r\n    if (selectedLocation) {\r\n      generateChartData(selectedLocation);\r\n    } else {\r\n      setChartData(null);\r\n    }\r\n  }, [selectedLocation]);\r\n\r\n  // Preprocess Data Function\r\n  const handlePreprocess = useCallback(\r\n    async (rawData) => {\r\n      setProgress((prev) => ({ ...prev, preprocess: 0 }));\r\n\r\n      // Remove null, undefined, and inconsistent data rows\r\n      const cleanRawData = rawData.filter(\r\n        (item) =>\r\n          item !== null && item !== undefined && Object.keys(item).length > 0\r\n      );\r\n      const dataContainsLatLng = cleanRawData.some(\r\n        (item) => item.latitude && item.longitude\r\n      );\r\n\r\n      setDataNeedsGeocoding(!dataContainsLatLng);\r\n      const possibleLocationColumns = ['state', 'province', 'city'];\r\n      let detectedLocationColumn = possibleLocationColumns.find((col) =>\r\n        cleanRawData[0] &&\r\n        Object.keys(cleanRawData[0]).some(\r\n          (key) => key.toLowerCase() === col.toLowerCase()\r\n        )\r\n      );\r\n\r\n      setLocationColumn(detectedLocationColumn || '');\r\n\r\n      console.log('Detected Location Column:', detectedLocationColumn);\r\n\r\n      if (!detectedLocationColumn && !dataContainsLatLng) {\r\n        alert('No valid location column found in the dataset.');\r\n        return;\r\n      }\r\n\r\n      // Preprocess data\r\n      const processedData = await preprocessData(cleanRawData, setProgress);\r\n\r\n      console.log(\r\n        'Number of Data Points After Preprocessing:',\r\n        processedData.length\r\n      );\r\n\r\n      if (!processedData || processedData.length === 0) {\r\n        alert('No data available after filtering.');\r\n        return;\r\n      }\r\n\r\n      setProgress((prev) => ({ ...prev, preprocess: 50 }));\r\n      const stateDataMap = {};\r\n      const stateCoordsMap = {};\r\n      const numericFields = new Set();\r\n\r\n      if (detectedLocationColumn || dataContainsLatLng) {\r\n        for (const item of processedData) {\r\n          let stateName = '';\r\n\r\n          if (detectedLocationColumn) {\r\n            stateName = item[detectedLocationColumn];\r\n            if (detectedLocationColumn.toLowerCase().includes('city')) {\r\n              // If the location column is a city, we need to get the state name\r\n              const coords = await geocodeLocation(stateName);\r\n              if (coords.latitude && coords.longitude) {\r\n                stateName = await reverseGeocodeState(\r\n                  coords.latitude,\r\n                  coords.longitude\r\n                );\r\n                if (!stateName) continue;\r\n              } else {\r\n                continue;\r\n              }\r\n            } else {\r\n              stateName = stateName.trim().toUpperCase();\r\n            }\r\n          } else if (dataContainsLatLng) {\r\n            const latitude = parseFloat(item.latitude);\r\n            const longitude = parseFloat(item.longitude);\r\n            if (!isNaN(latitude) && !isNaN(longitude)) {\r\n              stateName = await reverseGeocodeState(latitude, longitude);\r\n              if (stateName) {\r\n                stateName = stateName.trim().toUpperCase();\r\n              } else {\r\n                continue;\r\n              }\r\n            } else {\r\n              continue;\r\n            }\r\n          }\r\n\r\n          if (!stateName) continue;\r\n\r\n          // Aggregate data per state\r\n          if (!stateDataMap[stateName]) {\r\n            stateDataMap[stateName] = { ...item };\r\n            stateDataMap[stateName].state = stateName;\r\n            stateDataMap[stateName].count = 1;\r\n\r\n            // Store coordinates for the first occurrence\r\n            const latitude = parseFloat(item.latitude);\r\n            const longitude = parseFloat(item.longitude);\r\n            if (!isNaN(latitude) && !isNaN(longitude)) {\r\n              stateCoordsMap[stateName] = { latitude, longitude };\r\n            }\r\n          } else {\r\n            // Sum numeric fields\r\n            Object.keys(item).forEach((key) => {\r\n              if (key.toLowerCase() === 'state') return;\r\n              const value = parseFloat(item[key]);\r\n              if (!isNaN(value)) {\r\n                numericFields.add(key);\r\n                stateDataMap[stateName][key] =\r\n                  (stateDataMap[stateName][key] || 0) + value;\r\n              }\r\n            });\r\n            stateDataMap[stateName].count += 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      setProgress((prev) => ({ ...prev, preprocess: 80 }));\r\n      const aggregatedData = Object.values(stateDataMap).map((item) => {\r\n        const count = item.count || 1;\r\n        numericFields.forEach((key) => {\r\n          const parsedValue = parseFloat(item[key]);\r\n          if (!isNaN(parsedValue)) {\r\n            item[key] = parsedValue / count;\r\n          } else {\r\n            item[key] = 0;\r\n          }\r\n        });\r\n        return item;\r\n      });\r\n\r\n      setGeoData(aggregatedData);\r\n      setStateCoordinates(stateCoordsMap);\r\n\r\n      // Checking numeric and string headers\r\n      if (aggregatedData.length > 0) {\r\n        const headers = Object.keys(aggregatedData[0]);\r\n        const numeric = [];\r\n        const strings = [];\r\n\r\n        headers.forEach((header) => {\r\n          if (\r\n            [\r\n              'latitude',\r\n              'longitude',\r\n              'GeoLocation',\r\n              'locationID',\r\n              'count',\r\n              'state',\r\n            ].includes(header)\r\n          )\r\n            return;\r\n\r\n          const isNumeric = aggregatedData.every((item) => {\r\n            const value = parseFloat(item[header]);\r\n            return !isNaN(value);\r\n          });\r\n          if (isNumeric) {\r\n            numeric.push(header);\r\n          } else {\r\n            strings.push(header);\r\n          }\r\n        });\r\n        const globalMinMaxCalc = {};\r\n        numeric.forEach((header) => {\r\n          const values = aggregatedData.map((item) => parseFloat(item[header]));\r\n          globalMinMaxCalc[header] = {\r\n            min: Math.min(...values),\r\n            max: Math.max(...values),\r\n          };\r\n        });\r\n        setGlobalMinMax(globalMinMaxCalc);\r\n\r\n        setNumericHeaders(numeric);\r\n        setStringHeaders(strings);\r\n\r\n        setTotalRows(aggregatedData.length);\r\n        setTotalColumns(headers.length);\r\n        const uniqueStates = Object.keys(stateDataMap);\r\n        setStateList(uniqueStates);\r\n      } else {\r\n        alert('No data available after filtering.');\r\n      }\r\n\r\n      setProgress((prev) => ({ ...prev, preprocess: 100 }));\r\n\r\n      // Reset markersAdded state when new data is uploaded\r\n      setMarkersAdded(false);\r\n    },\r\n    [reverseGeocodeState, geocodeLocation]\r\n  );\r\n\r\n  const handleFileUpload = (event) => {\r\n    setProgress({\r\n      upload: 0,\r\n      preprocess: 0,\r\n      geocode: 0,\r\n    });\r\n    setProgressMessages({\r\n      upload: '',\r\n      preprocess: '',\r\n      geocode: '',\r\n    });\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      const fileExtension = file.name.split('.').pop().toLowerCase();\r\n\r\n      if (fileExtension === 'json') {\r\n        const reader = new FileReader();\r\n        reader.onload = async (e) => {\r\n          try {\r\n            const data = JSON.parse(e.target.result);\r\n            setProgress((prev) => ({ ...prev, upload: 100 }));\r\n            setProgressMessages((prev) => ({\r\n              ...prev,\r\n              upload: 'Dataset uploaded successfully.',\r\n            }));\r\n            await handlePreprocess(data);\r\n          } catch (error) {\r\n            console.error('Invalid JSON format:', error);\r\n            alert('Error: Uploaded file is not valid JSON.');\r\n          }\r\n        };\r\n        reader.readAsText(file);\r\n      } else if (fileExtension === 'csv') {\r\n        Papa.parse(file, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          beforeFirstChunk: (chunk) => {\r\n            // Datasets with metadata rows\r\n            const lines = chunk.trim().split('\\n');\r\n            const dataStartIndex = lines.findIndex(\r\n              (line) =>\r\n                line.toLowerCase().startsWith('country name') ||\r\n                line.toLowerCase().startsWith('state') ||\r\n                line.toLowerCase().startsWith('rowid') ||\r\n                line.toLowerCase().startsWith('longitude') ||\r\n                line.toLowerCase().startsWith('latitude')\r\n            );\r\n            if (dataStartIndex > 0) {\r\n              return lines.slice(dataStartIndex).join('\\n');\r\n            }\r\n            return chunk;\r\n          },\r\n          complete: async (results) => {\r\n            setProgress((prev) => ({ ...prev, upload: 100 }));\r\n            setProgressMessages((prev) => ({\r\n              ...prev,\r\n              upload: 'Dataset uploaded successfully.',\r\n            }));\r\n            await handlePreprocess(results.data);\r\n          },\r\n          error: (error) => {\r\n            console.error('CSV parsing error:', error);\r\n            alert('Error: Failed to parse CSV file.');\r\n          },\r\n        });\r\n      } else {\r\n        alert('Please upload a valid JSON or CSV file.');\r\n      }\r\n    }\r\n  };\r\n\r\n  // Progress indicators\r\n  useEffect(() => {\r\n    if (progress.preprocess === 100) {\r\n      setProgressMessages((prev) => ({\r\n        ...prev,\r\n        preprocess: 'Preprocessing completed.',\r\n      }));\r\n    }\r\n  }, [progress.preprocess]);\r\n\r\n  useEffect(() => {\r\n    if (progress.geocode === 100) {\r\n      setProgressMessages((prev) => ({\r\n        ...prev,\r\n        geocode: 'Locations marked on the map.',\r\n      }));\r\n    }\r\n  }, [progress.geocode]);\r\n\r\n  // Markers on Map\r\n  const renderMarkers = useCallback(() => {\r\n    if (map && geoData.length > 0) {\r\n      if (stateList.length === 0) {\r\n        alert('Data is not aggregated by state. Cannot mark locations on the map.');\r\n        return;\r\n      }\r\n\r\n      // Remove existing markers\r\n      markers.forEach((marker) => marker.remove());\r\n      const newMarkers = [];\r\n\r\n      geoData.forEach((data) => {\r\n        const stateName = data.state;\r\n        const coords = stateCoordinates[stateName];\r\n        if (!coords) return;\r\n\r\n        const latitude = parseFloat(coords.latitude);\r\n        const longitude = parseFloat(coords.longitude);\r\n\r\n        if (!isNaN(latitude) && !isNaN(longitude)) {\r\n          // Create Marker Element with crossOrigin\r\n          const el = document.createElement('div');\r\n          el.className = 'marker';\r\n\r\n          const img = new Image();\r\n          img.crossOrigin = 'anonymous'; // Ensure cross-origin is set\r\n          const isSelected = selectedLocation\r\n            ? selectedLocation.state === data.state\r\n            : false;\r\n          const isCompared = compareMarkersEnabled\r\n            ? [selectedState1, selectedState2].includes(stateName)\r\n            : false;\r\n          const icon = isSelected\r\n            ? redMarkerIcon\r\n            : isCompared\r\n            ? yellowMarkerIcon\r\n            : blueMarkerIcon;\r\n          img.src = icon;\r\n          img.style.width = '30px';\r\n          img.style.height = '30px';\r\n          img.style.cursor = 'pointer';\r\n\r\n          el.appendChild(img);\r\n\r\n          const marker = new mapboxgl.Marker(el)\r\n            .setLngLat([longitude, latitude])\r\n            .addTo(map);\r\n          const popup = new mapboxgl.Popup({ offset: 25 }).setText(stateName);\r\n          marker.setPopup(popup);\r\n\r\n          marker.getElement().addEventListener('click', () => {\r\n            handleLocationSelect(data);\r\n          });\r\n\r\n          newMarkers.push(marker);\r\n        }\r\n      });\r\n      setMarkers(newMarkers);\r\n      setMarkersAdded(true);\r\n\r\n      setProgress((prev) => ({ ...prev, geocode: 100 }));\r\n      setProgressMessages((prev) => ({\r\n        ...prev,\r\n        geocode: 'Locations marked on the map.',\r\n      }));\r\n    }\r\n  }, [\r\n    map,\r\n    geoData,\r\n    selectedLocation,\r\n    stateCoordinates,\r\n    markers,\r\n    stateList,\r\n    compareMarkersEnabled,\r\n    selectedState1,\r\n    selectedState2,\r\n    handleLocationSelect,\r\n  ]);\r\n\r\n  // Re-render markers when selectedLocation or comparison changes\r\n  useEffect(() => {\r\n    if (markersAdded) {\r\n      renderMarkers();\r\n    }\r\n  }, [selectedLocation, compareMarkersEnabled]);\r\n\r\n  // Comparison Selected state\r\n  const handleStateSelection = () => {\r\n    if (selectedState1 && selectedState2) {\r\n      const data1 = geoData.find((item) => item.state === selectedState1);\r\n      const data2 = geoData.find((item) => item.state === selectedState2);\r\n\r\n      if (!data1 || !data2) {\r\n        alert('One or both selected states have no data.');\r\n        return;\r\n      }\r\n\r\n      const labels = numericHeaders;\r\n      const dataset = {\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: selectedState1,\r\n            data: numericHeaders.map((header) => {\r\n              const value = data1[header] || 0;\r\n              const { min, max } = globalMinMax[header] || { min: 0, max: 1 };\r\n              const normalizedValue =\r\n                max !== min ? ((value - min) / (max - min)) * 9.5 + 0.5 : 5;\r\n              return isFinite(normalizedValue) ? normalizedValue : 0.5;\r\n            }),\r\n            actualValues: numericHeaders.map((header) => data1[header] || 0),\r\n            backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n            borderColor: 'rgba(255, 99, 132, 1)',\r\n            borderWidth: 1,\r\n          },\r\n          {\r\n            label: selectedState2,\r\n            data: numericHeaders.map((header) => {\r\n              const value = data2[header] || 0;\r\n              const { min, max } = globalMinMax[header] || { min: 0, max: 1 };\r\n              const normalizedValue =\r\n                max !== min ? ((value - min) / (max - min)) * 9.5 + 0.5 : 5;\r\n              return isFinite(normalizedValue) ? normalizedValue : 0.5;\r\n            }),\r\n            actualValues: numericHeaders.map((header) => data2[header] || 0),\r\n            backgroundColor: 'rgba(54, 162, 235, 0.5)',\r\n            borderColor: 'rgba(54, 162, 235, 1)',\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      };\r\n\r\n      setChartData(dataset);\r\n      setSelectedLocation(null);\r\n      setCompareMarkersEnabled(true);\r\n\r\n      // Selected states\r\n      renderMarkers();\r\n    }\r\n  };\r\n  const chartOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    scales:\r\n      chartType === 'Bar'\r\n        ? {\r\n            y: {\r\n              beginAtZero: true,\r\n              min: 0.5,\r\n              max: 10,\r\n            },\r\n          }\r\n        : {},\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n      },\r\n      datalabels: {\r\n        display: true,\r\n        color: '#000',\r\n        align: 'center',\r\n        anchor: 'center',\r\n        formatter: function (value, context) {\r\n          const dataset = context.chart.data.datasets[context.datasetIndex];\r\n          if (dataset.actualValues) {\r\n            const actualValue = dataset.actualValues[context.dataIndex];\r\n            if (typeof actualValue === 'number' && isFinite(actualValue)) {\r\n              return actualValue.toFixed(2);\r\n            } else {\r\n              return '';\r\n            }\r\n          } else {\r\n            if (typeof value === 'number' && isFinite(value)) {\r\n              return value.toFixed(2);\r\n            } else {\r\n              return '';\r\n            }\r\n          }\r\n        },\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function (context) {\r\n            const dataset = context.dataset;\r\n            const actualValue = dataset.actualValues\r\n              ? dataset.actualValues[context.dataIndex]\r\n              : context.parsed.y;\r\n            if (typeof actualValue === 'number' && isFinite(actualValue)) {\r\n              return `${context.label}: ${actualValue.toFixed(2)}`;\r\n            } else {\r\n              return `${context.label}: ${actualValue || ''}`;\r\n            }\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  // Expose methods via ref\r\n  useImperativeHandle(ref, () => ({\r\n    exportMapAsImage: () => {\r\n      handleExportAsImage();\r\n    },\r\n  }));\r\n\r\n  // Adjust the handleExportAsImage function to include the progress bar\r\n  const handleExportAsImage = async () => {\r\n    try {\r\n      // Capture the upload and dataset details section\r\n      const uploadDataUrl = await domtoimage.toPng(uploadRef.current, {\r\n        cacheBust: true,\r\n        style: { transform: 'scale(1)' },\r\n      });\r\n\r\n      // Capture the progress bars\r\n      const progressDataUrl = await domtoimage.toPng(progressRef.current, {\r\n        cacheBust: true,\r\n        style: { transform: 'scale(1)' },\r\n      });\r\n\r\n      // Capture the map canvas\r\n      const mapCanvas = map.getCanvas();\r\n      const mapDataUrl = mapCanvas.toDataURL('image/png');\r\n\r\n      // Capture the sidebar\r\n      const sidebarDataUrl = await domtoimage.toPng(sidebarRef.current, {\r\n        cacheBust: true,\r\n        style: { transform: 'scale(1)' },\r\n      });\r\n\r\n      // Combine and export\r\n      combineImages(uploadDataUrl, progressDataUrl, mapDataUrl, sidebarDataUrl);\r\n    } catch (error) {\r\n      console.error('Export failed:', error);\r\n      alert('Export failed. Please try again.');\r\n    }\r\n  };\r\n\r\n  // Adjust the combineImages function\r\n  const combineImages = (uploadDataUrl, progressDataUrl, mapDataUrl, sidebarDataUrl) => {\r\n    const uploadImage = new Image();\r\n    uploadImage.src = uploadDataUrl;\r\n    uploadImage.crossOrigin = 'anonymous';\r\n\r\n    const progressImage = new Image();\r\n    progressImage.src = progressDataUrl;\r\n    progressImage.crossOrigin = 'anonymous';\r\n\r\n    const mapImage = new Image();\r\n    mapImage.src = mapDataUrl;\r\n    mapImage.crossOrigin = 'anonymous';\r\n\r\n    const sidebarImage = new Image();\r\n    sidebarImage.src = sidebarDataUrl;\r\n    sidebarImage.crossOrigin = 'anonymous';\r\n\r\n    Promise.all([\r\n      new Promise((resolve) => (uploadImage.onload = resolve)),\r\n      new Promise((resolve) => (progressImage.onload = resolve)),\r\n      new Promise((resolve) => (mapImage.onload = resolve)),\r\n      new Promise((resolve) => (sidebarImage.onload = resolve)),\r\n    ]).then(() => {\r\n      const leftWidth = Math.max(uploadImage.width, mapImage.width);\r\n      const totalHeight = uploadImage.height + progressImage.height + mapImage.height;\r\n      const totalWidth = leftWidth + sidebarImage.width;\r\n\r\n      const canvas = document.createElement('canvas');\r\n      canvas.width = totalWidth;\r\n      canvas.height = Math.max(totalHeight, sidebarImage.height);\r\n      const ctx = canvas.getContext('2d');\r\n\r\n      // Draw upload and dataset details at the top left\r\n      ctx.drawImage(uploadImage, 0, 0);\r\n\r\n      // Draw progress bars below the upload section\r\n      ctx.drawImage(progressImage, 0, uploadImage.height);\r\n\r\n      // Draw map below the progress bars\r\n      ctx.drawImage(mapImage, 0, uploadImage.height + progressImage.height);\r\n\r\n      // Draw sidebar on the right\r\n      ctx.drawImage(sidebarImage, leftWidth, 0);\r\n\r\n      canvas.toBlob(\r\n        (blob) => {\r\n          const link = document.createElement('a');\r\n          link.download = 'map_view.jpg';\r\n          link.href = URL.createObjectURL(blob);\r\n          link.click();\r\n        },\r\n        'image/jpeg',\r\n        0.95\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div ref={containerRef} style={styles.container}>\r\n      <div style={styles.leftContainer}>\r\n        <div style={styles.topLeftContainer}>\r\n          <div ref={uploadRef} style={styles.uploadContainer}>\r\n            {/* Upload Data Section */}\r\n            <div style={styles.section}>\r\n              <h3 style={styles.sectionTitle}>Upload Data</h3>\r\n              <input\r\n                type=\"file\"\r\n                accept=\".json, .csv\"\r\n                onChange={handleFileUpload}\r\n                style={styles.fileInput}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Dataset Details Section */}\r\n          <div style={styles.datasetContainer}>\r\n            <div style={styles.section}>\r\n              <h3 style={styles.sectionTitle}>Dataset Details</h3>\r\n              {geoData.length > 0 ? (\r\n                <div style={styles.datasetDetails}>\r\n                  <p>\r\n                    <strong>Rows:</strong> {totalRows}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Columns:</strong> {totalColumns}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Numeric Columns:</strong> {numericHeaders.join(', ')}\r\n                  </p>\r\n                  <p>\r\n                    <strong>String Columns:</strong> {stringHeaders.join(', ')}\r\n                  </p>\r\n                </div>\r\n              ) : (\r\n                <p>No dataset uploaded yet.</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Progress Indicators */}\r\n        <div ref={progressRef} style={styles.progressContainer}>\r\n          <div style={styles.progressItem}>\r\n            <LoadingBar progress={progress.upload} />\r\n            <div style={styles.progressMessage}>{progressMessages.upload}</div>\r\n          </div>\r\n          <div style={styles.progressItem}>\r\n            <LoadingBar progress={progress.preprocess} />\r\n            <div style={styles.progressMessage}>{progressMessages.preprocess}</div>\r\n          </div>\r\n          {dataNeedsGeocoding && (\r\n            <div style={styles.progressItem}>\r\n              <LoadingBar progress={progress.geocode} />\r\n              <div style={styles.progressMessage}>{progressMessages.geocode}</div>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Map Section */}\r\n        <div style={styles.mapContainer}>\r\n          <div ref={mapContainerRef} style={styles.map}></div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Sidebar */}\r\n      <div ref={sidebarRef} style={styles.sidebar}>\r\n        {/* Location Comparison Section */}\r\n        {stateList.length >= 2 ? (\r\n          <div style={styles.section}>\r\n            <h3 style={styles.sectionTitle}>Compare Two States</h3>\r\n            <div style={styles.inputGroup}>\r\n              <label style={styles.inputLabel}>State 1:</label>\r\n              <select\r\n                value={selectedState1}\r\n                onChange={(e) => setSelectedState1(e.target.value)}\r\n                style={styles.selectDropdown}\r\n                disabled={stateList.length === 0}\r\n              >\r\n                <option value=\"\">Select State</option>\r\n                {stateList.map((state) => (\r\n                  <option key={state} value={state}>\r\n                    {state}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div style={styles.inputGroup}>\r\n              <label style={styles.inputLabel}>State 2:</label>\r\n              <select\r\n                value={selectedState2}\r\n                onChange={(e) => setSelectedState2(e.target.value)}\r\n                style={styles.selectDropdown}\r\n                disabled={stateList.length === 0}\r\n              >\r\n                <option value=\"\">Select State</option>\r\n                {stateList.map((state) => (\r\n                  <option key={state} value={state}>\r\n                    {state}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <button\r\n              onClick={handleStateSelection}\r\n              disabled={!selectedState1 || !selectedState2}\r\n              style={{\r\n                ...styles.chartButton,\r\n                backgroundColor:\r\n                  selectedState1 && selectedState2 ? '#28a745' : '#6c757d',\r\n              }}\r\n            >\r\n              Compare\r\n            </button>\r\n          </div>\r\n        ) : geoData.length > 0 ? (\r\n          <div style={styles.section}>\r\n            <h3 style={styles.sectionTitle}>Compare Two States</h3>\r\n            <p style={{ color: '#6c757d' }}>\r\n              Comparison is enabled when the dataset contains at least two unique states.\r\n            </p>\r\n          </div>\r\n        ) : null}\r\n\r\n        {/* Chart Type Selection Section */}\r\n        <div style={styles.section}>\r\n          <h3 style={styles.sectionTitle}>Select Chart Type</h3>\r\n          <div style={styles.chartOptions}>\r\n            <button\r\n              onClick={() => setChartType('Bar')}\r\n              style={{\r\n                ...styles.chartButton,\r\n                ...(chartType === 'Bar' ? styles.chartButtonActive : {}),\r\n              }}\r\n            >\r\n              Bar Chart\r\n            </button>\r\n            <button\r\n              onClick={() => setChartType('Pie')}\r\n              style={{\r\n                ...styles.chartButton,\r\n                ...(chartType === 'Pie' ? styles.chartButtonActive : {}),\r\n              }}\r\n            >\r\n              Pie Chart\r\n            </button>\r\n            <button\r\n              onClick={() => setChartType('Doughnut')}\r\n              style={{\r\n                ...styles.chartButton,\r\n                ...(chartType === 'Doughnut' ? styles.chartButtonActive : {}),\r\n              }}\r\n            >\r\n              Doughnut Chart\r\n            </button>\r\n            <button\r\n              onClick={() => setChartType('PolarArea')}\r\n              style={{\r\n                ...styles.chartButton,\r\n                ...(chartType === 'PolarArea' ? styles.chartButtonActive : {}),\r\n              }}\r\n            >\r\n              PolarArea Chart\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Chart Display Section */}\r\n        {chartData && (\r\n          <div style={styles.chartContainer}>\r\n            <div style={styles.chartWrapper}>\r\n              <div style={styles.chartContent}>\r\n                <h3>{chartType} Chart</h3>\r\n                {chartType === 'Bar' && (\r\n                  <Bar data={chartData} options={chartOptions} />\r\n                )}\r\n                {chartType === 'Pie' && (\r\n                  <Pie data={chartData} options={chartOptions} />\r\n                )}\r\n                {chartType === 'Doughnut' && (\r\n                  <Doughnut data={chartData} options={chartOptions} />\r\n                )}\r\n                {chartType === 'PolarArea' && (\r\n                  <PolarArea data={chartData} options={chartOptions} />\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default MapView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}