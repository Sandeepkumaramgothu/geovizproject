{"ast":null,"code":"var _jsxFileName = \"/Users/girishkumarpatchikoru/Desktop/projecthci/geovizproject/frontend/src/components/MapComponent.js\",\n  _s = $RefreshSig$();\n// src/components/MapComponent.js\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport { MAPBOX_TOKEN } from './constants'; // Ensure this file exists and contains your Mapbox token\nimport blueMarkerIcon from '../assets/images/custom-marker-blue.png'; // Ensure these assets exist\nimport redMarkerIcon from '../assets/images/custom-marker-red.png';\nimport './marker.css'; // Ensure this CSS file exists for marker styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapComponent = ({\n  geoData,\n  selectedLocation,\n  handleLocationSelect,\n  markersAdded,\n  setMarkersAdded\n}) => {\n  _s();\n  const [map, setMap] = useState(null);\n  const [markers, setMarkers] = useState([]);\n\n  // Initialize Map\n  useEffect(() => {\n    const initializeMap = new mapboxgl.Map({\n      container: 'map',\n      // HTML container id\n      style: 'mapbox://styles/mapbox/streets-v11',\n      // style URL\n      center: [-98.5795, 39.8283],\n      // starting position [lng, lat] (center of USA)\n      zoom: 3 // starting zoom\n    });\n\n    // Add navigation control (the +/- zoom buttons)\n    const nav = new mapboxgl.NavigationControl();\n    initializeMap.addControl(nav, 'top-right');\n    setMap(initializeMap);\n\n    // Clean up on unmount\n    return () => initializeMap.remove();\n  }, []);\n\n  // Function to Render Markers on Map\n  const renderMarkers = useCallback(() => {\n    if (map && geoData.length > 0) {\n      // Remove existing markers\n      markers.forEach(marker => marker.remove());\n      const newMarkers = [];\n      geoData.forEach(data => {\n        const latitude = parseFloat(data.latitude);\n        const longitude = parseFloat(data.longitude);\n        if (!isNaN(latitude) && !isNaN(longitude)) {\n          const el = document.createElement('div');\n          el.className = 'marker';\n          const isSelected = selectedLocation ? selectedLocation.locationID === data.locationID : false;\n          const icon = isSelected ? redMarkerIcon : blueMarkerIcon;\n          el.style.backgroundImage = `url(${icon})`;\n          el.style.width = '30px';\n          el.style.height = '30px';\n          el.style.backgroundSize = 'contain';\n          el.style.cursor = 'pointer';\n          const marker = new mapboxgl.Marker(el).setLngLat([longitude, latitude]).addTo(map);\n          marker.getElement().addEventListener('click', () => {\n            handleLocationSelect(data);\n          });\n          newMarkers.push(marker);\n        }\n      });\n      setMarkers(newMarkers);\n      setMarkersAdded(true); // Update state to prevent re-adding\n\n      // Update geocode progress to 100% and set message handled in parent\n    }\n  }, [map, geoData, selectedLocation, handleLocationSelect, markers, setMarkersAdded]);\n\n  // Listen for custom 'renderMarkers' event\n  useEffect(() => {\n    const handleRenderMarkers = () => {\n      renderMarkers();\n    };\n    window.addEventListener('renderMarkers', handleRenderMarkers);\n    return () => {\n      window.removeEventListener('renderMarkers', handleRenderMarkers);\n    };\n  }, [renderMarkers]);\n\n  // Re-render markers when selectedLocation changes to update marker colors\n  useEffect(() => {\n    if (markersAdded) {\n      renderMarkers();\n    }\n  }, [selectedLocation, renderMarkers, markersAdded]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    style: {\n      flex: 1,\n      height: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 10\n  }, this);\n};\n_s(MapComponent, \"/5X3s5UQKQiwsxoHlaEizlKf9SM=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","mapboxgl","MAPBOX_TOKEN","blueMarkerIcon","redMarkerIcon","jsxDEV","_jsxDEV","MapComponent","geoData","selectedLocation","handleLocationSelect","markersAdded","setMarkersAdded","_s","map","setMap","markers","setMarkers","initializeMap","Map","container","style","center","zoom","nav","NavigationControl","addControl","remove","renderMarkers","length","forEach","marker","newMarkers","data","latitude","parseFloat","longitude","isNaN","el","document","createElement","className","isSelected","locationID","icon","backgroundImage","width","height","backgroundSize","cursor","Marker","setLngLat","addTo","getElement","addEventListener","push","handleRenderMarkers","window","removeEventListener","id","flex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/girishkumarpatchikoru/Desktop/projecthci/geovizproject/frontend/src/components/MapComponent.js"],"sourcesContent":["// src/components/MapComponent.js\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport { MAPBOX_TOKEN } from './constants'; // Ensure this file exists and contains your Mapbox token\nimport blueMarkerIcon from '../assets/images/custom-marker-blue.png'; // Ensure these assets exist\nimport redMarkerIcon from '../assets/images/custom-marker-red.png';\nimport './marker.css'; // Ensure this CSS file exists for marker styling\n\nconst MapComponent = ({\n  geoData,\n  selectedLocation,\n  handleLocationSelect,\n  markersAdded,\n  setMarkersAdded,\n}) => {\n  const [map, setMap] = useState(null);\n  const [markers, setMarkers] = useState([]);\n\n  // Initialize Map\n  useEffect(() => {\n    const initializeMap = new mapboxgl.Map({\n      container: 'map', // HTML container id\n      style: 'mapbox://styles/mapbox/streets-v11', // style URL\n      center: [-98.5795, 39.8283], // starting position [lng, lat] (center of USA)\n      zoom: 3, // starting zoom\n    });\n\n    // Add navigation control (the +/- zoom buttons)\n    const nav = new mapboxgl.NavigationControl();\n    initializeMap.addControl(nav, 'top-right');\n\n    setMap(initializeMap);\n\n    // Clean up on unmount\n    return () => initializeMap.remove();\n  }, []);\n\n  // Function to Render Markers on Map\n  const renderMarkers = useCallback(() => {\n    if (map && geoData.length > 0) {\n      // Remove existing markers\n      markers.forEach((marker) => marker.remove());\n      const newMarkers = [];\n\n      geoData.forEach((data) => {\n        const latitude = parseFloat(data.latitude);\n        const longitude = parseFloat(data.longitude);\n\n        if (!isNaN(latitude) && !isNaN(longitude)) {\n          const el = document.createElement('div');\n          el.className = 'marker';\n          const isSelected = selectedLocation\n            ? selectedLocation.locationID === data.locationID\n            : false;\n          const icon = isSelected ? redMarkerIcon : blueMarkerIcon;\n          el.style.backgroundImage = `url(${icon})`;\n          el.style.width = '30px';\n          el.style.height = '30px';\n          el.style.backgroundSize = 'contain';\n          el.style.cursor = 'pointer';\n\n          const marker = new mapboxgl.Marker(el)\n            .setLngLat([longitude, latitude])\n            .addTo(map);\n\n          marker.getElement().addEventListener('click', () => {\n            handleLocationSelect(data);\n          });\n\n          newMarkers.push(marker);\n        }\n      });\n      setMarkers(newMarkers);\n      setMarkersAdded(true); // Update state to prevent re-adding\n\n      // Update geocode progress to 100% and set message handled in parent\n    }\n  }, [map, geoData, selectedLocation, handleLocationSelect, markers, setMarkersAdded]);\n\n  // Listen for custom 'renderMarkers' event\n  useEffect(() => {\n    const handleRenderMarkers = () => {\n      renderMarkers();\n    };\n\n    window.addEventListener('renderMarkers', handleRenderMarkers);\n\n    return () => {\n      window.removeEventListener('renderMarkers', handleRenderMarkers);\n    };\n  }, [renderMarkers]);\n\n  // Re-render markers when selectedLocation changes to update marker colors\n  useEffect(() => {\n    if (markersAdded) {\n      renderMarkers();\n    }\n  }, [selectedLocation, renderMarkers, markersAdded]);\n\n  return <div id=\"map\" style={{ flex: 1, height: '100%' }}></div>;\n};\n\nexport default MapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}